<?php
import("stock_VoPrice");
import("stock_ViewStock");
import("stock_ViewDetail");
class stock_ViewChart{
	public function con(){
		$this->ao=stock_Ao::get();
		$this->viewStock=$this->ao->bean("stock_ViewStock/con");
		$this->viewDetail=$this->ao->bean("stock_ViewDetail/con");
		$this->voPrice1=$this->ao->bean("stock_VoPrice/con1");
		$this->w = 1;//$this->ao->conf["w"];
		$this->padX = 0;
		$this->ox=0;
		$this->height2=100;
		$this->oy=0*100;
		$this->padY = 0;
		$this->minMaxPadFactor = 2.5;
		$this->minMaxPadFactorWeb = $this->minMaxPadFactor;
	
		$this->width = 0*830+939;//;+840  1779
		$this->height = 1300;//720;////410;/////440;//540+0*100;
		
		$this->rowPriceArrMap=array(
		);
		$this->voRowPriceArr=get(new stock_Vo())->_con("maC1,maC2,maC3,maC4,dev,minMax1","");		
		return $this;
	}

	public $jque;
	public function view(){
		if($this->jque!=null) return $this->jque;
		//1260px
?><!--$html-->
<div>
	<div id="divCanvasText" style='position:relative'>
	</div>
	<div id="divOnePrice" align="right" style='position:absolute;left:200px;top:<?= 2+0.0*$this->height ?>px;border:0px solid;width:655px;'></div>
	<canvas id="canvas"></canvas>
</div>
<!--/$html--><?
		$this->jque=que($html);
		
		$this->divCanvasText=$this->jque->find("#divCanvasText");
		$this->divOnePrice=$this->jque->find("#divOnePrice");
		$this->canvas=$this->jque->find("#canvas");
		
		//$this->jque = que("<div></div>");
		//$this->divCanvasText = que("<div style='position:relative'></div>")->appendTo($this->jque);
		//$this->canvas = que("<canvas></canvas>")->appendTo($this->jque)->css(array(
		$this->canvas->css(array(
			"background-color" => "white",
			"height" => $this->height,
			"width" => $this->width, "border"=>"solid 0px"));
		$this->canvas->attr(array("width"=>$this->width, "height"=>$this->height));

		$canvas = $this->canvas->get(0);
		/*<@ if (typeof G_vmlCanvasManager != 'undefined') G_vmlCanvasManager->initElement($canvas); @>*/
		$this->context = $canvas->getContext('2d');
		
		
		return $this;
	}
	
	public static $startDate2  = "2011-08-16";
	
	public static $startDate = "2011-09-13";
	
	public static $startDate3 = "2011-07-29";
	
	public static $startDate4 = "2011-06-14";

	public $w=5;
	public $padX = 0;
	public $valueShift = 0;
	public $ox=0;
	public $oy=40;
	public $minMaxPadFactor = 1.93;

	public $stickY = 11;

	public $padY = 0;
	public $ma1 = 10;
	public $ma2 = 20;
	public $ma3 = 30;
	public $ma4 = 40;
	public $ma5 = 50;
	public $ma6 = 60;

	public $minStockDataX;
	public $maxStockDataX;
	public $rangeX;
	public $scaleX;

	public $minStockDataY = 30;
	public $maxStockDataY = 80;
	public $rangeY;
	public $scaleY;

	public $minStockDataY2 = 0;
	public $maxStockDataY2 = 3000000000;
	public $rangeY2;
	public $scaleY2;

	public $minStockDataY3 = -7;
	public $maxStockDataY3 = 7;
	public $rangeY3;
	public $scaleY3;
	
	public $minStockDataY4 = -10;
	public $maxStockDataY4 = 10;
	public $rangeY4;
	public $scaleY4;

	public $rowPriceArr = array();
	public $candIMap = array(
	);
	public $canvas;
	public $context;
	public $divCanvasText;
	
	public $width;
	public $height;
	
	public function makeRowPriceArr($vo, $rowPriceArr ,$limit=null){
		//$vo=$this->voPrice;
		$re=array();
		$voRe=$this->voRowPriceArr;
		$len=count($rowPriceArr);
		for($i=0 ; $i < $len ;$i++){
			$re[$i]=array();
		}

		if($limit==null) $len2=$len;
		else $len2=$limit;
		
		
		if($this->ao->conf["combineDay"]==1){
			
			
			$ma01=8;
			$ma02=13;
			$ma0=21;
			$ma1=34;
			$ma2=55;
			$ma3=89;
			
			$ma01=5;
			$ma02=10;
			$ma0=15;
			$ma1=20;
			$ma2=25;
			$ma3=30;
			
			$ma01=5;
			$ma02=8;
			$ma0=13;
			$ma1=21;
			$ma2=34;
			$ma3=55;
		} else if($this->ao->conf["combineDay"]==2 || $this->ao->conf["combineDay"]==8){ ///5 8 13 21 34 55 89

			$ma01=8;
			$ma02=13;
			$ma0=21;
			$ma1=34;
			$ma2=55;
			$ma3=89;
			
			$ma01=5;
			$ma02=10;
			$ma0=15;
			$ma1=20;
			$ma2=25;
			$ma3=30;
			
			$ma01=5;
			$ma02=8;
			$ma0=13;
			$ma1=21;
			$ma2=34;
			$ma3=55;
		} else {
			$ma01=5;
			$ma02=8;
			$ma0=13;
			$ma1=21;
			$ma2=34;
			$ma3=55;
		}
		
		for($i=$len-1 ; $i >=0 ;$i--){
			//if($i >= $len - $ma3) continue;
			if($this->ao->isNull0($rowPriceArr[$i][$vo->close])) continue;
			
			$min1=999999;$max1=-999999;
			$maC=0;
			for($j=0 ; $j < $ma3 ; $j++){
				$x=$i+$j;
				if($this->ao->isNull0($rowPriceArr[$x][$vo->close])) break;
				if($rowPriceArr[$x+1]==null || $this->ao->isNull0($rowPriceArr[$x+1][$vo->close])) break;
				
				if($i==0 && $j>=1 && $j<=4){
					if($rowPriceArr[$x][$vo->close]<$min1){
						$min1=$rowPriceArr[$x][$vo->close];
					}
					if($rowPriceArr[$x][$vo->close]>$max1){
						$max1=$rowPriceArr[$x][$vo->close];
					}
					if($j==4){
						if($min1!=0) $re[$i][$voRe->minMax1]=round(100*($max1-$min1)/$min1);
					}
				}

				$maC+=$rowPriceArr[$x+1][$vo->close];
				//$maC+=($rowPriceArr[$x+1][$vo->low]+$rowPriceArr[$x+1][$vo->high])/2;
				if($j==$ma0-1 || $j==$ma1-1 || $j==$ma2-1 || $j==$ma3-1  || $j==$ma01-1 || $j==$ma02-1){
					if($j==$ma0-1) {
						$re[$i][$voRe->maC1]=$maC/($j+1);
						//$re[$i]["maP1"]=round(100*($rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC1])/$re[$i][$voRe->maC1]);
						
						////$ma=$rowPriceArr[$i+1][$vo->close];
						//$ma=$re[$i][$voRe->maC1];
						//if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma01"]) $ma=$re[$i]["ma01"];
						//if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma02"]) $ma=$re[$i]["ma02"];
						////if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC1]) $ma=$re[$i][$voRe->maC1];
						//$re[$i]["maP1"]=round(100*($rowPriceArr[$i][$vo->close]-$ma)/$ma);
					}
					if($j==$ma1-1){ 
						$re[$i][$voRe->maC2]=$maC/($j+1);
						//$re[$i]["maP2"]=round(100*($rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC2])/$re[$i][$voRe->maC2]);
					}
					if($j==$ma2-1){
						$re[$i][$voRe->maC3]=$maC/($j+1);
						//$re[$i]["maP3"]=round(100*($rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC3])/$re[$i][$voRe->maC3]);
					}
					if($j==$ma01-1) {
						$re[$i]["ma01"]=$maC/($j+1);
						//$re[$i]["maP01"]=round(100*($rowPriceArr[$i][$vo->close]-$re[$i]["ma01"])/$re[$i]["ma01"]);
					}
					if($j==$ma02-1) {
						$re[$i]["ma02"]=$maC/($j+1);
						
						$ma=$re[$i]["ma02"];
						//$ma=$rowPriceArr[$i+1][$vo->close];
						if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma01"]) $ma=$re[$i]["ma01"];
						//if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma02"]) $ma=$re[$i]["ma02"];
						$re[$i]["maP02"]=round(100*($rowPriceArr[$i][$vo->close]-$ma)/$ma);
					}
					if($j==$ma3-1) {
						$re[$i][$voRe->maC4]=$maC/($j+1);
						//if(abs($rowPriceArr[$i][$vo->close]-$ma) < abs($rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC1])) $ma=$re[$i][$voRe->maC1];
						//$re[$i]["maP4"]=round(100*($rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC4])/$re[$i][$voRe->maC4]);
						
						$ma=$re[$i][$voRe->maC4];
						//$ma=$rowPriceArr[$i+1][$vo->close];
						
						//if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma01"]) $ma=$re[$i]["ma01"];
						//if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma02"]) $ma=$re[$i]["ma02"];
						if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC1]) $ma=$re[$i][$voRe->maC1];
						if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC2]) $ma=$re[$i][$voRe->maC2];
						if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC3]) $ma=$re[$i][$voRe->maC3];
						//if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i][$voRe->maC4]) $ma=$re[$i][$voRe->maC4];
						$re[$i]["maP4"]=round(100*($rowPriceArr[$i][$vo->close]-$ma)/$ma);
						
						$dev=0;
						for($k=0 ; $k < $ma3 ; $k++){
							$y=$i+$k;
							$close=$rowPriceArr[$y+1][$vo->close];
							$dev+=pow($close-$re[$i][$voRe->maC4],2);
							if($k==$ma3-1) {
								$dev=round(sqrt($dev/($k+1)),2);
								$re[$i][$voRe->dev]=$dev;
							}
						}
					}
				}

			}
		}
		return $re;
	}
	
	public function changeRowPriceArr($rowPriceArr){
		$combineDay=$this->ao->conf["combineDay"];
		if($this->ao->conf["combineDay"]==8) $combineDay=2;
		$vo=$this->voPrice1;
		
		$rowPriceArrEx=array();
		$j=0;
		
		$len=count($rowPriceArr);
		for($i=0;$i<$len;$i++){
			$first=false;
			if($this->ao->conf["combineDay"]==8){
				$newI=$i+1;
				if($i==0) $first=true;
			} else $newI=$i;
			$mod=$newI%$combineDay;
			
			if($first || $mod==0){
				if($first) $j=0;
				else $j=$newI/$combineDay;
				$rowPriceArrEx[$j]=array();
				$rowPriceArrEx[$j][$vo->open] = $rowPriceArr[$i][$vo->open];
				$rowPriceArrEx[$j][$vo->high] = $rowPriceArr[$i][$vo->high];
				$rowPriceArrEx[$j][$vo->low] = $rowPriceArr[$i][$vo->low];
				$rowPriceArrEx[$j][$vo->close] = $rowPriceArr[$i][$vo->close];
				$rowPriceArrEx[$j][$vo->volume] = $rowPriceArr[$i][$vo->volume];
			} else {
				if($rowPriceArrEx[$j][$vo->high] < $rowPriceArr[$i][$vo->high]) $rowPriceArrEx[$j][$vo->high]=$rowPriceArr[$i][$vo->high];
				if($rowPriceArrEx[$j][$vo->low] > $rowPriceArr[$i][$vo->low]) $rowPriceArrEx[$j][$vo->low]=$rowPriceArr[$i][$vo->low];
				$rowPriceArrEx[$j][$vo->open] = $rowPriceArr[$i][$vo->open];
				//$rowPriceArrEx[$j][$vo->close] = $rowPriceArr[$i][$vo->close];
				$rowPriceArrEx[$j][$vo->volume] += $rowPriceArr[$i][$vo->volume];
			}
		}

		return $rowPriceArrEx;
	}
	
	public function conPaint(){
		$this->symbol = $this->viewDetail->symbol;
		/*
		$faArr=explode(",",$this->ao->conf["FA"]);
		$this->faMap=array(
		);
		foreach($faArr as $i=>$str){
			$arr=explode(" ",$str);
			$symbol=$arr[0];
			$bv=$arr[1];
			$this->faMap[$symbol]=$bv;
		}
		*/
		/*
		$this->rowPriceArrMap=array(
		);
		//$this->rowPriceArrMap[$this->symbol]=$this->viewDetail->rowPriceArr;
		//$this->rowPriceExArr=$this->viewStock->makeRowPriceArr2($this->voPrice1,$this->viewDetail->rowPriceArr,count($this->viewDetail->rowPriceArr));
		$this->rowPriceArrMap[$this->symbol] = $this->changeRowPriceArr($this->viewDetail->rowPriceArrMap[$this->symbol]);
		$this->rowPriceExArr=$this->makeRowPriceArr($this->voPrice1,$this->rowPriceArrMap[$this->symbol]);
		*/
		return $this;
	}
	public function viewPaint(){
		$this->context->clearRect(0, 0, $this->width, $this->height);
		$this->divCanvasText->html("");
		$this->paint();
	}
	
	public function paintField(){
		$voStock=$this->viewStock->voStock;
		$vo2=$this->viewStock->voPrice2;
		$reText = true;
		
		$thisw=$this->w;
		$this->w = 5;
		$this->padX = 0;
			
		$this->minStockDataY = -5;
		$this->maxStockDataY = 105;
		$this->saveScale();
		
		$stockMap=$this->viewStock->stockMap;
		$vn30Arr=explode(",",$this->ao->conf["vn30"]);
		$vn30Map=array(
		);
		foreach($vn30Arr as $i=>$vn30){
			$vn30=trim($vn30,"'");
			$vn30Map[$vn30]=1;
		}
		for($k=0 ; $k< 3; $k++){
			$map = array(
			);
			$arr = array(0,0,0,0,0,0,0);
			foreach($stockMap as $symbol=>$stock){
				if($this->viewStock->isMarket($symbol)) continue;
				
				$row = $stock[$voStock->live];
				if($row==null) continue;
				
				if($k==1 && $stock[$voStock->value2] < 5000000) continue;
				/////if($k==2 && $stock[$voStock->value2] >= 3000000) continue;
				if($k==2 && $vn30Map[$symbol]==null) continue;
				
				if( $this->ao->isNull0($row[$vo2->ref]) || $this->ao->isNull0($row[$vo2->close])) continue;
				
				$per = round(100*($row[$vo2->close] - $row[$vo2->ref]) / $row[$vo2->ref],1);
				
				if( 99 > $per && $per >= 5 ) $arr[6] += 1;
				else if( 5 > $per && $per >= 3 ) $arr[5] += 1;
				else if( 3 > $per && $per > 0 ) $arr[4] += 1;
				
				else if( 0 >= $per && $per >= 0 ) $arr[3] += 1;
				
				else if( 0 > $per && $per > -3 ) $arr[2] += 1;
				else if( -3 >= $per && $per > -5 ) $arr[1] += 1;
				else if( -5 >= $per && $per >= -99 ) $arr[0] += 1;
			}
		
			
			$sum =  0;
			foreach($arr as $i=>$count){
				$sum += $count;
			}

			$str = "";
			if($k==0) $str = "a";
			if($k==1) $str = "g";
			if($k==2) $str = "l";
			
			$text = $str;//."<br/>".$sum;
			$text2= $sum."<br/>".$str;
			
			$dis = -$this->w-1;
			//if($k >= 3) $dis = -13;
			
			$x = $this->getX(0 + $k*1) + $dis;
			if($reText) {
				//$this->paintText($text, $x, $this->getY(0));
			}
			
			$acc = 0;
			$y0= $this->getY($acc);
			for($i = 6; $i>=0; $i--){
				$arr[$i] = round( 100*$arr[$i]/$sum,2 );
				$this->context->fillStyle = "blue";
				if($i==3) $this->context->fillStyle = "white";
				if($i==2 || $i==4) $this->context->fillStyle = "green";
				if($i==0 || $i==6) $this->context->fillStyle = "hotpink";
				
				$x = $this->getX(0 + $k*1.0) + $dis;//1.5
				
				$acc += $arr[$i];
				
				$y1 = $this->getY( $acc );
				$h = $y1 - $y0;
				if($i==3 && abs($h)<=5) $h=5;
				$this->context->fillRect($x, $y0, $this->w+1, $h);
				$y0 = $y1;
			}
			
			$this->context->restore();
			$this->context->beginPath();
			$this->context->strokeStyle = 'Black';
			$this->context->lineWidth=1;
			
			$x1 = $this->getX(-1 + $k*1.0) + $dis + 0;
			$x2 = $this->getX(0 + $k*1.0) + $dis - 0;
		
			$y = $this->getY(50);
			$this->context->moveTo($x1, $y);
			$this->context->lineTo($x2, $y);
			$this->context->stroke();
		}
		$this->w=$thisw;
	}

	public function getX($i){
		return ($this->width - $this->ox - $this->padX) - ($this->w+0)*$i;
	}
	public function getI($x){
		return round( (($this->width - $this->ox - $this->padX) - $x)/($this->w+0) );
	}
	public function saveScale(){
		//$this->rangeX = $this->maxStockDataX - $this->minStockDataX;
		//$this->scaleX = ($this->width - $this->ox - $this->padX) / $this->rangeX;

		$this->rangeY = $this->maxStockDataY - $this->minStockDataY;
		$this->scaleY = (0.45*$this->height) / $this->rangeY;

		$this->rangeY2 = $this->maxStockDataY2 - $this->minStockDataY2;
		$this->scaleY2 = (0.45*$this->height) / $this->rangeY2;

		$this->maxStockDataY3=10;
		$this->minStockDataY3=-10;
		$this->maxStockDataY3=100;
		$this->minStockDataY3=-130;
		
		$this->rangeY3 = $this->maxStockDataY3 - $this->minStockDataY3;
		$this->scaleY3 = (0.10*$this->height) / $this->rangeY3;
		
		$this->maxStockDataY4=7;
		$this->minStockDataY4=-7;
		
		$this->rangeY4 = $this->maxStockDataY4 - $this->minStockDataY4;
		$this->scaleY4 = (0.2*$this->height) / $this->rangeY4;
	}
	public function getY($y){
		return (0.45*$this->height+$this->oy) - ($y- $this->minStockDataY) * $this->scaleY;
	}
	public function getY2($y){
		return (0.45*$this->height+$this->oy) - ($y- $this->minStockDataY2) * $this->scaleY2;
	}
	public function getY3($y){
		//return ($this->height - $this->oy - $this->padY) - ($y- $this->minStockDataY3) * $this->scaleY3;
		return (0.55*$this->height+$this->oy) - ($y- $this->minStockDataY3) * $this->scaleY3;
	}
	public function getY4($y){
		//return ($this->height - $this->oy - $this->padY) - ($y- $this->minStockDataY3) * $this->scaleY3;
		return (1*$this->height) - ($y- $this->minStockDataY4) * $this->scaleY4;
	}

	public function saveDtParams(){
		$vo1 = $this->voPrice1;
		$minStockDataY = 9999999;
		$iMin=0;
		$DAY_BREAK = 3*20;
		$length = count($this->rowPriceArr);
		for($i=0; $i<$length; $i++){
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($x<0) break;
			//if($this->w == 3 && $x<911-$this->padX1) break;
			
			if($stockData[$vo1->low] <= 0 || $stockData[$vo1->low]==null) continue;
			if($stockData[$vo1->low] < $minStockDataY){
				$minStockDataY = $stockData[$vo1->low];
				$iMin = $i;
			}
			//if($this->ao->conf["combineDay"]==1) 
			//if($i>=$DAY_BREAK) break;
		}
		$this->_minStockDataY=$minStockDataY;
			
		$maxStockDataY = 0;
		$length = count($this->rowPriceArr);
		for($i=0; $i<$length; $i++){
			//if($i > $iMin) break;
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($x<0) break;
			//if($this->w == 3 && $x<911-$this->padX1) break;
			
			if($stockData[$vo1->high] <= 0 || $stockData[$vo1->high]==null) continue;
			if($stockData[$vo1->high] > $maxStockDataY) {
				$maxStockDataY = $stockData[$vo1->high];
			}
			//if($this->ao->conf["combineDay"]==1) 
			//if($i>=$DAY_BREAK) break;
		}
		$this->_maxStockDataY=$maxStockDataY;
		
		//if($this->minMaxPadFactor != $this->minMaxPadFactorWeb) $this->minMaxPadFactor = 1.93;//2.5;
		$isFuture=false;
		$futureArr=explode(",",$this->ao->conf["future"]);
		foreach($futureArr as $i=>$str){
			$futureArr[$i]=trim($str,"'");
			if($this->symbol==$futureArr[$i]) {
				$isFuture=true;
				break;
			}
		}
		if($this->rowPriceArr[0] != null){
			if($this->symbol == "VNINDEX" || $this->symbol == "VNALLINDEX") {
				$this->minMaxPadFactor = 1.1;
			}
			else if($this->symbol == "HAINDEX") {
				$this->minMaxPadFactor = 1.3;
			}
			else if($this->symbol == "VN30INDEX") {
				$this->minMaxPadFactor = 1.2;
			}
			else if($isFuture) {
				$this->minMaxPadFactor = 1.05;
			}
			else {
				$this->minMaxPadFactor = 1.6;//1.75;
			}
		}

		if($minStockDataY==null || $minStockDataY==0) $minStockDataY = 10;

		$this->minStockDataY = 0.93 * $minStockDataY;
		$this->maxStockDataY = $this->minMaxPadFactor * $minStockDataY;
		
		if(1.04*$maxStockDataY > $this->maxStockDataY){
			$this->maxStockDataY = 1.04*$maxStockDataY;
		}
		if($this->symbol == "VNINDEX" || $this->symbol == "HAINDEX" || $this->symbol == "VN30INDEX") {
			$this->minStockDataY = 0.985 * $minStockDataY;
			$this->maxStockDataY = 1.02*$maxStockDataY;
		}

		$maxStockDataY2 = 0;
		$avg = 0;
		$count = 0;
		$div = 0;
		$length = count($this->rowPriceArr);
		for($i=0; $i<$length; $i++){
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($stockData[$vo1->volume]==null || $stockData[$vo1->volume]<=1) continue;
			$value = $stockData[$vo1->volume]*$stockData[$vo1->close];//$vo->getValue($stockData);
			if($value > $maxStockDataY2) $maxStockDataY2 = $value;
			$avg += $value;
			$count++;
			if($x<$this->padX) break;
			//if($this->w==5 && $i>=60) break;
			//if($this->w==5 && $i>=$DAY_BREAK) break;
		}
		if($count!=0) $avg=round($avg/$count);
		
		//$this->maxStockDataY2 = 7*$maxStockDataY2;
		$this->maxStockDataY2 = 30*$avg;
		
		//$this->minStockDataY3 = -2*1000000;
		//$this->maxStockDataY3 = 2*1000000;
		//$this->minStockDataY3 = $this->viewStock->minTradeChart*1000000;
		//$this->maxStockDataY3 = $this->viewStock->maxTradeChart*1000000;
		
		$this->saveScale();
	}

	public function paintText($text, $left, $top, $color){
		if($color==null) $color='black';
		return que(implode("", array("<div style='font-size:10px;'>",$text,"</div>")))->css(array("position"=>"absolute", "left"=>$left, "top"=>$top, "color"=>$color))->appendTo($this->divCanvasText);
	}
	
	public function paint(){
		$this->oy=0;
		$this->paintField();
		if($this->symbol == "MARKET") {
			return;
		}
	
		$this->interval = 1;
		$this->padX1 = 1*550+0*171;
		if(1==0 && $this->symbol != "HAINDEX"){
			$this->rowPriceArr = $this->rowPriceArrMap["HAINDEX"];
			$this->isIndex = true;
			
			//$this->con3();
			$this->padX = 100;//$this->padX1;
			$this->w = 3;
			$this->saveDtParams();
			$this->paintClose();
		}
		
		$this->rowPriceArrMap=array(
		);
		//$this->rowPriceArrMap[$this->symbol]=$this->viewDetail->rowPriceArr;
		//$this->rowPriceExArr=$this->viewStock->makeRowPriceArr2($this->voPrice1,$this->viewDetail->rowPriceArr,count($this->viewDetail->rowPriceArr));
		$this->rowPriceArrMap[$this->symbol] = $this->viewDetail->rowPriceArrMap[$this->symbol];
		$this->rowPriceExArr=$this->viewStock->makeRowPriceArr($this->voPrice1,$this->rowPriceArrMap[$this->symbol]);
		
		$this->rowPriceArr = $this->rowPriceArrMap[$this->symbol];
		$this->isIndex = false;
		
		//$this->con();
		$this->padX = 4*5+7;
		$this->padY = 0;
		$this->oy=0;
		$this->saveDtParams();
		
		//$this->paintStat();
		$this->paintValue();
		$this->paintMa();
		$this->paintCandleStick();
		//$this->paintClose();
		$this->setOnePrice();
		$this->paintIndicator();
		
		$this->rowPriceArrMap=array(
		);
		//$this->rowPriceArrMap[$this->symbol]=$this->viewDetail->rowPriceArr;
		//$this->rowPriceExArr=$this->viewStock->makeRowPriceArr2($this->voPrice1,$this->viewDetail->rowPriceArr,count($this->viewDetail->rowPriceArr));
		$this->rowPriceArrMap[$this->symbol] = $this->changeRowPriceArr($this->viewDetail->rowPriceArrMap[$this->symbol]);
		$this->rowPriceExArr=$this->viewStock->makeRowPriceArr($this->voPrice1,$this->rowPriceArrMap[$this->symbol]);
		
		$this->rowPriceArr = $this->rowPriceArrMap[$this->symbol];
		
		$this->oy = 0.55*$this->height;
		
		$this->saveDtParams();
		
		$this->paintStat();
		$this->paintValue();
		$this->paintMa();
		$this->paintCandleStick();
		//$this->paintIndicator();
	}

	public function paintCandleStick($limit){
		$voRe=$this->viewStock->voRowPriceArr;
		$vo1=$this->voPrice1;
		
		$this->context->restore();
		$this->context->globalAlpha=1;
		$this->context->lineWidth=1;
		$candCount = 0;
		
		/*$bv=$this->faMap[$this->symbol];
		if($bv==null) $bp="";
		else $bp=round(100*($this->rowPriceArr[0][$vo1->close]-$bv)/$bv);
		*/
		$this->paintText("<div><span style='color:black'>".round( 100*($this->_maxStockDataY-$this->_minStockDataY)/$this->_minStockDataY )."</span></div>", $this->width - 50 , 2+0.0*$this->height+$this->oy);////// 850 485
		
		$this->paintText("<div><span style='color:black'>".$this->rowPriceExArr[0]["profitStr"]."|".round($this->rowPriceExArr[0]["profitAvg"],1)."|".round( $this->rowPriceExArr[0]["profit"],1 )."</span></div>", 0*$this->width + 50 , 2+0.0*$this->height+$this->oy+70);////// 850 485
		
		for($i=0; $i<$this->rowPriceArr->length-1; $i++){
			if($limit!=null && $i>=$limit) break;
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($this->padX == $this->padX1 && $x<0) break;
			if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
			
			//if($i==$this->viewStock->intervalArr[3] || $i==125 || $i==250 || $i==166){//w1:250:12.5th w2:166:8.3th w3:125:6.25th
			if($i==60 || $i==120){//w1:250:12.5th w2:166:8.3th w3:125:6.25th
				$this->context->restore();
				$this->context->beginPath();
				$this->context->strokeStyle='Black';			
				$this->context->globalAlpha=1;
				$this->context->lineWidth=1;
				$this->context->moveTo($x+3, $this->getY($this->minStockDataY));
				$this->context->lineTo($x+3, $this->getY($this->maxStockDataY)+70 );
				$this->context->closePath();
				$this->context->stroke();
			}
			$this->context->globalAlpha=1;

			if($i==-6-1){
				if($this->symbol != "VNINDEX" && $this->symbol != "HAINDEX"){
					$_i=$i;
					$xm1 = $this->getX($_i);
					
					//$this->context->beginPath();
					//$this->context->fillStyle = 'Black';
					//$this->context->arc($xm1+4, $this->getY($stockData[$vo1->low])+30, 6, 0, 2 * Math::PI, false);
					//$this->context->fill();
					
					$this->paintText("<span style='color:black'><b>".$this->viewStock->formatPercentValue( $this->rowPriceExArr[0][$voRe->perValue]).$this->rowPriceExArr[0][$voRe->minClose]."</b></span>",$xm1-4,  $this->getY($stockData[$vo1->low])+50);
				}
			}

			/*
			if( $this->rowPriceExArr[$i+1]!=null && $this->rowPriceExArr[$i+1][$voRe->code]!="up" && $this->rowPriceExArr[$i][$voRe->code]=="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				if($this->rowPriceExArr[$i][$voRe->code]=="up") $this->context->fillStyle = 'blue';
				if($this->rowPriceExArr[$i][$voRe->code]=="pre") $this->context->fillStyle = 'green';
				$this->context->arc($xm1+4, $this->getY($stockData[$vo1->low])+25, 6, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'green';
			}
			if( $this->rowPriceExArr[$i+1]!=null && $this->rowPriceExArr[$i+1][$voRe->code]=="up" && $this->rowPriceExArr[$i][$voRe->code]!="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				$this->context->fillStyle = 'red';
				$this->context->arc($xm1+4, $this->getY($stockData[$vo1->high])-25, 6, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'hotpink';
			}
			*/
			if( $this->rowPriceExArr[$i]["code2"]=="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				$this->context->fillStyle = 'blue';
				$this->context->arc($xm1+4, $this->getY($stockData[$vo1->low])+25, 6, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'green';
			}
			if( $this->rowPriceExArr[$i]["code2"]!=null && $this->rowPriceExArr[$i]["code2"]!="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				if($this->rowPriceExArr[$i]["code2"]=="down") $this->context->fillStyle = 'red';
				else $this->context->fillStyle = 'red';
				$this->context->arc($xm1+4, $this->getY($stockData[$vo1->high])-25, 6, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'hotpink';
			}
			$this->context->lineWidth=3;
			if( $this->rowPriceExArr[$i]["codeB"]=="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				$this->context->fillStyle = 'blue';
				$this->context->strokeStyle = 'blue';
				$this->context->arc($xm1+4, $this->getY($stockData[$vo1->low])+45, 9, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->stroke();
				//$this->context->fillRect($x+2, $this->getY($stockData[$vo1->low])+35, 2, 20 );
			}
			if( $this->rowPriceExArr[$i]["codeB"]!=null && $this->rowPriceExArr[$i]["codeB"]!="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				if($this->rowPriceExArr[$i]["codeB"]=="down") { $this->context->fillStyle = 'red'; $this->context->strokeStyle='red'; }
				else { $this->context->fillStyle = 'red'; $this->context->strokeStyle='red'; }
				$this->context->arc($xm1+4, $this->getY($stockData[$vo1->high])-45, 9, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->stroke();
				//$this->context->fillRect($x+2, $this->getY($stockData[$vo1->high])-35, 2, 20 );
			}
			
			$this->context->globalAlpha=1;
			if($stockData[$vo1->close] >= $stockData[$vo1->open]){
				$this->context->fillStyle = 'blue';
				
				if($this->isIndex==true) {
					$this->context->fillStyle = 'Blue';
					$this->context->globalAlpha=1;
				}
			}
			else{
				$this->context->fillStyle = 'Red';
				
				if($this->isIndex==true) {
					$this->context->fillStyle = 'Red';
					$this->context->globalAlpha=1;
				}
			}
			
			$deltaClose = $this->getY($stockData[$vo1->close]) - $this->getY($stockData[$vo1->open]);
			$deltaHigh = $this->getY($stockData[$vo1->high]) - $this->getY($stockData[$vo1->low]);
			if($deltaClose>=0 && $deltaClose<=2) $deltaClose = 2;
			if($deltaClose<0 && $deltaClose>=-2) $deltaClose = -2;
			if($deltaHigh>=0 && $deltaHigh<=2) $deltaHigh = 2;
			if($deltaHigh<0 && $deltaHigh>=-2) $deltaHigh = -2;
			if($this->w%2==0) {
				//$this->context->fillRect($x- ($this->w)/2, $this->getY($stockData[$vo1->open]), $this->w, $deltaClose );
				//$this->context->fillRect($x-1, $this->getY($stockData[$vo1->low]), 2, $deltaHigh );
				$this->context->fillRect($x, $this->getY($stockData[$vo1->open]), $this->w, $deltaClose );
				$this->context->fillRect($x+2, $this->getY($stockData[$vo1->low]), 2, $deltaHigh );
			} else if($this->w%2==1){
				$this->context->fillRect($x - ($this->w+1)/2, $this->getY($stockData[$vo1->open]), $this->w, $deltaClose );
				//if($this->w==5) $this->context->fillRect($x-1, $this->getY($stockData[$vo1->low]), 1, $deltaHigh ); else 
				$this->context->fillRect($x-1, $this->getY($stockData[$vo1->low]), 1, $deltaHigh );
			}
		}
		$this->context->globalAlpha=1;
	}
	
	public function paintIndicator(){
		$voRe=$this->viewStock->voRowPriceArr;
		$vo1=$this->voPrice1;
		$this->context->restore();
		$this->context->globalAlpha=1;
		$vo = new stock_VoPrice();
		
		$w2=floor($this->w/2)+1;
		/*
		$this->context->globalAlpha=1;
		$this->context->lineWidth=1;
		$this->context->beginPath();
		$this->context->strokeStyle='Black';
		$this->context->moveTo($this->getX(0), $this->getY3(50));
		$this->context->lineTo($this->getX($this->rowPriceArr->length), $this->getY3(50));
		$this->context->stroke();
		
		$this->context->globalAlpha=1;
		$this->context->lineWidth=1;
		$this->context->beginPath();
		$this->context->strokeStyle='Black';
		$this->context->moveTo($this->getX(0), $this->getY3(-50));
		$this->context->lineTo($this->getX($this->rowPriceArr->length), $this->getY3(-50));
		$this->context->stroke();
		*/
		$this->context->globalAlpha=1;
		$this->context->beginPath();
		$this->context->lineWidth=3;
		///////if($this->w>=3) $this->context->lineWidth=2;
		for($i=0; $i<$this->rowPriceArr->length; $i++){
			if($limit!=null && $i>=$limit) break;
			$x = $this->getX($i) - 0*50;
			if($this->padX == $this->padX1 && $x<0) break;
			if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
			$stockData = $this->rowPriceExArr[$i];
			$y = $stockData[$voRe->perMinMax];
			if($y==null) break;
			
			if($y>$this->maxStockDataY3) $y=$this->maxStockDataY3;
			if($y<$this->minStockDataY3) $y=$this->minStockDataY3;
			$delta=$y*$this->scaleY3;
			if($i==0 && abs($delta)<3) $delta=3;
			
			//$y2 = $vo->getLiveVolume();
			if($x<$this->padX) break;
				
			if( $y>=60) $this->context->fillStyle = 'blue';
			else $this->context->fillStyle = 'red';
			
			$this->context->fillRect($x, $this->getY3(-100), $this->w , -$delta);
			
			//if($this->rowPriceExArr[$i+1]==null) break;
			$y = 10*$this->rowPriceExArr[$i][$voRe->minClose];
			if($y>$this->maxStockDataY3) $y=$this->maxStockDataY3;
			if($y<$this->minStockDataY3) $y=$this->minStockDataY3;
			$delta=$y*$this->scaleY3;
			if($i==0 && abs($delta)<3) $delta=3;

			if( $y<=50) $this->context->fillStyle = 'blue';
			else $this->context->fillStyle = 'red';
			$this->context->fillRect($x, $this->getY3(-0), $this->w , -$delta);
			
			/*
			$y = 10*$this->rowPriceExArr[$i]["perMa6"];
			if($y>$this->maxStockDataY3) $y=$this->maxStockDataY3;
			if($y<$this->minStockDataY3) $y=$this->minStockDataY3;
			$y = $this->getY3($y);
			if($i==0){
				$this->context->moveTo($x+$w2, $y);
			} else{
				$this->context->lineTo($x+$w2, $y);
			}*/
		}
		$this->context->stroke();
		
		$this->context->fillStyle = 'red';
		$this->context->lineWidth=3;
		for($i=$this->rowPriceArr->length-1; $i>=0; $i--){
			$stockData = $this->rowPriceArr[$i];
			$vo->row = $stockData;
			$x = $this->getX($i);
			if($x< 0*(911-$this->padX1)) continue;

			/*
			if( $this->rowPriceExArr[$i]["code2"]=="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				$this->context->fillStyle = 'blue';
				$this->context->arc($xm1+4, $this->getY3(-100)+7, 3, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'green';
			}
			if( $this->rowPriceExArr[$i]["code2"]!=null && $this->rowPriceExArr[$i]["code2"]!="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				$this->context->fillStyle = 'red';
				$this->context->arc($xm1+4, $this->getY3(-100)+7, 3, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'hotpink';
			}
			*/
			
			if( $this->rowPriceExArr[$i]["code2"]=="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				$this->context->fillStyle = 'blue';
				$this->context->arc($xm1+4, $this->getY3(-100)+13, 6, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'green';
			}
			if( $this->rowPriceExArr[$i]["code2"]!=null && $this->rowPriceExArr[$i]["code2"]!="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				if($this->rowPriceExArr[$i]["code2"]=="down") $this->context->fillStyle = 'red';
				else $this->context->fillStyle = 'red';
				$this->context->arc($xm1+4, $this->getY3(-100)+13, 6, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'hotpink';
			}
			$this->context->lineWidth=3;
			if( $this->rowPriceExArr[$i]["codeB"]=="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				$this->context->fillStyle = 'blue';
				$this->context->strokeStyle = 'blue';
				$this->context->arc($xm1+4, $this->getY3(-100)+13, 9, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->stroke();
				//$this->context->fillRect($x+2, $this->getY($stockData[$vo1->low])+35, 2, 20 );
			}
			if( $this->rowPriceExArr[$i]["codeB"]!=null && $this->rowPriceExArr[$i]["codeB"]!="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				if($this->rowPriceExArr[$i]["codeB"]=="down") { $this->context->fillStyle = 'red'; $this->context->strokeStyle='red'; }
				else { $this->context->fillStyle = 'red'; $this->context->strokeStyle='red'; }
				$this->context->arc($xm1+4, $this->getY3(-100)+13, 9, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->stroke();
				//$this->context->fillRect($x+2, $this->getY($stockData[$vo1->high])-35, 2, 20 );
			}
			
			
		}
		return;
		
		$this->context->globalAlpha=1;
		$this->context->lineWidth=3;
		$this->context->beginPath();
		$this->context->strokeStyle='Blue';
		$this->context->moveTo($this->getX(0), $this->getY3(2));
		$this->context->lineTo($this->getX($this->rowPriceArr->length), $this->getY3(2));
		$this->context->stroke();
		
		$this->context->beginPath();
		$this->context->strokeStyle='Red';
		$this->context->moveTo($this->getX(0), $this->getY3(-2));
		$this->context->lineTo($this->getX($this->rowPriceArr->length), $this->getY3(-2));
		$this->context->stroke();
		
		/*
		//$this->context->beginPath();
		//$this->context->lineWidth=3;
		//$this->context->strokeStyle='Red';
		$this->context->fillStyle = 'red';
		for($i=0; $i<$this->rowPriceArr->length-1; $i++){break;
			$stockData = $this->rowPriceArr[$i];
			$vo->row = $stockData;
			$x = $this->getX($i);
			if($x< 0*(911-$this->padX1)) break;

			$y=$this->rowPriceExArr[$i][$voRe->perHigh];
			if($y==null) break;
			if($y>$this->maxStockDataY3) $y=$this->maxStockDataY3;
			if($y<$this->minStockDataY3) $y=$this->minStockDataY3;
			//$y = $this->getY3(-$y);
			//if($i==0){
			//	$this->context->moveTo($x+$w2, $y);
			//} else{
			//	$this->context->lineTo($x+$w2, $y);
			//}
			
			$delta=-$y*$this->scaleY3;
			if(abs($delta)<1) $delta=1;
			$this->context->fillRect($x, $this->getY3(0), $this->w , -$delta);
		}
		//$this->context->stroke();*/
		
		/*
		$this->context->beginPath();
		$this->context->lineWidth=3;
		$this->context->strokeStyle='Blue';
		for($i=0; $i<$this->rowPriceArr->length-1; $i++){break;
			$stockData = $this->rowPriceArr[$i];
			$vo->row = $stockData;
			$x = $this->getX($i);
			if($x< 0*(911-$this->padX1)) break;

			$y=$this->rowPriceExArr[$i][$voRe->minClose];
			if($y==null) break;
			if($y>$this->maxStockDataY3) $y=$this->maxStockDataY3;
			if($y<$this->minStockDataY3) $y=$this->minStockDataY3;
			$y = $this->getY3($y);
			if($i==0){
				$this->context->moveTo($x+$w2, $y);
			} else{
				$this->context->lineTo($x+$w2, $y);
			}
		}
		$this->context->stroke();*/
		
		for($k=6; $k>=1; $k--){
		//for($k=1; $k<=6; $k++){
			if($limit!= null && $k!=1 && $k!=2 && $k!=3 && $k!=4 && $k!=5 && $k!=6) continue;
			if($k==1){
				//continue;
				$this->context->strokeStyle='blue';
				$this->context->strokeStyle='Black';
			}
			else if($k==2){
				//continue;
				$this->context->strokeStyle='blue';
				$this->context->strokeStyle='Black';
			}
			else if($k==3){
				//continue;
				$this->context->strokeStyle='Red';
				$this->context->strokeStyle='Black';
			}
			else if($k==4){
				//continue;
				$this->context->strokeStyle='Red';
				$this->context->strokeStyle='Black';
			}
			else if($k==5){
				//continue;
				$this->context->strokeStyle='Black';
			}
			else if($k==6){
				//continue;
				$this->context->strokeStyle='black';
				
			}
			
			$this->context->globalAlpha=1;
			$this->context->beginPath();
			$this->context->lineWidth=3;
			///////if($this->w>=3) $this->context->lineWidth=2;
			for($i=0; $i<$this->rowPriceArr->length; $i++){
				if($limit!=null && $i>=$limit) break;
				$x = $this->getX($i) - 0*50;
				if($this->padX == $this->padX1 && $x<0) break;
				if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
				$stockData = $this->rowPriceExArr[$i];
				if($k==1) $y = $stockData["perMa1"];
				else if($k==2) $y = $stockData["perMa2"];
				else if($k==3) $y = $stockData["perMa3"];
				else if($k==4) {
					$y = $stockData["perMa4"];
				}
				else if($k==5) $y = $stockData["perMa5"];
				else if($k==6) $y = $stockData["perMa6"];
				if($y==null) break;
				
				if($y>$this->maxStockDataY3) $y=$this->maxStockDataY3;
				if($y<$this->minStockDataY3) $y=$this->minStockDataY3;
				$delta=$y*$this->scaleY3;
				if(abs($delta)<1) $delta=1;
				
				//$y2 = $vo->getLiveVolume();
				if($x<$this->padX) break;
					
				if($k==1 || $k==2 || $k==3){
					if( $y>=0) $this->context->fillStyle = 'blue';
					else $this->context->fillStyle = 'red';
					
					$this->context->fillRect($x, $this->getY3(0), $this->w , -$delta);
				} else {
					/*if( $y>=0) $this->context->fillStyle = 'green';
					else $this->context->fillStyle = 'brown';
					$this->context->fillStyle = 'green';
					$y=$this->getY3(0);
					$this->context->fillRect($x-1, $y, $this->w+1 , -$delta);
					*/
					$y = $this->getY3($y);
					if($i==0){
						$this->context->moveTo($x+$w2, $y);
					} else{
						$this->context->lineTo($x+$w2, $y);
					}
				}
			}
			$this->context->stroke();
		}
		$this->context->fillStyle = 'red';
		for($i=0; $i<$this->rowPriceArr->length-1; $i++){
			$stockData = $this->rowPriceArr[$i];
			$vo->row = $stockData;
			$x = $this->getX($i);
			if($x< 0*(911-$this->padX1)) break;

			if( $this->rowPriceExArr[$i+1]!=null && $this->rowPriceExArr[$i+1][$voRe->code]!="up" && $this->rowPriceExArr[$i][$voRe->code]=="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				if($this->rowPriceExArr[$i][$voRe->code]=="up") $this->context->fillStyle = 'blue';
				if($this->rowPriceExArr[$i][$voRe->code]=="pre") $this->context->fillStyle = 'green';
				$this->context->arc($xm1+4, $this->getY3(0)+20, 6, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'green';
			}
			if( $this->rowPriceExArr[$i+1]!=null && $this->rowPriceExArr[$i+1][$voRe->code]=="up" && $this->rowPriceExArr[$i][$voRe->code]!="up" ){
				$xm1 = $this->getX($i);
				$this->context->beginPath();
				$this->context->fillStyle = 'red';
				$this->context->arc($xm1+4, $this->getY3(0)-20, 6, 0, 2 * Math::PI, false);
				$this->context->closePath();
				$this->context->fill();
				//$this->context->fillStyle = 'hotpink';
			}
		}
		return;
		
		$this->context->globalAlpha=1;
	}
	
	
	
	public $color = array(
	);
	public function paintClose(){
		$vo1=$this->voPrice1;
		/*
		$stockData = $this->rowPriceArr[0];
		$x1 = $this->getX(-1);
		$x2 = $this->getX(720);
		$this->context->restore();
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		$y = $this->getY($stockData->close);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		$this->context->stroke();
		
		
		return;
		*/
		$this->context->restore();
		$this->context->beginPath();
		$this->context->strokeStyle = 'Red';
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		$this->context->globalAlpha=1;
		//$this->context->strokeStyle = 'red';
		if($this->isIndex==true) {
			$this->context->strokeStyle = 'Black';
			$this->context->globalAlpha=1;
		}
		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i) - 0*50;
			if($x<0) break;
			$value = $this->rowPriceArr[$i][$vo1->close];
			if($value==null || $value == 0) continue;
			$y = $this->getY($value);
			if($i==0){
				$this->context->moveTo($x, $y);
			} else{
				$this->context->lineTo($x, $y);
			}
		}
		$this->context->stroke();
		$this->context->globalAlpha=1;
		
		
	}
	public function paintStat(){
		$vo1=$this->voPrice1;
		
		$symbol=$this->symbol;
		$status = "";
		if($this->viewStock->hrefMap[$symbol]!=null) {
			$text = $this->viewStock->hrefMap[$symbol];
			$arr = explode("/",$text);
			$status = $arr[count($arr)-1];
			$status = str_replace(".chn","",$status);
			$status = str_replace("-"," ",$status);
		}
		$this->paintText("<div style='width:580px;color:black;border:0px solid'><b>".$status."</b></div>", 30 , 2+$this->oy+0.0*$this->height);////// 850 485
		return;
	}
	public function setOnePrice(){
		$jSymbol=$this->viewDetail->divStock->find("[_tag2='symbolLeft'],[_tag2='symbolRight'],[_tag2='symbolLeft0'],[_tag2='symbolRight0']");
		//@ $jSymbol->each(function( $i, $obj ) {
			$jque = que($obj);

			if($jque->attr("_value") == $this->symbol){
				$tr=$jque->closest("tr");
				
				$this->divOnePrice->html("");
				$this->divOnePrice->html("<table>".$tr->html()."</table>");
				return;
			}
		//@ });
	}
	
	public $alpha = 70;
	
	public function paintValue(){
		$vo1=$this->voPrice1;
		$this->context->restore();
		$this->context->globalAlpha=1;
		$vo = new stock_VoPrice();
		$thisw = $this->w;
		//$this->w = 3;
		if(1==1 || $this->w==5) for($i=0; $i<$this->rowPriceArr->length; $i++){
			$stockData = $this->rowPriceArr[$i];
			$vo->row = $stockData;
			$x = $this->getX($i);
			if($x< 0*(911-$this->padX1)) break;

			//$y2 = $vo->getLiveVolume();
			$y2=$stockData[$vo1->volume]*$stockData[$vo1->close];
			if($y2>=$this->maxStockDataY2/7) $y2=round($this->maxStockDataY2/7);
			if($y2==null) continue;
			if($x<$this->padX) break;
			if( $stockData[$vo1->close] >= $stockData[$vo1->open]) $this->context->fillStyle = 'blue';
			else $this->context->fillStyle = 'red';
			if($this->w==2)$this->context->fillRect($x, $this->getY2(0), $this->w , -$y2*$this->scaleY2);
			else $this->context->fillRect($x, $this->getY2(0), $this->w , -$y2*$this->scaleY2);

			if($i==0){
				//$buyValue = $stockData->buyPrice3*$stockData->buyVolume3 + $stockData->buyPrice2*$stockData->buyVolume2 + $stockData->buyPrice1*$stockData->buyVolume1;
				//$sellValue = $stockData->sellPrice3*$stockData->sellVolume3 + $stockData->sellPrice2*$stockData->sellVolume2 + $stockData->sellPrice1*$stockData->sellVolume1;
				//$buyValue = 0;
				//$this->context->fillStyle = 'DodgerBlue';
				//$this->context->fillRect($x- ($this->w+1)/2, $this->getY2($y2), $this->w , -$buyValue*$this->scaleY2);
			}
		}

		$this->context->globalAlpha=1;
		$this->w = $thisw;
		return;
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i);
			if($x<$this->padX) break;
			$value = $this->rowPriceArr[$i][$vo1->maVolume];
			if($value==null) continue;
			$y = $this->getY2($value);
			if($i==0){
				$this->context->moveTo($x, $y);
			} else{
				$this->context->lineTo($x, $y);
			}
		}
		$this->context->stroke();
		
	}
	
	public function paintMa($limit){
		$voRe=$this->voRowPriceArr;
		$vo1=$this->voPrice1;
		$this->context->restore();
		$vo = new stock_VoPrice();
		
		for($k=6; $k>=1; $k--){
			if($limit!= null && $k!=1 && $k!=2 && $k!=3 && $k!=4 && $k!=5 && $k!=6) continue;
			if($k==1){
				//continue;
				$this->context->strokeStyle='Black';
			}
			else if($k==2){
				//continue;
				$this->context->strokeStyle='black';
			}
			else if($k==3){
				//continue;s
				$this->context->strokeStyle='Blue';
			}
			else if($k==4){
				//continue;
				$this->context->strokeStyle='Blue';
			}
			else if($k==5){
				//continue;
				$this->context->strokeStyle='Red';
			}
			else if($k==6){
				//continue;
				$this->context->strokeStyle='Red';
			}
						
			if($k==-4){
				
				for($j=2; $j<=3; $j++){
					$this->context->beginPath();
					$this->context->lineWidth=1;
					$this->context->globalAlpha=1;
					for($i=0; $i<$this->rowPriceArr->length; $i++){
						if($limit!=null && $i>=$limit) break;
						$x = $this->getX($i) - 0*50;
						if($this->padX == $this->padX1 && $x<0) break;
						if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
						$stockData = $this->rowPriceExArr[$i];
						$y = $stockData[$voRe->maC4] - $j*$stockData[$voRe->dev];
						if($y==null) break;
						$y = $this->getY($y);
						if($i==0){
							$this->context->moveTo($x, $y);
						} else{
							$this->context->lineTo($x, $y);
						}
					}
					$this->context->stroke();
				}
				
				for($j=2; $j<=3; $j++){
					$this->context->beginPath();
					$this->context->lineWidth=1;
					$this->context->globalAlpha=1;
					for($i=0; $i<$this->rowPriceArr->length; $i++){
						if($limit!=null && $i>=$limit) break;
						$x = $this->getX($i) - 0*50;
						if($this->padX == $this->padX1 && $x<0) break;
						if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
						$stockData = $this->rowPriceExArr[$i];
						$y = $stockData[$voRe->maC4] + $j*$stockData[$voRe->dev];
						if($y==null) break;
						$y = $this->getY($y);
						if($i==0){
							$this->context->moveTo($x, $y);
						} else{
							$this->context->lineTo($x, $y);
						}
					}
					$this->context->stroke();
				}
			}
			
			$this->context->globalAlpha=1;
			$this->context->beginPath();
			$this->context->lineWidth=3;
			///////if($this->w>=3) $this->context->lineWidth=2;
			
			$w2=floor($this->w/2)+1;
			for($i=0; $i<$this->rowPriceArr->length; $i++){
				if($limit!=null && $i>=$limit) break;
				$x = $this->getX($i) +$w2;
				if($this->padX == $this->padX1 && $x<0) break;
				if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
				$stockData = $this->rowPriceExArr[$i];
				if($k==1) $y = $stockData["ma1"];
				else if($k==2) $y = $stockData["ma2"];
				else if($k==3) $y = $stockData["ma3"];
				else if($k==4) {
					$y = $stockData["ma4"];
				}
				else if($k==5) $y = $stockData["ma5"];
				else if($k==6) $y = $stockData["ma6"];
				if($y==null) continue;
				$y = $this->getY($y);
				if($i==0){
					$this->context->moveTo($x, $y);
				} else{
					$this->context->lineTo($x, $y);
				}
			}
			$this->context->stroke();

		}
		$this->context->globalAlpha=1;
	}
	
	public function paintOxy(){
		$this->context->restore();
		$this->context->beginPath();
		$this->context->strokeStyle = 'black';
		$this->context->globalAlpha = 1;
		$this->context->lineWidth = 1;
		//Draw Oy
		$ox = 0;
		$ox2 = $this->width - $this->ox;
		$this->context->moveTo($ox, $this->getY($this->minStockDataY) + $this->padY);
		$this->context->lineTo($ox, $this->getY($this->maxStockDataY));
		$this->context->moveTo($ox2, $this->getY($this->minStockDataY) + $this->padY);
		$this->context->lineTo($ox2, $this->getY($this->maxStockDataY));

		$one = ($this->maxStockDataY - $this->minStockDataY)/($this->stickY-1);
		for($value=$this->minStockDataY; $value<=$this->maxStockDataY; $value = $value+$one){
			$y = $this->getY($value);
			if($y-8<=0 || $y>=$this->getY($this->minStockDataY)) continue;
			/*$this->context.moveTo(ox, y);
			 $this->context.lineTo(ox-8, y);
			 $this->paintText(Math.jsmlRound(value,0), ox - $this->ox, y - 8);
			 */
			$this->context->moveTo($ox2, $y);
			$this->context->lineTo($ox2+4, $y);
			//\\$this->paintText(round($value,1), $ox2 + $this->ox - 34, $y - 8);
		}

		//draw Ox
		$y = $this->getY($this->minStockDataY);// + $this->padY;
		$this->context->moveTo($ox, $y);
		$this->context->lineTo($ox2, $y);

		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i);
			if($x<$this->padX) break;
			if($i%$this->ma3==0){
				$this->context->moveTo($x, $y);
				$this->context->lineTo($x, $y + 8 );
				$stockDate = $this->rowPriceArr[$i]->stockDate;
				if($this->w==1){
					$stockDate = substr($stockDate, 0, 7);
				}
				//if($x - 40>=0) $this->paintText($stockDate, $x - 40, $y + 8);
			}
			/*if(i==$this->ma2 || i==$this->ma1){
				$this->context.moveTo(x, y);
				$this->context.lineTo(x, $this->getY($this->maxStockDataY) );
				}*/
		}

		$this->context->closePath();
		$this->context->stroke();


		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i);
			if($x<$this->padX) break;
			//if(($i==-1) ){// || ((substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate2 || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate3 || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate4) )){
			if($i==20 || $i==40 || $i==20 || $i==40){
				if($i==120) $this->context->strokeStyle='Green';
				if($i==20) $this->context->strokeStyle='Purple';
				if($i==40) $this->context->strokeStyle='Teal';
				if($i==60) $this->context->strokeStyle='Sienna';
				//if(substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate ) $this->context->strokeStyle='Purple';
				//if(substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate2 ) $this->context->strokeStyle='Sienna';
				//if(substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate3 ) $this->context->strokeStyle='Teal';
				//if(substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate4 ) $this->context->strokeStyle='Green';
				//if($i==10) 
				//if($this->w==1) continue;
				$this->context->restore();
				$this->context->beginPath();
				$this->context->strokeStyle='Red';				
				$this->context->globalAlpha=1;
				$this->context->lineWidth=1;
				$this->context->moveTo($x, $y);
				$this->context->lineTo($x, $this->getY($this->maxStockDataY) );
				$this->context->closePath();
				$this->context->stroke();
			}
		}
		return;
	}
	
	public function makeMa($limit){
		$vo1 = $this->voPrice1;
		$length = count($this->rowPriceArr);

		for($i=0; $i<$length; $i++){
			if($limit != null && $i >= $limit) break;
			if($this->rowPriceExArr[$i]["ma1"] != null
			&& $this->rowPriceExArr[$i]["ma2"] != null
			&& $this->rowPriceExArr[$i]["ma3"] != null
			&& $this->rowPriceExArr[$i]["ma4"] != null
			&& $this->rowPriceExArr[$i]["ma5"] != null
			&& $this->rowPriceExArr[$i]["ma6"] != null
			) continue;
			$value = 0;
			for($j=0; $j<=$this->ma6-1; $j++){
				if($i+$j >= $length) break;
				$stockData = $this->rowPriceArr[$i+$j];
				$value += $stockData[$vo1->close];
				if($j==$this->ma1-1) {
					$this->rowPriceExArr[$i]["ma1"] = $value/$this->ma1;
				} else if($j==$this->ma2-1) {
					$this->rowPriceExArr[$i]["ma2"] = $value/$this->ma2;
				} else if($j==$this->ma3-1) {
					$this->rowPriceExArr[$i]["ma3"] = $value/$this->ma3;
				} else if($j==$this->ma4-1) {
					$this->rowPriceExArr[$i]["ma4"] = $value/$this->ma4;
				} else if($j==$this->ma5-1) {
					$this->rowPriceExArr[$i]["ma5"] = $value/$this->ma5;
				} else if($j==$this->ma6-1) {
					$this->rowPriceExArr[$i]["ma6"] = $value/$this->ma6;
				} 
			}
		}
		
		for($i=0; $i<$length; $i++){
			if($limit != null && $i >= $limit) break;
			for($k=1;$k<=6;$k++){
				if($k==1) $ma=$this->ma1;
				if($k==2) $ma=$this->ma2;
				if($k==3) $ma=$this->ma3;
				if($k==4) $ma=$this->ma4;
				if($k==5) $ma=$this->ma5;
				if($k==6) $ma=$this->ma6;
				$maStr="ma".$k;
				if($this->rowPriceExArr[$i][$maStr]==null) continue;
				
				$value = 0;
				for($j=0; $j<=$ma-1; $j++){
					if($i+$j >= $length) break;
					$stockData = $this->rowPriceExArr[$i+$j];
					$value += pow($stockData[$vo1->close]-$this->rowPriceExArr[$i][$maStr] ,2);
					if($j==$ma-1) {
						$this->rowPriceExArr[$i][$maStr."E"] = 1*pow($value/$ma ,1/2);
					} 
				}
			}
		}
	}
	
	public function makePrice($limit){
		$vo = new stock_LivePriceVo();
		$length = count($this->rowPriceArr);
		for($i=0; $i<$length - 1; $i++){
			if($limit != null && $i >= $limit) break;
			if($this->rowPriceArr[$i+1]["close"]!=0) $this->rowPriceArr[$i]["closePercent"] = 100*($this->rowPriceArr[$i]["close"] - $this->rowPriceArr[$i+1]["close"])/$this->rowPriceArr[$i+1]["close"];
		}
	}

}
