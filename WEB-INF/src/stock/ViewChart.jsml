<?php
import("stock_VoPrice");
import("stock_ViewStock");
import("stock_ViewDetail");
class stock_ViewChart{
	public function con(){
		$this->ao=stock_Ao::get();
		$this->viewStock=$this->ao->bean("stock_ViewStock/con");
		$this->viewDetail=$this->ao->bean("stock_ViewDetail/con");
		$this->voPrice1=$this->ao->bean("stock_VoPrice/con1");
		$this->w = 1;//$this->ao->conf["w"];
		$this->padX = 0;
		$this->ox=0;
		$this->height2=100;
		$this->oy=0*100;
		$this->padY = 0;
		$this->minMaxPadFactor = 2.5;
		$this->minMaxPadFactorWeb = $this->minMaxPadFactor;
	
		$this->width = 939;//;+840  1779
		$this->height = 720;////410;/////440;//540+0*100;
		
		$this->rowPriceArrMap=array(
		);
		$this->voRowPriceArr=get(new stock_Vo())->_con("maC1,maC2,maC3,maC4,dev,minMax1","");		
		return $this;
	}

	public $jque;
	public function view(){
		if($this->jque!=null) return $this->jque;
		//1260px
?><!--$html-->
<div>
	<div id="divCanvasText" style='position:relative'>
	</div>
	<div id="divOnePrice" style='position:absolute;left:280px;top:2px'></div>
	<canvas id="canvas"></canvas>
</div>
<!--/$html--><?
		$this->jque=que($html);
		
		$this->divCanvasText=$this->jque->find("#divCanvasText");
		$this->divOnePrice=$this->jque->find("#divOnePrice");
		$this->canvas=$this->jque->find("#canvas");
		
		//$this->jque = que("<div></div>");
		//$this->divCanvasText = que("<div style='position:relative'></div>")->appendTo($this->jque);
		//$this->canvas = que("<canvas></canvas>")->appendTo($this->jque)->css(array(
		$this->canvas->css(array(
			"background-color" => "white",
			"height" => $this->height,
			"width" => $this->width, "border"=>"solid 0px"));
		$this->canvas->attr(array("width"=>$this->width, "height"=>$this->height));

		$canvas = $this->canvas->get(0);
		/*<@ if (typeof G_vmlCanvasManager != 'undefined') G_vmlCanvasManager->initElement($canvas); @>*/
		$this->context = $canvas->getContext('2d');
		
		
		return $this;
	}
	
	public static $startDate2  = "2011-08-16";
	
	public static $startDate = "2011-09-13";
	
	public static $startDate3 = "2011-07-29";
	
	public static $startDate4 = "2011-06-14";

	public $w=5;
	public $padX = 0;
	public $valueShift = 0;
	public $ox=0;
	public $oy=40;
	public $minMaxPadFactor = 1.93;

	public $stickY = 11;

	public $padY = 0;
	public $ma1 = 10;
	public $ma2 = 20;
	public $ma3 = 30;
	public $ma4 = 40;
	public $ma5 = 50;
	public $ma6 = 60;

	public $minStockDataX;
	public $maxStockDataX;
	public $rangeX;
	public $scaleX;

	public $minStockDataY = 30;
	public $maxStockDataY = 80;
	public $rangeY;
	public $scaleY;

	public $minStockDataY2 = 0;
	public $maxStockDataY2 = 3000000000;
	public $rangeY2;
	public $scaleY2;

	public $minStockDataY3 = -7;
	public $maxStockDataY3 = 7;
	public $rangeY3;
	public $scaleY3;
	
	public $minStockDataY4 = -10;
	public $maxStockDataY4 = 10;
	public $rangeY4;
	public $scaleY4;

	public $rowPriceArr = array();
	public $candIMap = array(
	);
	public $canvas;
	public $context;
	public $divCanvasText;
	
	public $width;
	public $height;
	
	public function makeRowPriceArr($vo, $rowPriceArr ,$limit=null){
		//$vo=$this->voPrice;
		$re=array();
		$voRe=$this->voRowPriceArr;
		$len=count($rowPriceArr);
		for($i=0 ; $i < $len ;$i++){
			$re[$i]=array();
		}

		if($limit==null) $len2=$len;
		else $len2=$limit;
		
		
		if($this->ao->conf["combineDay"]==1){
			$ma01=5;
			$ma02=8;
			$ma0=13;
			$ma1=21;
			$ma2=34;
			$ma3=55;
			/*
			$ma01=5;
			$ma02=9;
			$ma0=13;
			$ma1=17;
			$ma2=21;
			$ma3=25;*/
		} else if($this->ao->conf["combineDay"]==2 || $this->ao->conf["combineDay"]==8){ ///5 8 13 21 34 55 89
			$ma01=5;
			$ma02=8;
			$ma0=13;
			$ma1=21;
			$ma2=34;
			$ma3=55;
			
			//$ma0=4;
			//$ma1=11;
			//$ma2=17;//23
			//$ma3=55;
		} else {
			$ma01=5;
			$ma02=8;
			$ma0=13;
			$ma1=21;
			$ma2=34;
			$ma3=55;
		}
		
		for($i=$len-1 ; $i >=0 ;$i--){
			//if($i >= $len - $ma3) continue;
			if($this->ao->isNull0($rowPriceArr[$i][$vo->close])) continue;
			
			$min1=999999;$max1=-999999;
			$maC=0;
			for($j=0 ; $j < $ma3 ; $j++){
				$x=$i+$j;
				if($this->ao->isNull0($rowPriceArr[$x][$vo->close])) break;
				if($rowPriceArr[$x+1]==null || $this->ao->isNull0($rowPriceArr[$x+1][$vo->close])) break;
				
				if($i==0 && $j>=1 && $j<=4){
					if($rowPriceArr[$x][$vo->close]<$min1){
						$min1=$rowPriceArr[$x][$vo->close];
					}
					if($rowPriceArr[$x][$vo->close]>$max1){
						$max1=$rowPriceArr[$x][$vo->close];
					}
					if($j==4){
						if($min1!=0) $re[$i][$voRe->minMax1]=round(100*($max1-$min1)/$min1);
					}
				}

				$maC+=$rowPriceArr[$x+1][$vo->close];
				//$maC+=($rowPriceArr[$x+1][$vo->low]+$rowPriceArr[$x+1][$vo->high])/2;
				if($j==$ma0-1 || $j==$ma1-1 || $j==$ma2-1 || $j==$ma3-1  || $j==$ma01-1 || $j==$ma02-1){
					if($j==$ma0-1) $re[$i][$voRe->maC1]=$maC/($j+1);
					if($j==$ma1-1) $re[$i][$voRe->maC2]=$maC/($j+1);
					if($j==$ma2-1) $re[$i][$voRe->maC3]=$maC/($j+1);
					if($j==$ma01-1) $re[$i]["ma01"]=$maC/($j+1);
					if($j==$ma02-1) $re[$i]["ma02"]=$maC/($j+1);
					if($j==$ma3-1) {
						$re[$i][$voRe->maC4]=$maC/($j+1);
						$dev=0;
						for($k=0 ; $k < $ma3 ; $k++){
							$y=$i+$k;
							$close=$rowPriceArr[$y+1][$vo->close];
							$dev+=pow($close-$re[$i][$voRe->maC4],2);
							if($k==$ma3-1) {
								$dev=round(sqrt($dev/($k+1)),2);
								$re[$i][$voRe->dev]=$dev;
							}
						}
					}
				}

			}
		}
		return $re;
	}
	
	public function changeRowPriceArr($rowPriceArr){
		$combineDay=$this->ao->conf["combineDay"];
		if($this->ao->conf["combineDay"]==8) $combineDay=2;
		$vo=$this->voPrice1;
		
		$rowPriceArrEx=array();
		$j=0;
		
		$len=count($rowPriceArr);
		for($i=0;$i<$len;$i++){
			$first=false;
			if($this->ao->conf["combineDay"]==8){
				$newI=$i+1;
				if($i==0) $first=true;
			} else $newI=$i;
			$mod=$newI%$combineDay;
			
			if($first || $mod==0){
				if($first) $j=0;
				else $j=$newI/$combineDay;
				$rowPriceArrEx[$j]=array();
				$rowPriceArrEx[$j][$vo->open] = $rowPriceArr[$i][$vo->open];
				$rowPriceArrEx[$j][$vo->high] = $rowPriceArr[$i][$vo->high];
				$rowPriceArrEx[$j][$vo->low] = $rowPriceArr[$i][$vo->low];
				$rowPriceArrEx[$j][$vo->close] = $rowPriceArr[$i][$vo->close];
				$rowPriceArrEx[$j][$vo->volume] = $rowPriceArr[$i][$vo->volume];
			} else {
				if($rowPriceArrEx[$j][$vo->high] < $rowPriceArr[$i][$vo->high]) $rowPriceArrEx[$j][$vo->high]=$rowPriceArr[$i][$vo->high];
				if($rowPriceArrEx[$j][$vo->low] > $rowPriceArr[$i][$vo->low]) $rowPriceArrEx[$j][$vo->low]=$rowPriceArr[$i][$vo->low];
				$rowPriceArrEx[$j][$vo->open] = $rowPriceArr[$i][$vo->open];
				//$rowPriceArrEx[$j][$vo->close] = $rowPriceArr[$i][$vo->close];
				$rowPriceArrEx[$j][$vo->volume] += $rowPriceArr[$i][$vo->volume];
			}
		}

		return $rowPriceArrEx;
	}
	
	public function conPaint(){
		$this->symbol = $this->viewDetail->symbol;
		/*
		$faArr=explode(",",$this->ao->conf["FA"]);
		$this->faMap=array(
		);
		foreach($faArr as $i=>$str){
			$arr=explode(" ",$str);
			$symbol=$arr[0];
			$bv=$arr[1];
			$this->faMap[$symbol]=$bv;
		}
		*/
		$this->rowPriceArrMap=array(
		);
		//$this->rowPriceArrMap[$this->symbol]=$this->viewDetail->rowPriceArr;
		//$this->rowPriceExArr=$this->viewStock->makeRowPriceArr2($this->voPrice1,$this->viewDetail->rowPriceArr,count($this->viewDetail->rowPriceArr));
		$this->rowPriceArrMap[$this->symbol] = $this->changeRowPriceArr($this->viewDetail->rowPriceArrMap[$this->symbol]);
		$this->rowPriceExArr=$this->makeRowPriceArr($this->voPrice1,$this->rowPriceArrMap[$this->symbol],1);
		
		return $this;
	}
	public function viewPaint(){
		$this->context->clearRect(0, 0, $this->width, $this->height);
		$this->divCanvasText->html("");
		$this->paint();
	}
	
	public function paintField(){
		$voStock=$this->viewStock->voStock;
		$vo2=$this->viewStock->voPrice2;
		$reText = true;
		
		$thisw=$this->w;
		$this->w = 5;
		$this->padX = 0;
			
		$this->minStockDataY = -5;
		$this->maxStockDataY = 105;
		$this->saveScale();
		
		$stockMap=$this->viewStock->stockMap;
		$vn30Arr=explode(",",$this->ao->conf["vn30"]);
		$vn30Map=array(
		);
		foreach($vn30Arr as $i=>$vn30){
			$vn30=trim($vn30,"'");
			$vn30Map[$vn30]=1;
		}
		for($k=0 ; $k< 3; $k++){
			$map = array(
			);
			$arr = array(0,0,0,0,0,0,0);
			foreach($stockMap as $symbol=>$stock){
				if($this->viewStock->isMarket($symbol)) continue;
				
				$row = $stock[$voStock->live];
				if($row==null) continue;
				
				if($k==1 && $stock[$voStock->value2] < 5000000) continue;
				/////if($k==2 && $stock[$voStock->value2] >= 3000000) continue;
				if($k==2 && $vn30Map[$symbol]==null) continue;
				
				if( $this->ao->isNull0($row[$vo2->ref]) || $this->ao->isNull0($row[$vo2->close])) continue;
				
				$per = round(100*($row[$vo2->close] - $row[$vo2->ref]) / $row[$vo2->ref],1);
				
				if( 99 > $per && $per >= 5 ) $arr[6] += 1;
				else if( 5 > $per && $per >= 3 ) $arr[5] += 1;
				else if( 3 > $per && $per > 0 ) $arr[4] += 1;
				
				else if( 0 >= $per && $per >= 0 ) $arr[3] += 1;
				
				else if( 0 > $per && $per > -3 ) $arr[2] += 1;
				else if( -3 >= $per && $per > -5 ) $arr[1] += 1;
				else if( -5 >= $per && $per >= -99 ) $arr[0] += 1;
			}
		
			
			$sum =  0;
			foreach($arr as $i=>$count){
				$sum += $count;
			}

			$str = "";
			if($k==0) $str = "a";
			if($k==1) $str = "g";
			if($k==2) $str = "l";
			
			$text = $str;//."<br/>".$sum;
			$text2= $sum."<br/>".$str;
			
			$dis = -$this->w-1;
			//if($k >= 3) $dis = -13;
			
			$x = $this->getX(0 + $k*1) + $dis;
			if($reText) {
				//$this->paintText($text, $x, $this->getY(0));
			}
			
			$acc = 0;
			$y0= $this->getY($acc);
			for($i = 6; $i>=0; $i--){
				$arr[$i] = round( 100*$arr[$i]/$sum,2 );
				$this->context->fillStyle = "blue";
				if($i==3) $this->context->fillStyle = "white";
				if($i==2 || $i==4) $this->context->fillStyle = "green";
				if($i==0 || $i==6) $this->context->fillStyle = "hotpink";
				
				$x = $this->getX(0 + $k*1.0) + $dis;//1.5
				
				$acc += $arr[$i];
				
				$y1 = $this->getY( $acc );
				$h = $y1 - $y0;
				if($i==3 && abs($h)<=5) $h=5;
				$this->context->fillRect($x, $y0, $this->w+1, $h);
				$y0 = $y1;
			}
			
			$this->context->restore();
			$this->context->beginPath();
			$this->context->strokeStyle = 'Black';
			$this->context->lineWidth=1;
			
			$x1 = $this->getX(-1 + $k*1.0) + $dis + 0;
			$x2 = $this->getX(0 + $k*1.0) + $dis - 0;
		
			$y = $this->getY(50);
			$this->context->moveTo($x1, $y);
			$this->context->lineTo($x2, $y);
			$this->context->stroke();
		}
		$this->w=$thisw;
	}

	public function getX($i){
		return ($this->width - $this->ox - $this->padX) - ($this->w+1)*$i;
	}
	public function getI($x){
		return round( (($this->width - $this->ox - $this->padX) - $x)/($this->w+1) );
	}
	public function saveScale(){
		//$this->rangeX = $this->maxStockDataX - $this->minStockDataX;
		//$this->scaleX = ($this->width - $this->ox - $this->padX) / $this->rangeX;

		$this->rangeY = $this->maxStockDataY - $this->minStockDataY;
		$this->scaleY = ($this->height - $this->oy - $this->padY) / $this->rangeY;

		$this->rangeY2 = $this->maxStockDataY2 - $this->minStockDataY2;
		$this->scaleY2 = ($this->height - $this->oy) / $this->rangeY2;

		$this->rangeY3 = $this->maxStockDataY3 - $this->minStockDataY3;
		$this->scaleY3 = ($this->height2) / $this->rangeY3;
		
		$this->rangeY4 = $this->maxStockDataY4 - $this->minStockDataY4;
		$this->scaleY4 = ($this->height2) / $this->rangeY4;
	}
	public function getY($y){
		return ($this->height - $this->oy - $this->padY) - ($y- $this->minStockDataY) * $this->scaleY;
	}
	public function getY2($y){
		return ($this->height - $this->oy - $this->padY) - ($y- $this->minStockDataY2) * $this->scaleY2;
	}
	public function getY3($y){
		//return ($this->height - $this->oy - $this->padY) - ($y- $this->minStockDataY3) * $this->scaleY3;
		return ($this->height2 - $this->padY) - ($y- $this->minStockDataY3) * $this->scaleY3;
	}
	public function getY4($y){
		//return ($this->height - $this->oy - $this->padY) - ($y- $this->minStockDataY3) * $this->scaleY3;
		return ($this->height2 - $this->padY) - ($y- $this->minStockDataY4) * $this->scaleY4;
	}

	public function saveDtParams(){
		$vo1 = $this->voPrice1;
		$minStockDataY = 9999999;
		$iMin=0;
		//$DAY_BREAK = 3*12*20;
		$length = count($this->rowPriceArr);
		for($i=0; $i<$length; $i++){
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($x<0) break;
			//if($this->w == 3 && $x<911-$this->padX1) break;
			
			if($stockData[$vo1->low] <= 0 || $stockData[$vo1->low]==null) continue;
			if($stockData[$vo1->low] < $minStockDataY){
				$minStockDataY = $stockData[$vo1->low];
				$iMin = $i;
			}
			//if($i>=$DAY_BREAK) break;
		}
		$this->_minStockDataY=$minStockDataY;
			
		$maxStockDataY = 0;
		$length = count($this->rowPriceArr);
		for($i=0; $i<$length; $i++){
			//if($i > $iMin) break;
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($x<0) break;
			//if($this->w == 3 && $x<911-$this->padX1) break;
			
			if($stockData[$vo1->high] <= 0 || $stockData[$vo1->high]==null) continue;
			if($stockData[$vo1->high] > $maxStockDataY) {
				$maxStockDataY = $stockData[$vo1->high];
			}
			//if($i>=$DAY_BREAK) break;
		}
		$this->_maxStockDataY=$maxStockDataY;
		
		//if($this->minMaxPadFactor != $this->minMaxPadFactorWeb) $this->minMaxPadFactor = 1.93;//2.5;
		$isFuture=false;
		$futureArr=explode(",",$this->ao->conf["future"]);
		foreach($futureArr as $i=>$str){
			$futureArr[$i]=trim($str,"'");
			if($this->symbol==$futureArr[$i]) {
				$isFuture=true;
				break;
			}
		}
		if($this->rowPriceArr[0] != null){
			if($this->symbol == "VNINDEX" || $this->symbol == "VNALLINDEX") {
				$this->minMaxPadFactor = 1.1;
			}
			else if($this->symbol == "HAINDEX") {
				$this->minMaxPadFactor = 1.3;
			}
			else if($this->symbol == "VN30INDEX") {
				$this->minMaxPadFactor = 1.2;
			}
			else if($isFuture) {
				$this->minMaxPadFactor = 1.05;
			}
			else {
				$this->minMaxPadFactor = 1.75;
			}
		}

		if($minStockDataY==null || $minStockDataY==0) $minStockDataY = 10;

		$this->minStockDataY = 0.93 * $minStockDataY;
		$this->maxStockDataY = $this->minMaxPadFactor * $minStockDataY;
		
		if(1.02*$maxStockDataY > $this->maxStockDataY){
			$this->maxStockDataY = 1.02*$maxStockDataY;
		}
		if($this->symbol == "VNINDEX" || $this->symbol == "HAINDEX" || $this->symbol == "VN30INDEX") {
			$this->minStockDataY = 0.985 * $minStockDataY;
			$this->maxStockDataY = 1.01*$maxStockDataY;
		}

		$maxStockDataY2 = 0;
		$avg = 0;
		$count = 0;
		$div = 0;
		$length = count($this->rowPriceArr);
		for($i=0; $i<$length; $i++){
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($stockData[$vo1->volume]==null || $stockData[$vo1->volume]<=1) continue;
			$value = $stockData[$vo1->volume]*$stockData[$vo1->close];//$vo->getValue($stockData);
			if($value > $maxStockDataY2) $maxStockDataY2 = $value;
			$avg += $value;
			$count++;
			if($x<$this->padX) break;
			//if($this->w==5 && $i>=60) break;
			//if($this->w==5 && $i>=$DAY_BREAK) break;
		}
		if($count!=0) $avg=round($avg/$count);
		
		//$this->maxStockDataY2 = 7*$maxStockDataY2;
		$this->maxStockDataY2 = 30*$avg;
		
		//$this->minStockDataY3 = -2*1000000;
		//$this->maxStockDataY3 = 2*1000000;
		//$this->minStockDataY3 = $this->viewStock->minTradeChart*1000000;
		//$this->maxStockDataY3 = $this->viewStock->maxTradeChart*1000000;
		
		$this->saveScale();
	}

	public function paintText($text, $left, $top, $color){
		if($color==null) $color='black';
		return que(implode("", array("<div style='font-size:10px;'>",$text,"</div>")))->css(array("position"=>"absolute", "left"=>$left, "top"=>$top, "color"=>$color))->appendTo($this->divCanvasText);
	}
	
	public function paint(){
		$this->paintField();
		if($this->symbol == "MARKET") {
			return;
		}
	
		$this->interval = 1;
		$this->padX1 = 1*550+0*171;
		if(1==0 && $this->symbol != "HAINDEX"){
			$this->rowPriceArr = $this->rowPriceArrMap["HAINDEX"];
			$this->isIndex = true;
			
			//$this->con3();
			$this->padX = 100;//$this->padX1;
			$this->w = 3;
			$this->saveDtParams();
			$this->paintClose();
		}
		
		$this->rowPriceArr = $this->rowPriceArrMap[$this->symbol];
		$this->isIndex = false;
		
		//$this->con();
		$this->padX = 4*5+3;
		//$this->w = 1;
		$this->padY = 0;
		//$this->minMaxPadFactor=1.5;
		$this->saveDtParams();
		
		$this->paintStat();
		//$this->makeFirst();
		//$this->paintTable();
		$this->paintValue();
		//$this->makeMa();
		$this->paintMa();
		$this->paintCandleStick();
		//$this->paintClose();
		//$this->paintIndicator();
		$this->setOnePrice();
	}

	public function paintCandleStick($limit){
		$voRe=$this->voRowPriceArr;
		$vo1=$this->voPrice1;
		
		$this->context->globalAlpha=1;
		$x1 = $this->getX(10);
		$x2 = $this->getX(20);
		/*
		if($this->rowPriceExArr[0][$voRe->min]!=null){
			$this->context->beginPath();
			$this->context->strokeStyle = 'Black';
			$this->context->lineWidth=1;
			$y = $this->getY(1.00*$this->rowPriceExArr[0][$voRe->min]);
			$this->context->moveTo($x1, $y);
			$this->context->lineTo($x2, $y);
			$this->context->stroke();
			
			$this->context->beginPath();
			$this->context->strokeStyle = 'Black';
			$this->context->lineWidth=1;
			$y = $this->getY(1.50*$this->rowPriceExArr[0][$voRe->min]);
			$this->context->moveTo($x1, $y);
			$this->context->lineTo($x2, $y);
			$this->context->stroke();
		}
		*/
		$this->context->restore();
		$this->context->globalAlpha=1;
		$this->context->lineWidth=1;
		$candCount = 0;
		
		/*$bv=$this->faMap[$this->symbol];
		if($bv==null) $bp="";
		else $bp=round(100*($this->rowPriceArr[0][$vo1->close]-$bv)/$bv);
		*/
		$this->paintText("<div><span style='color:blue'>".round( 100*($this->_maxStockDataY-$this->_minStockDataY)/$this->_minStockDataY )."</span></div>", 150 , 0);////// 850 485
		for($i=0; $i<$this->rowPriceArr->length-1; $i++){
			if($limit!=null && $i>=$limit) break;
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($this->padX == $this->padX1 && $x<0) break;
			if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
			
			//if($i==$this->viewStock->intervalArr[3] || $i==125 || $i==250 || $i==166){//w1:250:12.5th w2:166:8.3th w3:125:6.25th
			if($i==60){//w1:250:12.5th w2:166:8.3th w3:125:6.25th
				$this->context->restore();
				$this->context->beginPath();
				$this->context->strokeStyle='Black';			
				$this->context->globalAlpha=1;
				$this->context->lineWidth=1;
				$this->context->moveTo($x, $this->getY($this->minStockDataY));
				$this->context->lineTo($x, $this->getY($this->maxStockDataY) );
				$this->context->closePath();
				$this->context->stroke();
			}
			
			$this->context->globalAlpha=1;
			
			//if(($i==10 || $i==-60) ){// || ((substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate2 || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate3 || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate4) )){
			//if($i==10 || $i==20 || $i==60 || $i==120){
			//if(1==0 && $this->candIMap[$i] != null){
			//if($this->rowPriceExArr[$i]["less"]==0){
			//if($this->rowPriceExArr[$i]["less"]==0 && !($this->rowPriceExArr[$i+1]["less"]==0 && $this->rowPriceExArr[$i+1]["less"]==0) && $this->rowPriceExArr[$i]["maGreat"]>=1){
			//if($this->rowPriceExArr[$i][$voRe->status]=="great" || $this->rowPriceExArr[$i][$voRe->status]=="greatF"){
			//if(1==0&&$this->rowPriceExArr[$i][$voRe->status]=="greatF"){
			if($i==4){
				/*
				$this->context->restore();
				$this->context->beginPath();
				$this->context->globalAlpha=1;
				$this->context->strokeStyle='Blue';
				$this->context->lineWidth=1;
				
				$this->context->moveTo($x, $this->getY($stockData[$vo1->high]) - 40 );
				$this->context->lineTo($x, $this->getY($stockData[$vo1->high]) - 70 );
				
				$this->context->closePath();
				$this->context->stroke();
				*/
				if($this->symbol != "VNINDEX" && $this->symbol != "HAINDEX"){
					$_i=$i;
					//if($i==0) $_i=-1; 
					$xm1 = $this->getX($_i);
					
					$this->context->beginPath();
					$this->context->fillStyle = 'Black';
					$this->context->arc($xm1, $this->getY($stockData[$vo1->high])-16, 7, 0, 2 * Math::PI, false);
					$this->context->fill();
					
					$this->paintText("<span style='color:black'><b>".$this->rowPriceExArr[0][$voRe->minMax1]."</b></span>",$xm1-7,  $this->getY($stockData[$vo1->high])-52);
					/*
					if($i==0){
						$this->context->fillStyle = 'blue';
						$PERCENT = 1.04;
						if($this->symbol == "VNINDEX") $PERCENT = 1.01;
						else if($this->symbol == "HAINDEX") $PERCENT = 1.01;
						$deltaClose = $this->getY($PERCENT * $stockData[$vo1->close]) - $this->getY($stockData[$vo1->close]);
						$deltaHigh = $this->getY($PERCENT * $stockData[$vo1->close]) - $this->getY($stockData[$vo1->close]);
						$this->context->fillRect($xm1 - ($this->w+1)/2, $this->getY($stockData[$vo1->close]), $this->w, $deltaClose );
						$this->context->fillRect($xm1-1, $this->getY($stockData[$vo1->close]), 1, $deltaHigh );
					}
					*/
				}
			}
			
			if($i==0 && $this->w<2){
				$this->context->restore();
				$this->context->beginPath();
				$this->context->globalAlpha=1;
				$this->context->strokeStyle='Black';
				$this->context->lineWidth=1;
				
				$this->context->moveTo($x, $this->getY($stockData[$vo1->close]) );
				$this->context->lineTo($this->getX(60), $this->getY($stockData[$vo1->close]) );
				
				$this->context->closePath();
				$this->context->stroke();
			}
			
			if($i==0 && $this->rowPriceExArr[$i][$voRe->status0]=="greatF"){
				/*
				$this->context->restore();
				$this->context->beginPath();
				$this->context->globalAlpha=1;
				$this->context->strokeStyle='Blue';
				$this->context->lineWidth=1;
				
				$this->context->moveTo($x, $this->getY($stockData[$vo1->high]) - 40 );
				$this->context->lineTo($x, $this->getY($stockData[$vo1->high]) - 70 );
				
				$this->context->closePath();
				$this->context->stroke();
				*/
				if($this->symbol != "VNINDEX" && $this->symbol != "HAINDEX"){
					$_i=$i;
					if($i==0) $_i=-1; 
					$xm1 = $this->getX($_i);
					
					$this->context->beginPath();
					$this->context->fillStyle = 'Green';
					/////$this->context->arc($xm1, $this->getY($stockData[$vo1->low])+50, 9, 0, 2 * Math::PI, false);
					$this->context->arc($xm1-5, $this->getY($stockData[$vo1->high])-50, 9, 0, 2 * Math::PI, false);
					/////////////$this->context->arc($xm1-20, 50, 19, 0, 2 * Math::PI, false);
					$this->context->fill();
					if($i==-10){
						$this->context->fillStyle = 'blue';
						$PERCENT = 1.03;
						if($this->symbol == "VNINDEX") $PERCENT = 1.01;
						else if($this->symbol == "HAINDEX") $PERCENT = 1.01;
						$deltaClose = $this->getY($PERCENT * $stockData[$vo1->close]) - $this->getY($stockData[$vo1->close]);
						$deltaHigh = $this->getY($PERCENT * $stockData[$vo1->close]) - $this->getY($stockData[$vo1->close]);
						
						
						if($this->w%2==0) {
							$this->context->fillRect($xm1 - ($this->w)/2, $this->getY($stockData[$vo1->close]), $this->w, $deltaClose );
						} else if($this->w%2==1){
							$this->context->fillRect($xm1 - ($this->w+1)/2, $this->getY($stockData[$vo1->close]), $this->w, $deltaClose );
						}
						
						if($this->w<=3){
							$this->context->fillRect($xm1-1, $this->getY($stockData[$vo1->close]), 1, $deltaHigh );
						} else {
							$this->context->fillRect($xm1-2, $this->getY($stockData[$vo1->close]), 2, $deltaHigh );
						}
					}
				}
			}
			
			//if($i==20 || $i==40 || $i==60){
			//if(!$this->rowPriceExArr[$i]["less"]==0 && ($this->rowPriceExArr[$i+1]["less"]==0 && $this->rowPriceExArr[$i]["maGreat"]>=1)){
			if($this->rowPriceExArr[$i][$voRe->status]=="lessFF"){
				$this->context->restore();
				$this->context->beginPath();
				$this->context->globalAlpha=1;
				$this->context->strokeStyle='Red';
				$this->context->lineWidth=1;
				
				$this->context->moveTo($x, $this->getY($stockData[$vo1->low]) + 20 );
				$this->context->lineTo($x, $this->getY($stockData[$vo1->low]) + 50 );
				
				$this->context->closePath();
				$this->context->stroke();
			}
			
			//return;
			
			$this->context->globalAlpha=1;
			if($stockData[$vo1->close] >= $stockData[$vo1->open]){
				$this->context->fillStyle = 'blue';
				
				if($this->isIndex==true) {
					$this->context->fillStyle = 'Blue';
					$this->context->globalAlpha=1;
				}
			}
			else{
				$this->context->fillStyle = 'Red';
				
				if($this->isIndex==true) {
					$this->context->fillStyle = 'Red';
					$this->context->globalAlpha=1;
				}
			}
			
			$percent = null;
			if($this->rowPriceArr[$i][$vo1->ref] != null && $this->rowPriceArr[$i][$vo1->ref] != 0) {
				$percent = 100*($stockData[$vo1->close] - $this->rowPriceArr[$i][$vo1->ref])/ $this->rowPriceArr[$i][$vo1->ref];
			} else if($this->rowPriceArr[$i+1] != null && $this->rowPriceArr[$i+1][$vo1->close] !=0) {
				$percent = 100*($stockData[$vo1->close] - $this->rowPriceArr[$i+1][$vo1->close])/ $this->rowPriceArr[$i+1][$vo1->close];
			}
			if($percent != null) {
				/////////////if(abs($percent) <= 2) $this->context->fillStyle = 'Black';
				//if($this->candIMap[$i] == 0) $this->context->fillStyle = 'Purple';
				//if($this->candIMap[$i] == 1) $this->context->fillStyle = 'Black';
			}
			
			//$thisw=$this->w;
			//if($i<=20) $this->w=3;
			
			$deltaClose = $this->getY($stockData[$vo1->close]) - $this->getY($stockData[$vo1->open]);
			$deltaHigh = $this->getY($stockData[$vo1->high]) - $this->getY($stockData[$vo1->low]);
			if($deltaClose>=0 && $deltaClose<=2) $deltaClose = 2;
			if($deltaClose<0 && $deltaClose>=-2) $deltaClose = -2;
			if($deltaHigh>=0 && $deltaHigh<=2) $deltaHigh = 2;
			if($deltaHigh<0 && $deltaHigh>=-2) $deltaHigh = -2;
			if($this->w%2==0) {
				$this->context->fillRect($x- ($this->w)/2, $this->getY($stockData[$vo1->open]), $this->w, $deltaClose );
				$this->context->fillRect($x-1, $this->getY($stockData[$vo1->low]), 2, $deltaHigh );
			} else if($this->w%2==1){
				$this->context->fillRect($x - ($this->w+1)/2, $this->getY($stockData[$vo1->open]), $this->w, $deltaClose );
				if($this->w==5) $this->context->fillRect($x-1, $this->getY($stockData[$vo1->low]), 1, $deltaHigh );
				else $this->context->fillRect($x-1, $this->getY($stockData[$vo1->low]), 1, $deltaHigh );
			}
			//$this->w=$thisw;
			/*
			if($i==$this->rowPriceExArr[0][$voRe->imin] || $i==$this->rowPriceExArr[0][$voRe->imax]) {
				
				$this->context->beginPath();
				$this->context->fillStyle = 'Black';
				$this->context->arc($x-1, $this->getY($stockData[$vo1->low])+20, 5, 0, 2 * Math::PI, false);
				$this->context->fill();
				
				$this->context->beginPath();
				$this->context->fillStyle = 'Black';
				$this->context->arc($x-1, $this->getY($stockData[$vo1->high])-20, 5, 0, 2 * Math::PI, false);
				$this->context->fill();
				
			}
			*/
			
			if(1==0 && $i==0 && $this->w!=1 && $this->symbol != "VNINDEX" && $this->symbol != "HAINDEX"){
				$x = $this->getX(-1);
					
				$this->context->fillStyle = 'blue';
				$PERCENT = 1.03;
				if($this->symbol == "VNINDEX") $PERCENT = 1.01;
				else if($this->symbol == "HAINDEX") $PERCENT = 1.02;
				$deltaClose = $this->getY($PERCENT * $stockData[$vo1->close]) - $this->getY($stockData[$vo1->close]);
				$deltaHigh = $this->getY($PERCENT * $stockData[$vo1->close]) - $this->getY($stockData[$vo1->close]);
				$this->context->fillRect($x - ($this->w+1)/2, $this->getY($stockData[$vo1->close]), $this->w, $deltaClose );
				$this->context->fillRect($x-1, $this->getY($stockData[$vo1->close]), 1, $deltaHigh );
				/*
				$x1 = $this->getX(0);
				$x2 = $this->getX(120);
				$this->context->restore();
				$this->context->beginPath();
				$this->context->strokeStyle = 'Black';
				$this->context->lineWidth=1;
				$y = $this->getY($PERCENT * $stockData->close);
				$this->context->moveTo($x1, $y);
				$this->context->lineTo($x2, $y);
				$this->context->stroke();
				*/
				/*
				$this->context->fillStyle = 'red';
				$PERCENT = 1 - ($PERCENT - 1);
				$deltaClose = $this->getY($PERCENT * $stockData[$vo1->close]) - $this->getY($stockData[$vo1->close]);
				$deltaHigh = $this->getY($PERCENT * $stockData[$vo1->close]) - $this->getY($stockData[$vo1->close]);
				$this->context->fillRect($x - ($this->w+1)/2, $this->getY($stockData[$vo1->close]), $this->w, $deltaClose );
				$this->context->fillRect($x-1, $this->getY($stockData[$vo1->close]), 1, $deltaHigh );
				*/
			}
		}
		$this->context->globalAlpha=1;
	}
	
	public function paintIndicator(){
		$voRe=$this->voRowPriceArr;
		$vo1=$this->voPrice1;
		$this->context->restore();
		$this->context->globalAlpha=1;
		$vo = new stock_VoPrice();
		$w = $this->w;
		$this->w = 3;
		for($i=0; $i<$this->rowPriceArr->length-1; $i++){
			$stockData = $this->rowPriceArr[$i];
			$vo->row = $stockData;
			$x = $this->getX($i);
			if($x< 0*(911-$this->padX1)) break;

			//$y2 = $vo->getLiveVolume();
			$y3=100*($stockData[$vo1->close] - $this->rowPriceArr[$i+1][$vo1->close])/$this->rowPriceArr[$i+1][$vo1->close];
			if($y3==null) continue;
			if($x<$this->padX) break;
			if( $y3>=0) $this->context->fillStyle = 'blue';
			else $this->context->fillStyle = 'red';
			///$this->context->fillRect($x- ($this->w+1)/2, $this->getY3(0), $this->w , -$y3*$this->scaleY3);
		}
		$this->w = $w;
		$this->context->globalAlpha=1;
		
		$this->context->restore();
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		$x1 = $this->getX(0);
		$x2 = $this->getX($this->rowPriceArr->length);
		
		$y = $this->getY4(7);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		
		$y = $this->getY4(0);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		
		
		$y = $this->getY4(-3);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		
		/*
		$y = $this->getY3(3);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		
		
		$y = $this->getY3(-3);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		*/
		$this->context->stroke();
		///return;
		for($k=6; $k>=1; $k--){
			if($limit!= null && $k!=1 && $k!=2 && $k!=3 && $k!=4 && $k!=5 && $k!=6) continue;
			if($k==1){
				//continue;
				$this->context->strokeStyle='Black';
				$this->context->fillStyle='Black';
			}
			else if($k==2){
				continue;
				$this->context->strokeStyle='Blue';
				$this->context->fillStyle='Blue';
			}
			else if($k==3){
				continue;
				$this->context->strokeStyle='Red';
				$this->context->fillStyle='Red';
			}
			else if($k==4){
				continue;
				$this->context->strokeStyle='hotpink';
			}
			else if($k==5){
				continue;
				$this->context->strokeStyle='Black';
				$this->context->strokeStyle='blue';
			}
			else if($k==6){
				continue;
				$this->context->strokeStyle='hotpink';
				$this->context->strokeStyle='blue';
			}
			$this->context->globalAlpha=1;
			//$this->context->beginPath();
			//$this->context->lineWidth=1;
			
			for($i=0; $i<$this->rowPriceArr->length; $i++){
				if($limit!=null && $i>=$limit) break;
				$x = $this->getX($i) - 0*50;
				if($this->padX == $this->padX1 && $x<0) break;
				if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
				$stockData = $this->rowPriceExArr[$i];
				/*
				if($k==1) $y = $stockData["maPer".$this->viewStock->intervalArr[0]];
				else if($k==2) $y = $stockData["maPer".$this->viewStock->intervalArr[1]];
				else if($k==3) $y = $stockData["maPer".$this->viewStock->intervalArr[2]];
				else if($k==4) $y = $stockData["maPer".$this->viewStock->intervalArr[3]];
				else if($k==5) $y = $stockData["maPer".$this->viewStock->intervalArr[4]];
				else if($k==6) $y = $stockData["maPer".$this->viewStock->intervalArr[5]];
				*/
				if($k==1) $y = $stockData[$voRe->maxC1];
				if($y==null) continue;
				if($y>10) $y=11;
				$this->context->fillStyle='red';
				$this->context->fillRect($x- ($this->w+1)/2, $this->getY4(0), $this->w, $y*$this->scaleY4);
				
				if($k==1) $y = $stockData[$voRe->minC1];
				if($y==null) continue;
				if($y>10) $y=11;
				$this->context->fillStyle='blue';
				$this->context->fillRect($x- ($this->w+1)/2, $this->getY4(0), $this->w , -$y*$this->scaleY4);
			}
			//$this->context->stroke();
		}
		$this->context->globalAlpha=1;
	}
	
	public function conWeb(){
		$this->w = 3;
		$this->padX = 10;
		$this->ox=0;
		$this->oy=0;
		$this->padY = 0;
		$this->minMaxPadFactor = 1.3;
		$this->minMaxPadFactorWeb = $this->minMaxPadFactor;
	
		$this->width = 900;//1025;
		return $this;
	}
	
	public function paintMaWeb($limit){ //return;
		$vo = new stock_VoPrice();
		for($k=1; $k>=1; $k--){
			if($limit!= null && $k!=1 && $k!=2 && $k!=3 && $k!=4) continue;
			$strokeStyle = "";
			if($k==1){
				//if($this->w==5) continue;
				//$this->context->strokeStyle='purple';
				$strokeStyle=$this->color["purple"];
			}
			else if($k==2){
				continue;
				$strokeStyle=$this->color["sienna"];
			}
			else if($k==3){
				$strokeStyle=$this->color["black"];
			}
			else if($k==4){
				$strokeStyle=$this->color["black"];
			}
			$x0=null;$y0=null;
			$length = count($this->rowPriceArr);
			for($i=0; $i<$length; $i++){
				if($limit!=null && $i>=$limit) break;
				$x = $this->getX($i);
				if($x<$this->padX) break;
				$stockData = $this->rowPriceArr[$i];
				if($k==1) $y = $stockData["ma1"];
				else if($k==2) $y = $stockData["ma2"];
				else if($k==3) $y = $stockData["ma3"];
				else if($k==4) $y = $stockData["ma4"];
				if($y==null) break;
				$y = $this->getY($y);
				if($i==0){
					//$this->context->moveTo($x, $y);
				} else{
					//$this->context->lineTo($x, $y);
					imageline($this->image, $x0, $y0, $x, $y, $strokeStyle);
				}
				$x0 = $x; $y0=$y;
			}
		}
	}
	
	public function paintTableWeb(){

		$stock_symbol = $this->symbol;
		$viewPrice = new stock_ViewPrice();

		$text = "
tdmua toiuu = tdmua cbcandle <br/>
tdban toiuu = <b style='color:red'>tcp min</b> <br/>
cpchia = 4 <br/>
cpchiacho max = 2
		";
		//$font_path = '/home/a6823594/public_html/arial.ttf';
		if(!file_exists($font_path)) $font_path = 'arial.ttf';
		$black = imagecolorallocate($this->image, 0, 0, 0);
		$red = imagecolorallocate($this->image, 255, 0, 0);
		$blue = imagecolorallocate($this->image, 0, 0, 255);
		$mod = 1;
		//$this->paintText("<b><span style='color:red'>".$viewPrice->formatPrice($this->rowPriceArr[0]["minMax"])."</span>_<span style='color:red;font-weight:bold'>".$viewPrice->formatPrice($this->rowPriceArr[0]["minClose"])."</span>_<span style='color:red'>".$viewPrice->formatValue($this->rowPriceArr[0]["value2"])."</span></b>", $this->width - 160, 60);
		$string = $viewPrice->formatPrice($this->rowPriceArr[0]["minClose"])."_".$viewPrice->formatPrice($this->rowPriceArr[0]["minMax"])."_".$viewPrice->formatValue($this->rowPriceArr[0]["value2"]);
		///////////imagettftext($this->image, 14, 0, $this->width - 250 + $mod*80, 350 - $mod*330, $black, $font_path, $string);
		imagestring($this->image, 5, $this->width - 250 + $mod*80, 350 - $mod*330, $string, $black);
		//$this->paintText("<b><span style='color:red'>".$viewPrice->formatPrice($this->rowPriceArr[0]["megaCount"])."</span>_<span style='color:red'>".$viewPrice->formatPrice($this->rowPriceArr[0]["minClose20"])."</span>_<span style='color:red'>".$viewPrice->formatValue($this->rowPriceArr[0]["value"])."</span></b>", $this->width - 160, 80);
		$string = $viewPrice->formatPrice($this->rowPriceArr[0]["minClose20"])."_".$viewPrice->formatPrice($this->rowPriceArr[0]["megaCount"])."_".$viewPrice->formatValue($this->rowPriceArr[0]["value"]);
		/////////////imagettftext($this->image, 14, 0, $this->width - 250 + $mod*80, 370 - $mod*330, $black, $font_path, $string);
		imagestring($this->image, 5, $this->width - 250 + $mod*80, 370 - $mod*330, $string, $black);
		//$this->paintText("<span style='color:black'><b>".$stock_symbol.".".$this->rowPriceArr[0]["market"]."</b></span>", $this->width - 250, 60)->css("width", 150);
		$string = substr($stock_symbol,0,3).".".$this->rowPriceArr[0]["market"];
		/////////////////imagettftext($this->image, 14, 0, $this->width - 340 + $mod*80, 350 - $mod*330, $black, $font_path, $string);
		imagestring($this->image, 5, $this->width - 340 + $mod*80, 350 - $mod*330, $string, $black);
		if(stock_A::get()->isLive()){
			//$this->paintText("<span style='color:black'><b>".$text."</b></span>", $this->width - 300, 100)->css("width", 300);
		}
		
		
		$x1 = $this->getX(0);
		$x2 = $this->getX(240);
		
		$y = $this->getY($this->rowPriceArr[0]["min"]);
		//imageline($this->image, $x1, $y, $x2, $y, $black);
		
		$y = $this->getY(2.00*$this->rowPriceArr[0]["min"]);
		//imageline($this->image, $x1, $y, $x2, $y, $black);
		
		$y = $this->getY(3.00*$this->rowPriceArr[0]["min"]);
		//imageline($this->image, $x1, $y, $x2, $y, $blue);
	}
	
	public function paintValueWeb(){
		$stupid= 1;
		$vo = new stock_VoPrice();
		$w = $this->w;
		//$this->w = 3;
		$length = count($this->rowPriceArr);
		if(1==1 || $this->w==5) for($i=0; $i<$length; $i++){
			$stockData = $this->rowPriceArr[$i];
			$vo->row = $stockData;
			$x = $this->getX($i);

			$y2 = $vo->getLiveVolume();
			if($y2==null) continue;
			if($x<$this->padX) break;
			if( $stockData["close"] >= $stockData["open"]) $fillStyle = imagecolorallocate($this->image, 0x00, 0x80, 0x00);//'Green';
			else $fillStyle = imagecolorallocate($this->image, 0xA5, 0x2A, 0x2A);//'brown';
			//$this->context->fillRect($x- ($this->w+1)/2, $this->getY2(0), $this->w , -$y2*$this->scaleY2);
			$x1 = $x- ($this->w+1)/2;
			$y1 = $this->getY2(0);
			imagefilledrectangle($this->image, $x1, $y1, $x1 + $this->w - $stupid, $y1 -$y2*$this->scaleY2 - $stupid, $fillStyle );
			//imagecolordeallocate($this->image, $fillStyle);
		}
		//$this->w = $w;
		return;
	}
	
	public function paintCandleStickWeb($limit){ 
		$length = count($this->rowPriceArr);
		$stupid = 1;
		$candCount = 0;
		$perNow = round(100*($this->rowPriceArr[0]["close"] - $this->rowPriceArr[1]["close"])/$this->rowPriceArr[1]["close"]);
		$firstNowDec = true;
		$firstNowInc = true;
		$firstDec = true;
		$firstInc = true;
		$decF=null;$incF=null;
		$candIncCount = 0;
		$candDecCount = 0;
		$y0 = $this->getY($this->rowPriceArr[0]["close"]);
		$stockA = stock_A::get();
		for($i=0; $i<$length-1; $i++){
			if($limit!=null && $i>=$limit) break;
			$stockData = $this->rowPriceArr[$i];
			$x = $this->getX($i);
			if($x<$this->padX) break;
			
			/**************************************
			if(1==1 && $this->candIMap[$i] != null){
				if($i==120) $strokeStyle='Green';
				if($i==10) $strokeStyle='Purple';
				if($i==20) $strokeStyle='Teal';
				if($i==60) $strokeStyle='Sienna';
				
				$strokeStyle=imagecolorallocate($this->image, 190, 190, 190);//'Gray';
				//$strokeStyle = ImageColorAllocate($this->image, 165, 42, 42);//brown
				//$strokeStyle = ImageColorAllocate($this->image, 255, 0, 0);
				//$strokeStyle = ImageColorAllocate($this->image, 0, 0, 0);
				
				if($this->candIMap[$i]["inc"] >= 2 && $this->candIMap[$i]["inc"]>$this->candIMap[$i]["dec"]) {
				//if($this->candIMap[$i]["inc"] >= 2 || $this->candIMap[$i]["dec"]>=2) {
				//if($this->candIMap[$i]["inc"] >= 2){
					$candCount ++;
					$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
					//$strokeStyle=ImageColorAllocate($this->image, 160, 82, 45);//sienna
					//$strokeStyle = ImageColorAllocate($this->image, 255, 0, 0);
					if($candCount <= 300){
						$font_path = 'arial.ttf';
						$red = imagecolorallocate($this->image, 255, 0, 0);
						$blue = imagecolorallocate($this->image, 0, 0, 255);
						imagettftext($this->image, 14, 0, $x - 5, 80+(($candCount - 1) % 10)*30, $blue, $font_path, $this->candIMap[$i]["inc"]);
						imagettftext($this->image, 14, 0, $x - 5, 80+(($candCount - 1) % 10)*30 + 15, $red, $font_path, $this->candIMap[$i]["dec"]);
					}
					
					if( $this->candIMap[$i]["inc"]>=$this->candIMap[$i]["dec"]){
						$y = $this->getY($stockData["high"]);
						imageline($this->image, $x, $y - 20, $x, $y - 130, $strokeStyle);
					} else {
						$y = $this->getY($stockData["low"]);
						//$strokeStyle=imagecolorallocate($this->image, 190, 190, 190);//'Gray';
						imageline($this->image, $x, $y + 20, $x, $y + 130, $strokeStyle);
					}
				}
			}
			*******************************************/
			/******************************
			if(1==1 && $this->candIMap[$i] != null){
				if($i==120) $strokeStyle='Green';
				if($i==10) $strokeStyle='Purple';
				if($i==20) $strokeStyle='Teal';
				if($i==60) $strokeStyle='Sienna';
				
				$strokeStyle=imagecolorallocate($this->image, 190, 190, 190);//'Gray';
				//$strokeStyle = ImageColorAllocate($this->image, 165, 42, 42);//brown
				//$strokeStyle = ImageColorAllocate($this->image, 255, 0, 0);
				//$strokeStyle = ImageColorAllocate($this->image, 0, 0, 0);
				
				//if($this->candIMap[$i]["inc"] >= 2 && $this->candIMap[$i]["inc"]>$this->candIMap[$i]["dec"]) {
				//if($this->candIMap[$i]["inc"] >= 2 || $this->candIMap[$i]["dec"]>=2) {
				//if($this->candIMap[$i]["inc"] >= 2){
				if($this->candIMap[$i][3] >=19
				|| $this->candIMap[$i][4]>=19
				|| $this->candIMap[$i][5]>=19
				|| $this->candIMap[$i][6]>=19
				|| $this->candIMap[$i][7]>=19
				|| $this->candIMap[$i][8]>=19
				|| $this->candIMap[$i][9]>=19
				|| $this->candIMap[$i][10]>=19
				){
					$candCount ++;
					$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
					//$strokeStyle=ImageColorAllocate($this->image, 160, 82, 45);//sienna
					//$strokeStyle = ImageColorAllocate($this->image, 255, 0, 0);
				
					if($candCount <= 10){
						$font_path = 'arial.ttf';
						$red = imagecolorallocate($this->image, 255, 0, 0);
						$blue = imagecolorallocate($this->image, 0, 0, 255);
						//imagettftext($this->image, 14, 0, $x - 5, 80+(($candCount - 1) % 10)*30, $blue, $font_path, $this->candIMap[$i]["inc"]);
						//imagettftext($this->image, 14, 0, $x - 5, 80+(($candCount - 1) % 10)*30 + 15, $red, $font_path, $this->candIMap[$i]["dec"]);
						$str = "";
						foreach($this->candIMap[$i] as $key => $value){
							$str .= $key .":". $value ."|";
						}
						imagettftext($this->image, 14, 0, $x - 500, 80+(($candCount - 1) % 10)*30, $red, $font_path, $str);
					}
					$y = $this->getY($stockData["high"]);
					imageline($this->image, $x, $y - 20, $x, $y - 130, $strokeStyle);
				}
			}
			****************************************************/
			$fillStyle = '';
			if($stockData["close"] >= $stockData["open"]){
				$fillStyle = imagecolorallocate($this->image, 0, 0, 255);//'blue';
				if($this->isIndex==true) $fillStyle = imagecolorallocatealpha ($this->image, 46, 139, 87, $this->alpha);//imagecolorallocatealpha ($this->image, 0, 0, 0, $this->alpha);
			}
			else{
				$fillStyle = imagecolorallocate($this->image, 255, 0, 0);//'Red';
				if($this->isIndex==true) $fillStyle = imagecolorallocatealpha ($this->image, 160, 32, 240, $this->alpha);//imagecolorallocatealpha ($this->image, 160, 82, 45, $this->alpha);
			}
			
			if(1==0 && $this->candIMap[$i] != null){
				if($i==120) $strokeStyle='Green';
				if($i==10) $strokeStyle='Purple';
				if($i==20) $strokeStyle='Teal';
				if($i==60) $strokeStyle='Sienna';
				
				$strokeStyle=imagecolorallocate($this->image, 190, 190, 190);//'Gray';
				//$strokeStyle = ImageColorAllocate($this->image, 165, 42, 42);//brown
				//$strokeStyle = ImageColorAllocate($this->image, 255, 0, 0);
				//$strokeStyle = ImageColorAllocate($this->image, 0, 0, 0);
				
				//if($this->candIMap[$i]["inc"] >= 2 && $this->candIMap[$i]["inc"]>$this->candIMap[$i]["dec"]) {
				if( $candCount < 10){
					if($this->candIMap[$i]["inc"] >= 2 || 
						//$this->candIMap[$i]["dec"]>=2 ||
						($this->candIMap[$i]["inc"] >= 1 && $i <=5)
						//|| ($i == 0)
					) {
						//if($this->candIMap[$i]["inc"] >= 2){
							$candCount ++;
							$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
							//$strokeStyle=ImageColorAllocate($this->image, 160, 82, 45);//sienna
							//$strokeStyle = ImageColorAllocate($this->image, 255, 0, 0);
							if($candCount <= 5){
								$font_path = 'arial.ttf';
								$red = imagecolorallocate($this->image, 255, 0, 0);
								$blue = imagecolorallocate($this->image, 0, 0, 255);
								$black = imagecolorallocate($this->image, 0, 0, 0);//'Gray' imagecolorallocate($this->image, 0, 255, 0);
								$dec="";$inc="";$equal="";
								if($this->candIMap[$i]["dec"] >0) {
									$candDecCount ++;
									$dec = $this->candIMap[$i]["dec"];
									if($decF == null) {
										$decF = $dec;
										$dec = "".$dec;
									}
									//imagettftext($this->image, 14, 0, $this->width - 30, $y0- 10 -($candDecCount - 1)*30, $black, $font_path, $dec);
								}
								if($this->candIMap[$i]["inc"] >0) {
									$candIncCount ++;
									$inc = $this->candIMap[$i]["inc"];
									if($incF == null) {
										$incF = $inc;
										$inc = "*".$inc;
									}
									//imagettftext($this->image, 14, 0, $this->width - 30, $y0+ 10 + 14 +($candIncCount - 1)*30, $black, $font_path, $inc);
								}
								if($this->candIMap[$i]["equal"] >=0) $equal = $this->candIMap[$i]["equal"];
								imagettftext($this->image, 14, 0, $this->width - 90 - ($candCount - 1)*40, 60, $red, $font_path, $dec);
								imagettftext($this->image, 14, 0, $this->width - 90 - ($candCount - 1)*40, 60+ 15, $black, $font_path, $equal);
								imagettftext($this->image, 14, 0, $this->width - 90 - ($candCount - 1)*40, 60+ 30, $blue, $font_path, $inc);
								/*
								$_key = substr($this->candIMap[$i]["_key"],0,4);
								if($this->candMap[$_key]["dec"] >0) $decPer = $this->candMap[$_key]["dec"];
								if($this->candMap[$_key]["inc"] >0) $incPer = $this->candMap[$_key]["inc"];
								imagettftext($this->image, 14, 0, $this->width - 90 - ($candCount - 1)*40, 60+ 45, $red, $font_path, $decPer);
								imagettftext($this->image, 14, 0, $this->width - 90 - ($candCount - 1)*40, 60+ 60, $blue, $font_path, $incPer);
								
								$_key = substr($this->candIMap[$i]["_key"],0,3);
								if($this->candMap[$_key]["dec"] >0) $decPer = $this->candMap[$_key]["dec"];
								if($this->candMap[$_key]["inc"] >0) $incPer = $this->candMap[$_key]["inc"];
								imagettftext($this->image, 14, 0, $this->width - 90 - ($candCount - 1)*40, 60+ 75, $red, $font_path, $decPer);
								imagettftext($this->image, 14, 0, $this->width - 90 - ($candCount - 1)*40, 60+ 90, $blue, $font_path, $incPer);
								*/
							}
						//}
						
						if( 1==0 
							//|| ($this->candIMap[$i]["inc"] == 0 && $this->candIMap[$i]["dec"] != 0) ||
							//($this->candIMap[$i]["inc"] != 0 && $this->candIMap[$i]["dec"] != 0)
						){
							$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
							$size = 6;
							$y = $this->getY($stockData["high"]);
							if($firstNowDec == true){
								//if($perNow<=0){
									//$strokeStyle=imagecolorallocate($this->image,190, 190, 190);//'Black';
									//imageellipse($this->image, $x - 1, $y - 30 - ($candCount - 1)*50/4, $size + 4, $size + 4, $strokeStyle);
									$firstNowDec = false;
								//}
							} 
							
							if($firstDec == true){
								imagettftext($this->image, 14, 0, $x + 4, $y - 10, $black, $font_path, $this->candIMap[$i]["dec"]);
								$firstDec = false;
								//imagefilledellipse($this->image, $x - 1, $y - 30 - ($candCount - 1)*50/4, $size, $size, $strokeStyle);
							} 
								
							//if($candCount <= 5) imagefilledellipse($this->image, $x - 1, $y - 30 - ($candCount - 1)*50/4, $size, $size, $strokeStyle);
							//if($candCount == 1) $strokeStyle=imagecolorallocate($this->image,255,0,0);//'Black';
							imageline($this->image, $x - 1, $y - 30, $x - 1, $y - 80, $strokeStyle);
							//$fillStyle = imagecolorallocate($this->image, 160, 32, 240);//'hotpink'
						} 
						
						if( 
							//($this->candIMap[$i]["inc"] != 0 && $this->candIMap[$i]["dec"] == 0) ||
							//($this->candIMap[$i]["inc"] != 0 && $this->candIMap[$i]["dec"] != 0)
							1==1
						){
							$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
							$size = 6;
							$y = $this->getY($stockData["low"]);
							if($firstNowInc == true){
								//if($perNow>=0){
									//$strokeStyle=imagecolorallocate($this->image,190, 190, 190);//'Black';
									//imageellipse($this->image, $x - 1, $y + 30 + ($candCount - 1)*50/4, $size + 4, $size + 4, $strokeStyle);
									$firstNowInc = false;
								//}
							} 
							if($firstInc == true){
								imagettftext($this->image, 14, 0, $x + 4, $y + 14 + 10, $black, $font_path, $this->candIMap[$i]["inc"]);
								$firstInc = false;
								//imagefilledellipse($this->image, $x - 1, $y + 30 + ($candCount - 1)*50/4, $size, $size, $strokeStyle);
							} 
							
							//if($candCount <= 5) imagefilledellipse($this->image, $x - 1, $y + 30 + ($candCount - 1)*50/4, $size, $size, $strokeStyle);
							//if($candCount == 1) $strokeStyle=imagecolorallocate($this->image,255,0,0);//'Black';
							imageline($this->image, $x - 1, $y + 30, $x - 1, $y + 80, $strokeStyle);
							//$fillStyle = imagecolorallocate($this->image, 0, 255, 0);//'green
						}
					}
				} else if(1==0){
					if($this->candIMap[$i]["inc"] >= 2){
						if( //($this->candIMap[$i]["inc"] == 0 && $this->candIMap[$i]["dec"] != 0) ||
							($this->candIMap[$i]["inc"] != 0 && $this->candIMap[$i]["dec"] != 0)
						){
							$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
							$size = 6;
							$y = $this->getY($stockData["high"]);
							if($firstNowDec == true){
								//if($perNow<=0){
									//$strokeStyle=imagecolorallocate($this->image,190, 190, 190);//'Black';
									imageellipse($this->image, $x - 1, $y - 20 - ($candCount - 1)*50/4, $size + 4, $size + 4, $strokeStyle);
									$firstNowDec = false;
								//}
							} 
							
							if($firstDec == true){
								imagettftext($this->image, 14, 0, $x + 4, $y - 10, $black, $font_path, $this->candIMap[$i]["dec"]);
								$firstDec = false;
							} 
								
							//if($candCount <= 5) imagefilledellipse($this->image, $x - 1, $y - 20 - ($candCount - 1)*50/4, $size, $size, $strokeStyle);
							//if($candCount == 1) $strokeStyle=imagecolorallocate($this->image,255,0,0);//'Black';
							imageline($this->image, $x - 1, $y - 20, $x - 1, $y - 70, $strokeStyle);
							//$fillStyle = imagecolorallocate($this->image, 160, 32, 240);//'hotpink'
						} 
						
						if( ($this->candIMap[$i]["inc"] != 0 && $this->candIMap[$i]["dec"] == 0) ||
							($this->candIMap[$i]["inc"] != 0 && $this->candIMap[$i]["dec"] != 0)
						){
							$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
							$size = 6;
							$y = $this->getY($stockData["low"]);
							if($firstNowInc == true){
								//if($perNow>=0){
									//$strokeStyle=imagecolorallocate($this->image,190, 190, 190);//'Black';
									imageellipse($this->image, $x - 1, $y + 20 + ($candCount - 1)*50/4, $size + 4, $size + 4, $strokeStyle);
									$firstNowInc = false;
								//}
							} 
							if($firstInc == true){
								imagettftext($this->image, 14, 0, $x + 4, $y + 14 + 10, $black, $font_path, $this->candIMap[$i]["inc"]);
								$firstInc = false;
							} 
							
							//if($candCount <= 5) imagefilledellipse($this->image, $x - 1, $y + 20 + ($candCount - 1)*50/4, $size, $size, $strokeStyle);
							//if($candCount == 1) $strokeStyle=imagecolorallocate($this->image,255,0,0);//'Black';
							imageline($this->image, $x - 1, $y + 20, $x - 1, $y + 70, $strokeStyle);
							//$fillStyle = imagecolorallocate($this->image, 0, 255, 0);//'green
						}
					}
				}
			}
			
			if(1==0 && $i==10){
			//if(1==0 && $i == $this->rowPriceArr[0]["imax20"]){
				$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
				$y = $this->getY($stockData["high"]);
				$size = 7;
				imageline($this->image, $x - 1, $this->getY($this->minStockDataY), $x - 1, $this->getY($this->maxStockDataY), $strokeStyle);
				
				//imagefilledellipse($this->image, $x -1, $y - 6, $size, $size, $strokeStyle);
				//imageellipse($this->image, $x -1, $y - 6, $size + 4, $size + 4, $strokeStyle);
			}
			if(1==0&&$i == $this->rowPriceArr[0]["imin20"]){
				$strokeStyle=imagecolorallocate($this->image,0,0,0);//'Black';
				$y = $this->getY($stockData["low"]);
				$size = 7;
				//imageline($this->image, $x - 1, $y - 10, $x - 1, $this->getY($this->maxStockDataY), $strokeStyle);
				
				//imagefilledellipse($this->image, $x -1, $y + 6, $size, $size, $strokeStyle);
				imageellipse($this->image, $x -1, $y + 16, $size + 4, $size + 4, $strokeStyle);
			}
			if($i == $this->rowPriceArr[0]["imin20"]){
				//$fillStyle = imagecolorallocate($this->image, 0, 0, 0);//'Black';
			}
			//continue;
			/*
			$percent = null;
			if($this->rowPriceArr[$i]["ref"] != null && $this->rowPriceArr[$i]["ref"] != 0) {
				$percent = 100*($stockData["close"] - $this->rowPriceArr[$i]["ref"])/ $this->rowPriceArr[$i]["ref"];
			} else if($this->rowPriceArr[$i+1] != null && $this->rowPriceArr[$i+1]["close"] !=0) {
				$percent = 100*($stockData["close"] - $this->rowPriceArr[$i+1]["close"])/ $this->rowPriceArr[$i+1]["close"];
			}
			if($percent != null) {
				//if($percent >= 3) $this->context->fillStyle = 'Black';
				//if(abs($percent) <= 2) $fillStyle = imagecolorallocate($this->image,0,0,0);//'Black';
			}
			*/

			$deltaClose = $this->getY($stockData["close"]) - $this->getY($stockData["open"]);
			$deltaHigh = $this->getY($stockData["high"]) - $this->getY($stockData["low"]);
			//if($deltaClose==0) $deltaClose = 1;
			//if($deltaHigh==0) $deltaHigh = 1;
			//$this->context->fillRect($x - ($this->w+1)/2, $this->getY($stockData["open"]), $this->w, $deltaClose );
			$x1 = $x - ($this->w+1)/2;
			$y1 = $this->getY($stockData["open"]);
			imagefilledrectangle($this->image, $x1, $y1, $x1 + $this->w - $stupid, $y1 + $deltaClose - $stupid, $fillStyle );
			//$this->context->fillRect($x-1, $this->getY($stockData["low"]), 1, $deltaHigh );
			$x1 = $x-1;
			$y1 = $this->getY($stockData["low"]);
			imagefilledrectangle($this->image, $x1, $y1, $x1 + 1 - $stupid, $y1 + $deltaHigh - $stupid, $fillStyle );
			if(1==0 && $i==0 && $this->w!=1){
				$x = $this->getX(-1);
					
				$fillStyle = imagecolorallocate($this->image, 0, 0, 255);//'blue';
				$PERCENT = 1.05;
				if($this->symbol == "VNINDEX") $PERCENT = 1.01;
				else if($this->symbol == "HAINDEX") $PERCENT = 1.02;
				$deltaClose = $this->getY($PERCENT * $stockData["close"]) - $this->getY($stockData["close"]);
				$deltaHigh = $this->getY($PERCENT * $stockData["close"]) - $this->getY($stockData["close"]);
				//$this->context->fillRect($x - ($this->w+1)/2, $this->getY($stockData["close"]), $this->w, $deltaClose );
				$x1 = $x - ($this->w+1)/2;
				$y1 = $this->getY($stockData["close"]);
				imagefilledrectangle($this->image, $x1, $y1, $x1 + $this->w  - $stupid, $y1 + $deltaClose  - $stupid, $fillStyle );
				//$this->context->fillRect($x-1, $this->getY($stockData["close"]), 1, $deltaHigh );
				$x1 = $x-1;
				$y1 = $this->getY($stockData["close"]);
				imagefilledrectangle($this->image, $x1, $y1, $x1 + 1  - $stupid, $y1 + $deltaHigh  - $stupid, $fillStyle );
			
				$fillStyle = imagecolorallocate($this->image, 255, 0, 0);//'Red';
				$PERCENT = 1 - ($PERCENT - 1);
				$deltaClose = $this->getY($PERCENT * $stockData["close"]) - $this->getY($stockData["close"]);
				$deltaHigh = $this->getY($PERCENT * $stockData["close"]) - $this->getY($stockData["close"]);
				//$this->context->fillRect($x - ($this->w+1)/2, $this->getY($stockData["close"]), $this->w, $deltaClose );
				$x1 = $x - ($this->w+1)/2;
				$y1 = $this->getY($stockData["close"]);
				imagefilledrectangle($this->image, $x1, $y1, $x1 + $this->w  - $stupid, $y1 + $deltaClose  - $stupid, $fillStyle );
				//$this->context->fillRect($x-1, $this->getY($stockData["close"]), 1, $deltaHigh );
				$x1 = $x-1;
				$y1 = $this->getY($stockData["close"]);
				imagefilledrectangle($this->image, $x1, $y1, $x1 + 1  - $stupid, $y1 + $deltaHigh  - $stupid, $fillStyle );
			}
			//imagecolordeallocate($this->image, $fillStyle);
		}
	}
	
	public $color = array(
	);
	public function paintWeb($symbol, $height){
	//<@
		//ob_clean();
		$stockA = stock_A::get();
		$this->conWeb();
		$this->height = $height;
		
		header('Content-type: image/png');
		$this->image = imagecreatetruecolor($this->width, $this->height);
		
		//Set up some colors, use a dark gray as the background color
		//$dark_grey = imagecolorallocate($this->image, 102, 102, 102);
		$this->color["white"] = imagecolorallocate($this->image, 255, 255, 255);
		$this->color["black"] = imagecolorallocate($this->image, 0, 0, 0);
		$this->color["sienna"] = ImageColorAllocate($this->image, 160, 82, 45);
		$this->color["red"] = imagecolorallocate($this->image, 255, 0, 0);
		$this->color["green"] = imagecolorallocate($this->image, 0, 255, 0);
		$this->color["blue"] = imagecolorallocate($this->image, 0, 0, 255);
		
		imagefilledrectangle($this->image, 0, 0, $this->width, $this->height, $this->color["white"]);
		
		////////////////////////////////HA
		if($symbol != "HAINDEX"){
			$this->rowPriceArr = $stockA->getRowArrayPrice("HAINDEX");
			$this->isIndex = true;
			
			$this->w = 3;
			$this->saveDtParams();
			$this->paintCandleStickWeb(null);
			
			$this->isIndex = false;
			//$this->w = 0;
			//$this->saveDtParams();
			//$this->paintCloseWeb();
			
		}
		////////////////////
		
		$this->rowPriceArr = $stockA->getRowArrayPrice($symbol);
		$this->conWeb();
		$this->saveDtParams();
		$this->candIMap = array(
		);
		/************************************
		if($symbol != "HAINDEX" && $symbol != "VNINDEX"){
			$candMap = jsml_A::get()->loadJson("candMap", "");
			$candModMap = $stockA->getCandModMap(&$candMap);
			$len = count($this->rowPriceArr);
			for($i=0; $i<$len; $i++){
				$x = $this->getX($i);
				if($x<$this->padX) break;
				
				$perCandArr = $stockA->getPerCandArr($this->rowPriceArr, $i);
				if($perCandArr == null) break;
				$key = $stockA->getCandMod($perCandArr);
				if($candModMap[$key]!=null){
					$this->candIMap[$i] = $candModMap[$key];
				}
			}
		}
		******************************************************/
		if($symbol != "HAINDEX" && $symbol != "VNINDEX"){
			$this->candMap = jsml_A::get()->loadJson("cand2Map", "");
			$len = count($this->rowPriceArr);
			for($i=0; $i<$len; $i++){
				$x = $this->getX($i);
				if($x<$this->padX) break;
				
				$perCandArr = $stockA->getPerCandArr($this->rowPriceArr, $i);
				if($perCandArr == null) break;
				$key = $stockA->getCandMod($perCandArr);
				if($this->candMap[$key]!=null){
					$this->candIMap[$i] = $this->candMap[$key];
					$this->candIMap[$i]["_key"] = $key;
				}
			}
		}
		
		$this->makeFirst();
		$this->paintTableWeb();
		$this->paintValueWeb();
		
		//$this->makeMa(null);
		//$this->paintMaWeb(null);
		
		$this->conWeb();
		$this->w = 3;
		$this->saveDtParams();
		$this->paintCandleStickWeb(null);
		
		$this->conWeb();
		$this->padX = 171;
		$this->w = 0;
		$this->saveDtParams();		
		$this->paintCloseWeb();
		
		//Create our final image 
		imagepng($this->image);
		 
		//Clear up memory 
		imagedestroy($this->image);

	//@>
	}
	
	public function paintClose(){
		$vo1=$this->voPrice1;
		/*
		$stockData = $this->rowPriceArr[0];
		$x1 = $this->getX(-1);
		$x2 = $this->getX(720);
		$this->context->restore();
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		$y = $this->getY($stockData->close);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		$this->context->stroke();
		
		
		return;
		*/
		$this->context->restore();
		$this->context->beginPath();
		$this->context->strokeStyle = 'Red';
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		$this->context->globalAlpha=1;
		//$this->context->strokeStyle = 'red';
		if($this->isIndex==true) {
			$this->context->strokeStyle = 'Black';
			$this->context->globalAlpha=1;
		}
		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i) - 0*50;
			if($x<0) break;
			$value = $this->rowPriceArr[$i][$vo1->close];
			if($value==null || $value == 0) continue;
			$y = $this->getY($value);
			if($i==0){
				$this->context->moveTo($x, $y);
			} else{
				$this->context->lineTo($x, $y);
			}
		}
		$this->context->stroke();
		$this->context->globalAlpha=1;
		
		
	}
	public function paintStat(){
		$vo1=$this->voPrice1;
		/*
		if($this->viewStock->tradeFullMap!=null){
			$tradeFullMap=$this->viewStock->tradeFullMap;
			$capMap=$tradeFullMap["capMap"];
			$indexArr=$tradeFullMap["indexArr"];
		}
		if($this->viewStock->tradeFullMap!=null){
			$tradeFullMap=$this->viewStock->tradeFullMap;
			
			$n=0;
			foreach($tradeFullMap["capMap"] as $m=>$vArr){
				$this->context->restore();
				$this->context->beginPath();
				if($n==0) $this->context->strokeStyle = 'purple';
				if($n==1) $this->context->strokeStyle = 'purple';//'Teal';
				if($n==2) $this->context->strokeStyle = 'Red';
				if($n==3) $this->context->strokeStyle = 'Red';//'orchid';
				if($n==4) $this->context->strokeStyle = 'Teal';
				if($n==5) $this->context->strokeStyle = 'Teal';//'HotPink';
				
				$this->context->lineWidth=1;
				if($n==0||$n==2) $this->context->lineWidth=1;
				$this->context->globalAlpha=1;
				foreach($vArr as $i => $value){
					$x = $this->getX($i);
					if($x<0) break;
					//$value = $vArr[$i];
					if($value==null || $value == 0) continue;
					$y = $this->getY3($value);
					if($i==0){
						$this->context->moveTo($x, $y);
						//$this->paintText("1/".$m ,$x+5,$y-8);
					} else{
						$this->context->lineTo($x, $y);
					}
				}
				$this->context->stroke();
				$this->context->globalAlpha=1;
				$n++;
			}
		
		}
		$flag=1;
		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i) - 0*50;
			if($x<0) break;
			$value = $this->rowPriceArr[$i][$vo1->close];
			if($value==null || $value == 0) continue;
			$y = $this->getY($value);
			
			if($indexArr!=null && $indexArr[$i]!=null){
				$indexCount=$indexArr[$i]["count"];
				$indexInc=$indexArr[$i]["inc"];
				if($indexInc<=50) $color="red";
				else $color="blue";
			}

			if($this->rowPriceArr[$i][$vo1->avg]>=1.0000 && $this->rowPriceArr[$i][$vo1->count]>=50){
			//if($this->rowPriceArr[$i]["prop"]>=0.40){
				//if($i%10==0){
				if($i==0){
					$x1=$this->getX($i+6);
					$y1=$this->getY($this->rowPriceArr[$i][$vo1->high])+0;
				}
				//}
				//if($flag==0){
				if($i==1){
					$this->paintText($this->rowPriceArr[$i][$vo1->codeFull] ,$x1+5,$y1-30-75);
					$this->paintText($this->viewStock->formatAvg($this->rowPriceArr[$i][$vo1->avg])." ".round($this->rowPriceArr[$i][$vo1->count]/10) ,$x1+5,$y1-20-75);
					if($indexInc!=null) $this->paintText($this->viewStock->formatInc($indexInc)." ".round($indexCount/10) ,$x1+5,$y1-10-75);
					$flag=1;
				}
				//} else {
				if($i==0){
					if($indexInc!=null) $this->paintText($this->viewStock->formatInc($indexInc)." ".round($indexCount/10) ,$x1+5,$y1-70);
					$this->paintText($this->viewStock->formatAvg($this->rowPriceArr[$i][$vo1->avg])." ".round($this->rowPriceArr[$i][$vo1->count]/10) ,$x1+5,$y1-60);
					$this->paintText($this->rowPriceArr[$i][$vo1->codeFull] ,$x1+5,$y1-50);
					$flag=0;
				}
				//}
			//}
			//if($i%10==0) {
				$this->context->beginPath();
				$this->context->fillStyle = 'Black';
				$this->context->arc($x-1, $this->getY($this->rowPriceArr[$i][$vo1->low])+5, 3, 0, 1 * Math::PI, false);
				$this->context->fill();
			}
		}
		*/
		
		$symbol=$this->symbol;
		$status = "";
		if($this->viewStock->hrefMap[$symbol]!=null) {
			$text = $this->viewStock->hrefMap[$symbol];
			$arr = explode("/",$text);
			$status = $arr[count($arr)-1];
			$status = str_replace(".chn","",$status);
			$status = str_replace("-"," ",$status);
		}
		$this->paintText("<div style='width:350px;color:black'><b>".$status."</b></div>", 20 , 30);////// 850 485
		
		return;
		$intervalArr=$this->viewStock->intervalArr;
		$percentArr=$this->viewStock->percentArr;
		for($k=0;$k<count($intervalArr)-1;$k++){
			$interval=$intervalArr[$k];
			$interval0=0;
			if($k!=0)$interval0=$intervalArr[$k-1];
			$x1 = $this->getX($interval0);
			$x2 = $this->getX($interval);
			$min=parseFloat($this->rowPriceArr[0]["min".$interval]);
			$max=parseFloat($this->rowPriceArr[0]["max".$interval]);
			for($i=-1;$i<count($percentArr);$i++){
				$this->context->beginPath();
				$this->context->strokeStyle = 'Black';
				$this->context->lineWidth=1;
				$f=($max - $min)/100;
				if($i==-1)$yyy=$min;
				else $yyy=$min+$f*$percentArr[$i];
				$y = $this->getY($yyy);
				//fb($yyy);
				$this->context->moveTo($x1, $y);
				$this->context->lineTo($x2, $y);
				$this->context->stroke();
			}
		}
	}
	public function setOnePrice(){
		$jSymbol=$this->viewDetail->divStock->find("[_tag2='symbolLeft'],[_tag2='symbolRight'],[_tag2='symbolLeft0'],[_tag2='symbolRight0']");
		//@ $jSymbol->each(function( $i, $obj ) {
			$jque = que($obj);

			if($jque->attr("_value") == $this->symbol){
				$tr=$jque->closest("tr");
				
				$this->divOnePrice->html("");
				$this->divOnePrice->html("<table>".$tr->html()."</table>");
				return;
			}
		//@ });
	}
	
	public $alpha = 70;
	public function paintCloseWeb(){ //return;
		$vo = new stock_VoPrice();
			
			$strokeStyle=imagecolorallocatealpha ($this->image, 0, 0, 0, 0);
			//if($this->isIndex==true) 
			//$strokeStyle = imagecolorallocatealpha ($this->image, 160, 32, 240,0);//'blue';
			$x0=null;$y0=null;
			$length = count($this->rowPriceArr);
			for($i=0; $i<$length; $i++){
				$x = $this->getX($i);
				if($x<10) break;
				$stockData = $this->rowPriceArr[$i];
				if($stockData["close"]==null || $stockData["close"] == 0) continue;
				$y = $stockData["close"];
				$y = $this->getY($y);
				if($i==0){
					//$this->context->moveTo($x, $y);
				} else{
					//$this->context->lineTo($x, $y);
					imageline($this->image, $x0, $y0, $x, $y, $strokeStyle);
				}
				$x0 = $x; $y0=$y;
			}
	}
	
	public function paintValue(){
		$vo1=$this->voPrice1;
		$this->context->restore();
		$this->context->globalAlpha=1;
		$vo = new stock_VoPrice();
		$thisw = $this->w;
		//$this->w = 3;
		if(1==1 || $this->w==5) for($i=0; $i<$this->rowPriceArr->length; $i++){
			$stockData = $this->rowPriceArr[$i];
			$vo->row = $stockData;
			$x = $this->getX($i);
			if($x< 0*(911-$this->padX1)) break;

			//$y2 = $vo->getLiveVolume();
			$y2=$stockData[$vo1->volume]*$stockData[$vo1->close];
			if($y2>=$this->maxStockDataY2/7) $y2=round($this->maxStockDataY2/7);
			if($y2==null) continue;
			if($x<$this->padX) break;
			if( $stockData[$vo1->close] >= $stockData[$vo1->open]) $this->context->fillStyle = 'Green';
			else $this->context->fillStyle = 'brown';
			if($this->w==2)$this->context->fillRect($x- 1, $this->getY2(0), $this->w , -$y2*$this->scaleY2);
			else $this->context->fillRect($x- ($this->w+1)/2, $this->getY2(0), $this->w , -$y2*$this->scaleY2);

			if($i==0){
				//$buyValue = $stockData->buyPrice3*$stockData->buyVolume3 + $stockData->buyPrice2*$stockData->buyVolume2 + $stockData->buyPrice1*$stockData->buyVolume1;
				//$sellValue = $stockData->sellPrice3*$stockData->sellVolume3 + $stockData->sellPrice2*$stockData->sellVolume2 + $stockData->sellPrice1*$stockData->sellVolume1;
				//$buyValue = 0;
				//$this->context->fillStyle = 'DodgerBlue';
				//$this->context->fillRect($x- ($this->w+1)/2, $this->getY2($y2), $this->w , -$buyValue*$this->scaleY2);
			}
		}

		$this->context->globalAlpha=1;
		$this->w = $thisw;
		return;
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i);
			if($x<$this->padX) break;
			$value = $this->rowPriceArr[$i][$vo1->maVolume];
			if($value==null) continue;
			$y = $this->getY2($value);
			if($i==0){
				$this->context->moveTo($x, $y);
			} else{
				$this->context->lineTo($x, $y);
			}
		}
		$this->context->stroke();
		
	}
	
	public function paintMa($limit){
		$voRe=$this->voRowPriceArr;
		$vo1=$this->voPrice1;
		$this->context->restore();
		$vo = new stock_VoPrice();
		
		for($k=6; $k>=1; $k--){
			if($limit!= null && $k!=1 && $k!=2 && $k!=3 && $k!=4 && $k!=5 && $k!=6) continue;
			if($k==1){
				//continue;
				$this->context->strokeStyle='Black';
				
				$this->context->strokeStyle='purple';
				$this->context->strokeStyle='hotpink';
				$this->context->strokeStyle='green';
				$this->context->strokeStyle='sienna';
				
				$this->context->strokeStyle='Red';
				$this->context->strokeStyle='blue';
			}
			else if($k==2){
				//continue;
				$this->context->strokeStyle='Olive ';
				$this->context->strokeStyle='blue';
				$this->context->strokeStyle='sienna';
				
				$this->context->strokeStyle='Red';
				$this->context->strokeStyle='blue';
			}
			else if($k==3){
				//continue;s
				$this->context->strokeStyle='blue';
				$this->context->strokeStyle='Red';
				$this->context->strokeStyle='Teal';
				
				$this->context->strokeStyle='blue';
				$this->context->strokeStyle='Red';
			}
			else if($k==4){
				//continue;
				$this->context->strokeStyle='black';
				$this->context->strokeStyle='Red';
				$this->context->strokeStyle='blue';
				$this->context->strokeStyle='Teal';
				
				$this->context->strokeStyle='blue';
				$this->context->strokeStyle='Red';
			}
			else if($k==5){
				//continue;
				$this->context->strokeStyle='black';
				$this->context->strokeStyle='purple';
				//$this->context->strokeStyle='sienna';
				$this->context->strokeStyle='Black';
			}
			else if($k==6){
				//continue;
				$this->context->strokeStyle='black';
				//$this->context->strokeStyle='sienna';
				$this->context->strokeStyle='black';
				
			}
						
			if($k==-4){
				
				for($j=2; $j<=3; $j++){
					$this->context->beginPath();
					$this->context->lineWidth=1;
					$this->context->globalAlpha=1;
					for($i=0; $i<$this->rowPriceArr->length; $i++){
						if($limit!=null && $i>=$limit) break;
						$x = $this->getX($i) - 0*50;
						if($this->padX == $this->padX1 && $x<0) break;
						if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
						$stockData = $this->rowPriceExArr[$i];
						$y = $stockData[$voRe->maC4] - $j*$stockData[$voRe->dev];
						if($y==null) break;
						$y = $this->getY($y);
						if($i==0){
							$this->context->moveTo($x, $y);
						} else{
							$this->context->lineTo($x, $y);
						}
					}
					$this->context->stroke();
				}
				
				for($j=2; $j<=3; $j++){
					$this->context->beginPath();
					$this->context->lineWidth=1;
					$this->context->globalAlpha=1;
					for($i=0; $i<$this->rowPriceArr->length; $i++){
						if($limit!=null && $i>=$limit) break;
						$x = $this->getX($i) - 0*50;
						if($this->padX == $this->padX1 && $x<0) break;
						if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
						$stockData = $this->rowPriceExArr[$i];
						$y = $stockData[$voRe->maC4] + $j*$stockData[$voRe->dev];
						if($y==null) break;
						$y = $this->getY($y);
						if($i==0){
							$this->context->moveTo($x, $y);
						} else{
							$this->context->lineTo($x, $y);
						}
					}
					$this->context->stroke();
				}
			}
			
			$this->context->globalAlpha=1;
			$this->context->beginPath();
			$this->context->lineWidth=2;
			///////if($this->w>=3) $this->context->lineWidth=2;
			
			for($i=0; $i<$this->rowPriceArr->length; $i++){
				if($limit!=null && $i>=$limit) break;
				$x = $this->getX($i) - 0*50;
				if($this->padX == $this->padX1 && $x<0) break;
				if($this->padX != $this->padX1 && $x< 0*(911-$this->padX1 + 20)) break;
				$stockData = $this->rowPriceExArr[$i];
				if($k==1) $y = $stockData[$voRe->maC1];
				else if($k==2) $y = $stockData[$voRe->maC2];
				else if($k==3) $y = $stockData[$voRe->maC3];
				else if($k==4) {
					$this->context->lineWidth=2;
					$y = $stockData[$voRe->maC4];
				}
				else if($k==5) $y = $stockData["ma01"];
				else if($k==6) $y = $stockData["ma02"];
				if($y==null) continue;
				$y = $this->getY($y);
				if($i==0){
					$this->context->moveTo($x, $y);
				} else{
					$this->context->lineTo($x, $y);
				}
			}
			$this->context->stroke();

		}
		$this->context->globalAlpha=1;
	}
	
	public function paintTable(){

		$this->context->restore();
		$stock_symbol = $this->symbol;
		$viewPrice = new stock_ViewPrice();

		$text = "
tdmua toiuu = tdmua cbcandle <br/>
tdban toiuu = <b style='color:red'>tcp min</b> <br/>
cpchia = 4 <br/>
cpchiacho max = 2
		";
		//$this->paintText("<b><span style='color:black'>".$stock_symbol.".".$this->rowPriceArr[0]["market"]."</span></b>", $this->width - 250, 60);
		$this->paintText("<b><span style='color:red'>".$viewPrice->formatPrice($this->rowPriceArr[0]["minClose"])."</span>_<span style='color:red;font-weight:bold'>".$viewPrice->formatPrice($this->rowPriceArr[0]["maxClose"])."</span>_<span style='color:red'>".$viewPrice->formatValue($this->rowPriceArr[0]["value2"])."</span></b>", $this->width - 160 - $this->padX, 0);
		$this->paintText("<b><span style='color:red'>".$viewPrice->formatPrice($this->rowPriceArr[0]["minClose20"])."</span>_<span style='color:red'>".$viewPrice->formatPrice($this->rowPriceArr[0]["megaCount"])."</span>_<span style='color:red'>".$viewPrice->formatValue($this->rowPriceArr[0]["value"])."</span></b>", $this->width - 160 - $this->padX, 20);
		$this->paintText("<span style='color:black'><b>".substr($stock_symbol,0,3).".".$this->rowPriceArr[0]["market"]."</b></span>", $this->width - 250 - $this->padX, 0)->css("width", 150);
		$status = "";
		if($this->hrefMap[$this->symbol]!=null) {
			$text = $this->hrefMap[$this->symbol];
			$arr = explode("/",$text);
			$status = $arr[count($arr)-1];
			$status = str_replace(".chn","",$status);
			$status = str_replace("-"," ",$status);
		}
		$this->paintText("<span style='color:black'><b>".$status."</b></span>", 0, 40)->css(array(
			 "width" => 756
			,"text-align" => "right"
		));
		
		if(stock_A::get()->isLive()){
			//$this->paintText("<span style='color:black'><b>".$text."</b></span>", $this->width - 300, 100)->css("width", 300);
		}

		//$this->paintText("<b><span style='color:black'>". $this->cand3Str ."</span></b>", $this->width - 250, 60);
		
		$this->context->restore();
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		/*
		$x = $this->getX(10);
		//$this->context->restore();
		$this->context->beginPath();
		$y1 = $this->getY($this->minStockDataY);
		$y2 = $this->getY($this->maxStockDataY);
		$this->context->moveTo($x, $y1);
		$this->context->lineTo($x, $y2);
		$this->context->stroke();
		*/
		$x1 = $this->getX(10);
		$x2 = $this->getX(20);
		
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=2;
		$y = $this->getY(1.00*$this->rowPriceArr[0]["min"]);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		$this->context->stroke();
		
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		$y = $this->getY(1.25*$this->rowPriceArr[0]["min"]);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		$this->context->stroke();
		
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		$y = $this->getY(1.50*$this->rowPriceArr[0]["min"]);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		$this->context->stroke();
		
		$this->context->beginPath();
		$this->context->strokeStyle = 'Black';
		$this->context->lineWidth=1;
		$y = $this->getY(2.00*$this->rowPriceArr[0]["min"]);
		$this->context->moveTo($x1, $y);
		$this->context->lineTo($x2, $y);
		$this->context->stroke();
		
		
		return;
	}

	public function paintOxy(){
		$this->context->restore();
		$this->context->beginPath();
		$this->context->strokeStyle = 'black';
		$this->context->globalAlpha = 1;
		$this->context->lineWidth = 1;
		//Draw Oy
		$ox = 0;
		$ox2 = $this->width - $this->ox;
		$this->context->moveTo($ox, $this->getY($this->minStockDataY) + $this->padY);
		$this->context->lineTo($ox, $this->getY($this->maxStockDataY));
		$this->context->moveTo($ox2, $this->getY($this->minStockDataY) + $this->padY);
		$this->context->lineTo($ox2, $this->getY($this->maxStockDataY));

		$one = ($this->maxStockDataY - $this->minStockDataY)/($this->stickY-1);
		for($value=$this->minStockDataY; $value<=$this->maxStockDataY; $value = $value+$one){
			$y = $this->getY($value);
			if($y-8<=0 || $y>=$this->getY($this->minStockDataY)) continue;
			/*$this->context.moveTo(ox, y);
			 $this->context.lineTo(ox-8, y);
			 $this->paintText(Math.jsmlRound(value,0), ox - $this->ox, y - 8);
			 */
			$this->context->moveTo($ox2, $y);
			$this->context->lineTo($ox2+4, $y);
			//\\$this->paintText(round($value,1), $ox2 + $this->ox - 34, $y - 8);
		}

		//draw Ox
		$y = $this->getY($this->minStockDataY);// + $this->padY;
		$this->context->moveTo($ox, $y);
		$this->context->lineTo($ox2, $y);

		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i);
			if($x<$this->padX) break;
			if($i%$this->ma3==0){
				$this->context->moveTo($x, $y);
				$this->context->lineTo($x, $y + 8 );
				$stockDate = $this->rowPriceArr[$i]->stockDate;
				if($this->w==1){
					$stockDate = substr($stockDate, 0, 7);
				}
				//if($x - 40>=0) $this->paintText($stockDate, $x - 40, $y + 8);
			}
			/*if(i==$this->ma2 || i==$this->ma1){
				$this->context.moveTo(x, y);
				$this->context.lineTo(x, $this->getY($this->maxStockDataY) );
				}*/
		}

		$this->context->closePath();
		$this->context->stroke();


		for($i=0; $i<$this->rowPriceArr->length; $i++){
			$x = $this->getX($i);
			if($x<$this->padX) break;
			//if(($i==-1) ){// || ((substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate2 || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate3 || substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate4) )){
			if($i==20 || $i==40 || $i==20 || $i==40){
				if($i==120) $this->context->strokeStyle='Green';
				if($i==20) $this->context->strokeStyle='Purple';
				if($i==40) $this->context->strokeStyle='Teal';
				if($i==60) $this->context->strokeStyle='Sienna';
				//if(substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate ) $this->context->strokeStyle='Purple';
				//if(substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate2 ) $this->context->strokeStyle='Sienna';
				//if(substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate3 ) $this->context->strokeStyle='Teal';
				//if(substr($this->rowPriceArr[$i]->stockDate,0,10) == stock_ViewChart::$startDate4 ) $this->context->strokeStyle='Green';
				//if($i==10) 
				//if($this->w==1) continue;
				$this->context->restore();
				$this->context->beginPath();
				$this->context->strokeStyle='Red';				
				$this->context->globalAlpha=1;
				$this->context->lineWidth=1;
				$this->context->moveTo($x, $y);
				$this->context->lineTo($x, $this->getY($this->maxStockDataY) );
				$this->context->closePath();
				$this->context->stroke();
			}
		}
		return;
	}
	
	public function makeMa($limit){
		$vo1 = $this->voPrice1;
		$length = count($this->rowPriceArr);

		for($i=0; $i<$length; $i++){
			if($limit != null && $i >= $limit) break;
			if($this->rowPriceExArr[$i]["ma1"] != null
			&& $this->rowPriceExArr[$i]["ma2"] != null
			&& $this->rowPriceExArr[$i]["ma3"] != null
			&& $this->rowPriceExArr[$i]["ma4"] != null
			&& $this->rowPriceExArr[$i]["ma5"] != null
			&& $this->rowPriceExArr[$i]["ma6"] != null
			) continue;
			$value = 0;
			for($j=0; $j<=$this->ma6-1; $j++){
				if($i+$j >= $length) break;
				$stockData = $this->rowPriceArr[$i+$j];
				$value += $stockData[$vo1->close];
				if($j==$this->ma1-1) {
					$this->rowPriceExArr[$i]["ma1"] = $value/$this->ma1;
				} else if($j==$this->ma2-1) {
					$this->rowPriceExArr[$i]["ma2"] = $value/$this->ma2;
				} else if($j==$this->ma3-1) {
					$this->rowPriceExArr[$i]["ma3"] = $value/$this->ma3;
				} else if($j==$this->ma4-1) {
					$this->rowPriceExArr[$i]["ma4"] = $value/$this->ma4;
				} else if($j==$this->ma5-1) {
					$this->rowPriceExArr[$i]["ma5"] = $value/$this->ma5;
				} else if($j==$this->ma6-1) {
					$this->rowPriceExArr[$i]["ma6"] = $value/$this->ma6;
				} 
			}
		}
		
		for($i=0; $i<$length; $i++){
			if($limit != null && $i >= $limit) break;
			for($k=1;$k<=6;$k++){
				if($k==1) $ma=$this->ma1;
				if($k==2) $ma=$this->ma2;
				if($k==3) $ma=$this->ma3;
				if($k==4) $ma=$this->ma4;
				if($k==5) $ma=$this->ma5;
				if($k==6) $ma=$this->ma6;
				$maStr="ma".$k;
				if($this->rowPriceExArr[$i][$maStr]==null) continue;
				
				$value = 0;
				for($j=0; $j<=$ma-1; $j++){
					if($i+$j >= $length) break;
					$stockData = $this->rowPriceExArr[$i+$j];
					$value += pow($stockData[$vo1->close]-$this->rowPriceExArr[$i][$maStr] ,2);
					if($j==$ma-1) {
						$this->rowPriceExArr[$i][$maStr."E"] = 1*pow($value/$ma ,1/2);
					} 
				}
			}
		}
	}
	
	public function makePrice($limit){
		$vo = new stock_LivePriceVo();
		$length = count($this->rowPriceArr);
		for($i=0; $i<$length - 1; $i++){
			if($limit != null && $i >= $limit) break;
			if($this->rowPriceArr[$i+1]["close"]!=0) $this->rowPriceArr[$i]["closePercent"] = 100*($this->rowPriceArr[$i]["close"] - $this->rowPriceArr[$i+1]["close"])/$this->rowPriceArr[$i+1]["close"];
		}
	}
	
	public function makeFirst(){
		$length = count($this->rowPriceArr);
		if($length == 0) return;
		$liveValue = 0;
		$value0 = 0;
		$value2 = 0;
		$closePer = -99;
		$value2Count = 0;
		$count1 = 0;
		$count2 = 0;
		$count3 = 0;
		$count4 = 0;
		$megaCount1 = 0;
		$megaCount2 = 0;
		$megaCount3 = 0;
		$megaCount4 = 0;
		$PERCENT = 4;
		$volume1 = 0;
		$volumeCount = 0;
		$maClose1 = 0;
		$maClose2 = 0;
		$maClose3 = 0;
		$maClose4 = 0;
		
		$vo = new stock_VoPrice();
		for($i=0; $i < $length; $i++){
			if($this->rowPriceArr[$i+1]==null || $this->rowPriceArr[$i+1]["close"]==0 || $this->rowPriceArr[$i]["close"]==0) continue;
			$vo->row = $this->rowPriceArr[$i];
			$delta = 100*($this->rowPriceArr[$i]["close"] - $this->rowPriceArr[$i+1]["close"]) / $this->rowPriceArr[$i+1]["close"];
			$deltaAbs = abs($delta);
			if($deltaAbs >= 15){
				//$this->rowPriceArr[0]["isDevided"] = 1;
				continue;
			}

			if($i<12*20){
				$megaCount4 += $deltaAbs;
				$count4++;
			
				$volume1 += $this->rowPriceArr[$i]["volume"];
				$volumeCount ++;
				$maClose4 += $this->rowPriceArr[$i]["close"];
			}
			if($i<$this->ma3){
				$megaCount3 += $deltaAbs;
				$count3++;
				$maClose3 += $this->rowPriceArr[$i]["close"];
			}
			if($i<$this->ma2){
				$megaCount2 += $deltaAbs;
				$count2++;
				$maClose2 += $this->rowPriceArr[$i]["close"];
			}
			if($i==0) {
				$value0 = $vo->getValue();
				$liveValue = $vo->getLiveValue();
				$closePer = $vo->getClosePer();
			}
			if($i<5){
				$value2 += $vo->getLiveValue();
				$value2Count ++;
			}
			if($i<$this->ma1){
				$megaCount1 += $deltaAbs;
				$count1++;
				$maClose1 += $this->rowPriceArr[$i]["close"];
			}
		}
		
		if($count4!=0) {
			$megaCount4 = ($megaCount4)/$count4;
			$maClose4 = $maClose4/$count4;
		}
		if($count3!=0) {
			$megaCount3 = ($megaCount3)/$count3;
			$maClose3 = $maClose3/$count3;
		}
		if($count2!=0) {
			$megaCount2 = ($megaCount2)/$count2;
			$maClose2 = $maClose2/$count2;
		}
		if($count1!=0) {
			$megaCount1 = ($megaCount1)/$count1;
			$maClose1 = $maClose1/$count1;
		}
		if($volumeCount!=0) $volume1 = $volume1/$volumeCount;
		
		$megaCount = $megaCount4;
		//if($megaCount3 > $megaCount) $megaCount = $megaCount3;
		//if($megaCount2 > $megaCount) $megaCount = $megaCount2;
		//if($megaCount1 > $megaCount) $megaCount = $megaCount1;
		$this->rowPriceArr[0]["megaCount"] = $megaCount;
		//$this->rowPriceArr[0]["megaCount4"] = $megaCount4;
		//$this->rowPriceArr[0]["megaCount3"] = $megaCount3;
		//$this->rowPriceArr[0]["megaCount2"] = $megaCount2;
		//$this->rowPriceArr[0]["megaCount1"] = $megaCount1;
		$this->rowPriceArr[0]["volume1"] = $volume1;
		
		if($value2Count!=0) $value2 = $value2/$value2Count;
		else $value2 = 0;
		$this->rowPriceArr[0]["value"] = $value0;
		$this->rowPriceArr[0]["value2"] = $value2;
		if($value2!=0) $this->rowPriceArr[0]["valuePercent"] = round(100*$value0/$value2);
		$this->rowPriceArr[0]["liveValue"] = $liveValue;
		$this->rowPriceArr[0]["closePer"] = $closePer;
		$this->rowPriceArr[0]["maClose1"] = $maClose1;
		$this->rowPriceArr[0]["maClose2"] = $maClose2;
		$this->rowPriceArr[0]["maClose3"] = $maClose3;
		$this->rowPriceArr[0]["maClose4"] = $maClose4;
		
		$this->rowPriceArr[0]["upCount"] = 0;
		$PERCENT = 0.99;
		if($this->rowPriceArr[0]["maClose4"]!=0){
			if( $this->rowPriceArr[0]["close"]   >= $PERCENT * $this->rowPriceArr[0]["maClose4"]){
				$this->rowPriceArr[0]["upCount"] ++;
			}
			if($this->rowPriceArr[0]["maClose1"] >= $PERCENT * $this->rowPriceArr[0]["maClose4"]){
				$this->rowPriceArr[0]["upCount"] ++;
			}
			if($this->rowPriceArr[0]["maClose2"] >= $PERCENT * $this->rowPriceArr[0]["maClose4"]){
				$this->rowPriceArr[0]["upCount"] ++;
			}
			if($this->rowPriceArr[0]["maClose3"] >= $PERCENT * $this->rowPriceArr[0]["maClose4"]){
				$this->rowPriceArr[0]["upCount"] ++;
			}
		}
		$min = 999999;
		$imin = 0;
		$max = 0;
		$imax = 0;
		$length = count($this->rowPriceArr);
		for($i=0; $i < $length; $i++){
			if($i <= 10){
				if($this->rowPriceArr[$i]["close"] < 1 * $min){
					$min = $this->rowPriceArr[$i]["close"];
					$imin = $i;
				}
			}

			if($this->rowPriceArr[$i]["close"] > $max){
				$max = $this->rowPriceArr[$i]["close"];
				$imax = $i;
			}
		}
		$this->rowPriceArr[0]["maxClose20"] = 0;
		if($this->rowPriceArr[0]["close"]!=0) $this->rowPriceArr[0]["maxClose20"] = 100*($max - $this->rowPriceArr[0]["close"])/$this->rowPriceArr[0]["close"];
		$this->rowPriceArr[0]["imax20"] = $imax;
		
		$this->rowPriceArr[0]["minClose20"] = 0;
		if($min!=0) $this->rowPriceArr[0]["minClose20"] = 100*($this->rowPriceArr[0]["close"] - $min)/$min;
		$this->rowPriceArr[0]["imin20"] = $imin;
		
		
		$min60 = 999999;
		$imin60 = 0;
		
		$min5 = 999999;
		$max5 = 0;
		
		$max60 = 0;
		$imax60 = 0;
		$max602 = 0;
		$imax602 = 0;
		
		$min = 999999;
		$imin = 0;
		
		$max0 = 0;
		$imax0 = 0;
		
		$max = 0;
		$imax = 0;
		
		$min2 = 999999;
		$imin2 = 0;
		
		$max2 = 0;
		$imax2 = 0;
		
		for($i=0; $i < $length; $i++){
			if($i > 10) break;
			if($this->rowPriceArr[$i]["close"] <= $min5){
				$min5 = $this->rowPriceArr[$i]["close"];
			}
		}
		for($i=0; $i < $length; $i++){
			if($i > 10) break;
			if($this->rowPriceArr[$i]["close"] >= $max5){
				$max5 = $this->rowPriceArr[$i]["close"];
			}
		}
		
		for($i=0; $i < $length; $i++){
			if($i >= 6*20) break;
			if($this->rowPriceArr[$i]["close"] <= $min60){
				$min60 = $this->rowPriceArr[$i]["close"];
				$imin60 = $i;
			}
		}
		for($i=0; $i < $length; $i++){
			if($i >= 6*20) break;
			if($this->rowPriceArr[$i]["close"] >= $max60){
				$max60 = $this->rowPriceArr[$i]["close"];
				$imax60 = $i;
			}
		}
		for($i=0; $i <= $imin60; $i++){
			if($i >= 6*20) break;
			if($this->rowPriceArr[$i]["close"] >= $max602){
				$max602 = $this->rowPriceArr[$i]["close"];
				$imax602 = $i;
			}
		}
		
		for($i=0; $i < $length; $i++){
			$x = $this->getX($i);
			if($x<$this->padX) break;
			if($this->rowPriceArr[$i]["close"] < $min){
				$min = $this->rowPriceArr[$i]["close"];
				$imin = $i;
			}
			
			if($this->rowPriceArr[$i]["close"] > $max0){
				$max0 = $this->rowPriceArr[$i]["close"];
				$imax0 = $i;
			}
			
		}
		
		for($i=0; $i <= $imin; $i++){
			if($this->rowPriceArr[$i]["close"] > $max){
				$max = $this->rowPriceArr[$i]["close"];
				$imax = $i;
			}
		}
		
		for($i=0; $i <= $imax; $i++){
			if($this->rowPriceArr[$i]["close"] < $min2){
				$min2 = $this->rowPriceArr[$i]["close"];
				$imin2 = $i;
			}
		}
		
		for($i=0; $i <= $imin2; $i++){
			if($this->rowPriceArr[$i]["close"] > $max2){
				$max2 = $this->rowPriceArr[$i]["close"];
				$imax2 = $i;
			}
		}
		
		$this->rowPriceArr[0]["minClose"] = 0;
		$this->rowPriceArr[0]["maxClose"] = 0;
		$this->rowPriceArr[0]["minMax"] = 0;
		//if($min!=0) $this->rowPriceArr[0]["minClose"] = 100*($this->rowPriceArr[0]["close"] - $min)/$min;
		///if($this->rowPriceArr[0]["close"]!=0 && $min!=0) $this->rowPriceArr[0]["minMax"] = 100*($max0 - $min)/$min;
		if($this->rowPriceArr[0]["close"]!=0 && $min5!=0) $this->rowPriceArr[0]["minMax"] = 100*($max5 - $min5)/$min5;
		if($this->rowPriceArr[0]["close"]!=0 && $min5!=0) $this->rowPriceArr[0]["minMax5"] = 100*($max5 - $min5)/$min5;
		$this->rowPriceArr[0]["min"] = $min60;
		$this->rowPriceArr[0]["max0"] = $max0;
		//if($min2!=0) $this->rowPriceArr[0]["minClose"] = 100*($this->rowPriceArr[0]["close"] - $min2)/$min2;
		//if($min!=0) $this->rowPriceArr[0]["minClose"] = 100*($this->rowPriceArr[0]["close"] - $min)/$min;
		if($min5!=0) $this->rowPriceArr[0]["minClose"] = 100*($this->rowPriceArr[0]["close"] - $min5)/$min5;
		if($min5!=0) $this->rowPriceArr[0]["maxClose"] = 100*($max5 - $this->rowPriceArr[0]["close"])/$this->rowPriceArr[0]["close"];
		
		for($k=0; $k<$length; $k++){
			
			$min5=9999999;
			for($i=$k+1; $i <= $k+10; $i++){
				if($i>=$length) break;
				if($this->rowPriceArr[$i]["close"] <= $min5){
					$min5 = $this->rowPriceArr[$i]["close"];
				}
			}
			$max5=0;
			for($i=$k+1; $i <= $k+10; $i++){
				if($i>=$length) break;
				if($this->rowPriceArr[$i]["close"] >= $max5){
					$max5 = $this->rowPriceArr[$i]["close"];
				}
			}
			$minClose5=100*($this->rowPriceArr[$k]["close"] - $min5)/$min5;
			$minMax5=100*($max5 - $min5)/$min5;
		
			$breakOut=0;
			$gtCount=0;
			for($i=$k+1; $i <= $k+10; $i++){
				if($i>=$length) break;
				if($this->rowPriceArr[$k]["close"] >= $this->rowPriceArr[$i]["close"]) $gtCount++;
			}
			if($gtCount>=7) $breakOut=1;
			if($minMax5 >= 20) $breakOut=0;
			$this->rowPriceArr[$k]["breakOut"]=$breakOut;
		
		}
		
		/*
		for($k=0; $k<$length; $k++){
			$breakOut=1;
			if($this->rowPriceArr[$k]["ma4"]==null) break;
			if($this->rowPriceArr[$k]["close"]<$this->rowPriceArr[$k]["ma1"]) $breakOut=0;
			if($this->rowPriceArr[$k]["close"]<$this->rowPriceArr[$k]["ma2"]) $breakOut=0;
			if($this->rowPriceArr[$k]["close"]<$this->rowPriceArr[$k]["ma3"]) $breakOut=0;
			if($this->rowPriceArr[$k]["close"]<$this->rowPriceArr[$k]["ma4"]) $breakOut=0;
			
			$min5=9999999;
			for($i=$k; $i < $k+10; $i++){
				if($this->rowPriceArr[$i]["close"] <= $min5){
					$min5 = $this->rowPriceArr[$i]["close"];
				}
			}
			$max5=0;
			for($i=$k; $i < $k+10; $i++){
				if($this->rowPriceArr[$i]["close"] >= $max5){
					$max5 = $this->rowPriceArr[$i]["close"];
				}
			}
			$minClose5=100*($this->rowPriceArr[$k]["close"] - $min5)/$min5;
			$minMax5=100*($max5 - $min5)/$min5;
			
			$MIN_CLOSE=10;
			$MIN_MAX=15;
			if($this->rowPriceArr[$k]["symbol"]=="VNINDEX"){
				break;
				$MIN_CLOSE=4;
				$MIN_MAX=7;
			}
			if($this->rowPriceArr[$k]["symbol"]=="HAINDEX"){
				break;
				$MIN_CLOSE=4;
				$MIN_MAX=7;
			}
			
			//if($minClose5 >=$MIN_CLOSE) $breakOut=0;
			if($minMax5 >=$MIN_MAX) $breakOut=0;
			$this->rowPriceArr[$k]["breakOut"]=$breakOut;
			//<
			break;
			//>
		}
		*/
	}
}
