<?php
import("stock_Ao");
import("stock_ObJfile");
import("stock_ViewPrice");
import("stock_ViewDetail");
import("stock_ViewTrade");
import("stock_VoPrice");
class stock_ViewStock{
	public function con(){
		$this->ao=stock_Ao::get();
		$this->obJfile=$this->ao->bean("stock_ObJfile/con");
		$this->viewPrice=$this->ao->bean("stock_ViewPrice/con");
		$this->viewDetail=$this->ao->bean("stock_ViewDetail/con");
		$this->viewChart=$this->ao->bean("stock_ViewChart/con");
		$this->viewTrade=$this->ao->bean("stock_ViewTrade/con");
		$this->voPrice=$this->ao->bean("stock_VoPrice/con");
		$this->voPrice1=$this->ao->bean("stock_VoPrice/con1");
		$this->voPrice2=$this->ao->bean("stock_VoPrice/con2");
		$this->voPrice3=$this->ao->bean("stock_VoPrice/con3");
		$this->voStock=get(new stock_Vo())->_con("rate,value2,perValue,trade,live,perHigh,perMa,minClose,perMinMax,perMinMax2,code,bv,roe,ff2","");//7
		
		$this->voRowPriceArr=get(new stock_Vo())->_con("value2,perValue,code,perMa,minClose,perMinMax,perMinMax2,perHigh","");
		$this->voStat=get(new stock_Vo())->_con("total,avg","");
		
		
		$this->capital=1000000000;
		$this->fnum=30;
		$this->countMax=10;
		$this->incTest=20;
		$this->minTradeChart=0.5;
		$this->maxTradeChart=2.5;
		$this->buyValue=$this->capital/($this->fnum*1000);
		$this->dayback=0*180;
		
		$this->firstRun=true;
		
		//$this->intervalArr = array(10,30,60,60);
		//$this->intervalArr = array(5,15,60,60);
		//$this->intervalArr = array(8,15,26,40);
		$this->intervalArr = array(8,21,34,55);//5 8 13 21 34 55 89
		//$this->percentArr = array(30,70,100,100);
		$this->percentArr = array(20,50,80,100);
		$this->valueOff=300000;
		$this->stockMap=array(
		);
		$this->_stockMap=array(
		);
		$this->indexArr=array();
		$this->hrefMap=array(
		);
//<@	
		$this->makeConf($this->loadConf());
//@>		
		return $this;
	}
	public function view(){
		if($this->jque!=null) return $this;
?><!--$html-->
<div>
<div id="divNav" style="display:none;">
	<button value="stock">Stock</button>
	<button value="detail">Detail</button><br/>
</div>
<div id="divStock" style="display:none;">
</div>
<div id="divDetail" style="display:;">
</div>
<!--/$html--><?
		$this->jque=que($html)->appendTo("body");
		$this->divStock=$this->jque->find("#divStock");
		
		$this->divDetail=$this->jque->find("#divDetail");
		$this->viewDetail->view()->jque->appendTo($this->divDetail);
		
		$this->divNav=$this->jque->find("#divNav");
		
		//@ $this->divStock->bind("click", function($event){ $this->onclickDivStock($event); });
		//@ $this->divNav->bind("click", function($event){ $this->onclickDivNav($event); });
		//@ que($this)->bind("rpc.rpcStockMap", function($event, $result){ $this->onrpcStockMap($event, $result); });
		//@ que($this)->bind("rpc.rpcTradeCap", function($event, $result){ $this->onrpcTradeCap($event, $result); });
		//@ que($this)->bind("rpc.rpcCon", function($event, $result){ $this->onrpcCon($event, $result); });
		$this->rpcStockMap();
		$this->rpcCon();
		$this->viewDetail->buttonList->click();
		//@ que($this)->bind("rpc.rpcConf", function($event, $result){ $this->onrpcConf($event, $result); });
		//@ que($this)->bind("rpc.rpcTradeCap2", function($event, $result){ $this->onrpcTradeCap2($event, $result); });
		//@ $this->viewDetail->buttonConf->bind("click", function($event){ $this->onclickButtonConf($event); });
		//@ $this->viewDetail->buttonLink->bind("click", function($event){ $this->onclickButtonLink($event); });
		//@ $this->viewDetail->buttonOverview->bind("click", function($event){ $this->onclickButtonOverview($event); });
		
		//@ setInterval(function(){
			if($this->viewDetail->isRun==0) return;
			if($this->stockMapTime!=null){
				$time=round((new Date() - $this->stockMapTime)/1000 ,0);
				$__doc->title = $time."+".$this->stockMapTitle;
				if($time>=25) {
					$__doc->title="Reload";
					//$this->stockMapTime=null;
					//$this->xhrStockMap->abort();
					//$this->rpcStockMap();
					$this->restartStockMap();
				}
				
				$str="<span style='background-color:blue;color:white;'>".$time."</span>";
				$this->divStock->find("[_tag='volume0']")->html($str);
				$this->viewDetail->divStock->find("[_tag='volume0']")->html($str);
			}
		//@ },1000);
		return $this;
	}
	
	public function rpcCon(){
//<@ $this->json();
		$re["strConf"]=$this->loadConf();
		$re["tradeMap"]=$this->obJfile->loadStr("stock_ViewStock/tradeMap");
		/*$re["tradeFullMap"]=array(
			"capMap"=>$this->obJfile->load("stock_ViewTrade/capMap")
			,"indexArr"=>$this->obJfile->load("stock_ViewTrade/indexArr")
		);*/
		$re["hrefMap"]=$this->obJfile->load("stock_ViewStock/hrefMap");
		return $re;
//@>
	}
	public function onrpcCon($event,$result){
		$strConf=$result["strConf"];
		$this->viewDetail->textConf->prop("value",$strConf);
		$this->makeConf($strConf);
		
		$this->viewDetail->textTrade->prop("value",$result["tradeMap"]);
		
		//$this->tradeFullMap=$result["tradeFullMap"];
		$this->hrefMap=$result["hrefMap"];
	}
	
	public function onclickButtonOverview($event){
		$symbol=$this->viewDetail->symbol;
		if($this->ao->isNullEmpty($symbol)) return;
		$href = $this->hrefMap[$symbol];
		if($href == null) $href = "http://cafef.vn";
		//$href="http://m.cophieu68.vn/profilesymbol.php?id=".$symbol;
		$this->winOverview = $__window->open($href,"__aOverview");
	}
	public function onclickButtonLink($event){
		$symbol=$this->viewDetail->symbol;
		if($this->ao->isNullEmpty($symbol)) return;
		if($this->winOverview == null) return;
		setTimeout(function () {
			if(confirm("Link:".$symbol . "|".$this->winOverview->location->href)){
				$this->rpcHrefSave($symbol, $this->winOverview->location->href);
				$this->hrefMap[$symbol] = $this->winOverview->location->href;
			};
		}, 0);
	}
	public function rpcHrefSave($symbol, $href){
//<@ $this->json($symbol, $href);
		$hrefMap = $this->obJfile->load("stock_ViewStock/hrefMap");
		$hrefMap[$symbol] = $href;
		$this->obJfile->save("stock_ViewStock/hrefMap", $hrefMap);
		if($this->ao->canSaveAppfog()){
			$url="http://cophieu.ap01.aws.af.cm/j.php?s=stock_ViewStock/rpcHrefSave";
			$client = new Zend_Http_Client($url);
			$paramArray=array($symbol, $href);
			$client->setParameterPost('paramArray', json_encode($paramArray));
			$body=$client->request("POST")->getBody();
		}
//@>
	}
	public function makeConf($strConf){
		//$strConf=$this->viewDetail->textConf->prop("value");
		if($strConf==null||$strConf==""){
			return;
		}
		$conf=array(
		);
		eval($strConf);
		$this->conf=$conf;
		
		$this->capital=$this->conf["capital"];
		$this->fnum=$this->conf["fnum"];
		//$this->countMax=$this->conf["countMax"];
		//$this->incTest=$this->conf["incTest"];
		//$this->minTradeChart=$this->conf["minTradeChart"];
		//$this->maxTradeChart=$this->conf["maxTradeChart"];
		$this->buyValue=$this->capital/($this->fnum*1000);
		$this->dayback=$this->conf["dayback"];
		$this->viewChart->w=$this->conf["w"];
		
		$this->ao->conf=$this->conf;
		
	}
	
	public function onclickButtonConf($event){
		$strConf=$this->viewDetail->textConf->prop("value");
		$strTradeMap=$this->viewDetail->textTrade->prop("value");
		$choice=prompt("blank for all", "conf");
		if($choice==null) return;
		if($choice=="conf") $strTradeMap=null;
		$map=array(
			"strConf"=>$strConf,
			"strTradeMap"=>$strTradeMap
		);
		$this->rpcConf( $map );
	}
	public function rpcConf( $map ){
//<@ $this->json($map);
		$strConf=$map["strConf"];
		$strTradeMap=$map["strTradeMap"];
		$this->obJfile->save("stock_ViewDetail/strConf",$strConf);
		if($strTradeMap!=null) $this->obJfile->saveStr("stock_ViewStock/tradeMap",$strTradeMap);
		else $map["strTradeMap"]=$this->obJfile->loadStr("stock_ViewStock/tradeMap");
		$this->makeConf($this->loadConf());
		if($this->ao->canSaveAppfog()){
			$url="http://cophieu.ap01.aws.af.cm/j.php?s=stock_ViewStock/rpcConf";
			//$url='http://127.0.0.1/stock/j.php?s=stock_ViewStock/rpcTradeCapAppfog';
			$client = new Zend_Http_Client($url);
			$paramArray=array($strConf);
			$client->setParameterPost('paramArray', json_encode($paramArray));
			$body=$client->request("POST")->getBody();
		}
		return $map;
//@>
	}
	public function onrpcConf($event ,$result){
		$strConf=$result["strConf"];
		$strTradeMap=$result["strTradeMap"];
		$this->viewDetail->textConf->prop("value",$strConf);
		$this->viewDetail->textTrade->prop("value",$strTradeMap);
		$this->makeConf($strConf);
		$this->viewDetail->buttonList->click();
	}
	public function loadConf(){
		$strConf=$this->obJfile->load("stock_ViewDetail/strConf");
		return $strConf;
	}
	
	public function onclickDivStock($event){
		$target = que($event->target);
		if($target->attr("_tag2")=="symbolLeft" || $target->attr("_tag2")=="symbolRight"){
			$this->viewDetail->onclickDivStock($event);
			$this->divNav->find("[value='detail']")->click();
		}
	}
	public function onclickDivNav($event){
		$target = que($event->target);
		$value=$target->val();
		if($value=="stock"){
			$this->divDetail->css("display","none");
			$this->divStock->css("display","");
		}
		else if($value=="detail"){
			$this->divDetail->css("display","");
			$this->divStock->css("display","none");
			que("body,html")->scrollLeft(-999990);
			que("body,html")->scrollTop(0);
		}
	}
	
	public function getRowSymbolArr(){
//<@
		$sql = "SELECT DISTINCT symbol FROM stock_price
		";
		$stm = $this->ao->pdo->prepare($sql);
		$stm->execute();
		$rowSymbolArr = $stm->fetchAll(PDO::FETCH_NUM);
		return $rowSymbolArr;
//@>
	}
	public function getRowSymbolArrByValue(){
//<@
		$sql = "SELECT p2.symbol FROM stock_price p2 
			WHERE p2.stockDate>=DATE_SUB(NOW(), INTERVAL 14 DAY) 
			GROUP BY p2.symbol 
			HAVING AVG(1*p2.close*p2.volume) > ".$this->valueOff."
		";
		//HAVING AVG(1*p2.close*p2.volume) > ".$this->valueOff." OR SYMBOL IN (".$this->ao->conf["future"].")
		//echo $sql;
		$stm = $this->ao->pdo->prepare($sql);
		$stm->execute();
		$rowSymbolArr = $stm->fetchAll(PDO::FETCH_NUM);
		return $rowSymbolArr;
//@>
	}
			
	public function getRowPriceArr($vo, $symbol,$day=null){
//<@	
		if($day!=null){
			if($this->dayback!=0) $str="AND stockDate <= DATE_SUB(NOW(), INTERVAL ".$this->dayback." DAY)";
			else $str="";
			$sql = "SELECT ".$vo->strField." FROM stock_price 
			WHERE symbol = :symbol AND stockDate >= DATE_SUB(NOW(), INTERVAL ( ".$day."+".$this->dayback.") DAY)".$str."ORDER BY stockDate DESC
			";
		} else {
			$sql = "SELECT ".$vo->strField." FROM stock_price 
			WHERE symbol = :symbol AND stockDate >= '2009-01-01'
			ORDER BY stockDate DESC
			";
		}
		$stm = $this->ao->pdo->prepare($sql);
		$stm->execute(array("symbol"=>$symbol));
		$rowPriceArr = $stm->fetchAll(PDO::FETCH_NUM);
		/*
		$len=count($rowPriceArr);
		for($i=0; $i<$len; $i++){
			$rowPriceArr[$i][$vo->open] = (double)$rowPriceArr[$i][$vo->open];
			$rowPriceArr[$i][$vo->high] = (double)$rowPriceArr[$i][$vo->high];
			$rowPriceArr[$i][$vo->low] = (double)$rowPriceArr[$i][$vo->low];
			$rowPriceArr[$i][$vo->close] = (double)$rowPriceArr[$i][$vo->close];
			$rowPriceArr[$i][$vo->volume] = (int)$rowPriceArr[$i][$vo->volume];
		}
		
		return $rowPriceArr;
		*/
		$rat=1;
		$len=count($rowPriceArr);
		for($i=0; $i<$len; $i++){
			$rowPriceArr[$i][$vo->open] = round($rat*$rowPriceArr[$i][$vo->open],2);
			$rowPriceArr[$i][$vo->high] = round($rat*$rowPriceArr[$i][$vo->high],2);
			$rowPriceArr[$i][$vo->low] = round($rat*$rowPriceArr[$i][$vo->low],2);
			$rowPriceArr[$i][$vo->close] = round($rat*$rowPriceArr[$i][$vo->close],2);
			$rowPriceArr[$i][$vo->volume] = (int)$rowPriceArr[$i][$vo->volume];
			
			if($this->isNull0($rowPriceArr[$i][$vo->close])) break;
			if($this->isNull0($rowPriceArr[$i+1][$vo->close])) break;
			
			$per = $rowPriceArr[$i+1][$vo->close]/$rowPriceArr[$i][$vo->open];
			if($rat==1 && $per >= 1.11 ){
				$rat=1.02*$rowPriceArr[$i][$vo->open]/$rowPriceArr[$i+1][$vo->close];
			}
		}
		
		return $rowPriceArr;
//@>
	}
	public function getRowPriceArrS($vo, $symbol,$day=null){
//<@
		if($day!=null){
			if($this->dayback!=0) $str="AND stockDate <= DATE_SUB(NOW(), INTERVAL ".$this->dayback." DAY)";
			else $str="";
			$sql = "SELECT ".$vo->strField." FROM stock_price 
			WHERE symbol = :symbol AND stockDate >= DATE_SUB(NOW(), INTERVAL ( ".$day."+".$this->dayback.") DAY)".$str."ORDER BY stockDate DESC
			";
		} else {
			$sql = "SELECT ".$vo->strField." FROM stock_price 
			WHERE symbol = :symbol AND stockDate >= '2010-01-01'
			ORDER BY stockDate DESC
			";
		}
		$stm = $this->ao->pdo->prepare($sql);
		$stm->execute(array("symbol"=>$symbol));
		$rowPriceArr = $stm->fetchAll(PDO::FETCH_NUM);
		return $rowPriceArr;
//@>
	}
	
	public function makeRowPriceArr($vo, $rowPriceArr ,$limit=null){
		//$vo=$this->voPrice;
		$re=array();
		$voRe=$this->voRowPriceArr;
		$len=count($rowPriceArr);
		for($i=0 ; $i < $len ;$i++){
			$re[$i]=array();
		}

		if($limit==null) $len2=$len;
		else $len2=$limit;
		//if($len2>153) $len2=153;
		if($len2>130) $len2=130;
		$codeB=null;
		$closeB=null;
		$re[0]["profit"]=0;
		$re[0]["profitStr"]="";
		$profitCount=0;
		$iUp=null;
		$CMINMAXHIGH=5;
		$CMINMAXUP=5;
		$CMAXUP=3;
		$CMINUP=2;
/*<@
		$isMarket=$this->isMarket($this->viewChart->symbol);
		if($isMarket){
			$CMINMAXHIGH=0;
			$CMINMAXUP=3;
			$CMAXUP=3;
			$CMINUP=0.5;
		}
@>*/
		for($i=$len2-1 ; $i >=0 ;$i--){
			//if($i >= $len - $this->intervalArr[3]) continue;
			if($this->isNull0($rowPriceArr[$i][$vo->close])) continue;
			$min=999999;$max=-999999;$imin=null;$imax=null;$max0=-999999;$min1=999999;$max1=-999999;
			$value2=0;
			$code="";
			$maC=0;
			$isCode=true;
			$minC2=9999999;
			$maxC2=0;
			$delta=0;
			$re[$i][$voRe->code]=null;
			$imaxUp=null;
			$minMax=null;
			$minOpen=null;
			for($j=0 ; $j < 55 ; $j++){
				$x=$i+$j;
				if($this->isNull0($rowPriceArr[$x][$vo->close])) break;
				if($rowPriceArr[$x+1]==null || $this->isNull0($rowPriceArr[$x+1][$vo->close])) break;
				
				if($rowPriceArr[$x][$vo->close]<$min){
					$min=$rowPriceArr[$x][$vo->close];
					$imin=$j;
				}
				if($rowPriceArr[$x][$vo->close]>$max){
					$max=$rowPriceArr[$x][$vo->close];
					$imax=$j;
				}
				if($j<=8-1 && $rowPriceArr[$x][$vo->high]!=null && $rowPriceArr[$x][$vo->high]>$max0){
					$max0=$rowPriceArr[$x][$vo->high];
				}
				//if($max>$max0) $max0=$max;
				/*
				if($j>=1 && $j<=4){
					if($rowPriceArr[$x][$vo->close]<$min1){
						$min1=$rowPriceArr[$x][$vo->close];
					}
					if($rowPriceArr[$x][$vo->close]>$max1){
						$max1=$rowPriceArr[$x][$vo->close];
					}
					if($j==4){
						if($min1!=0) $re[$i][$voRe->minMax1]=round(100*($max1-$min1)/$min1);
					}
				}
				*/

				if($j<13) {
					$value2 += $rowPriceArr[$j][$vo->close]*$rowPriceArr[$j][$vo->volume];
					if($j==13-1){
						$re[$i][$voRe->value2]=round($value2/($j+1),0);
						if($re[$i][$voRe->value2]!=0) $re[$i][$voRe->perValue]= 100*$rowPriceArr[$i][$vo->close]*$rowPriceArr[$i][$vo->volume]/$re[$i][$voRe->value2];
						else $re[$i][$voRe->perValue]=0;
							
//<@
						if($re[$i][$voRe->value2]<$this->valueOff) break;
//@>
					}
				}

				//$per = 100*($rowPriceArr[$x][$vo->close] - $rowPriceArr[$x+1][$vo->close])/$rowPriceArr[$x+1][$vo->close];
				//if(abs($per) <= 15 )$delta += abs($per);

				$maC+=$rowPriceArr[$x+1][$vo->close];
	
				if($j==5-1){
					//@ $re[$i]["ma1"]=$maC/($j+1);
					$ma1=$maC/($j+1);
				}
				if($j==5-1){
					
					$re[$i]["minMax0"]=100*($max-$min)/$min;
					$re[$i]["minClose0"]=100*($rowPriceArr[$i][$vo->close]-$min)/$min;
				}
				if($j==5-1){
					if($max-$min!=0) $re[$i][$voRe->perMinMax]=100*($max-$rowPriceArr[$i][$vo->close])/($max-$min);
					else $re[$i][$voRe->perMinMax]=100;
					
					
					
				}
				if($j==8-1){
/*<@ 
					$re[$i]["ma2"]=$maC/($j+1);					
					$ma=$re[$i]["ma2"];
					if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma1"]) $ma=$re[$i]["ma1"];
					$re[$i]["perMa2"]=round(100*($rowPriceArr[$i][$vo->close]-$ma)/$ma);
@>*/
//<@					
					$ma=$maC/($j+1);
					if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$ma1) $ma=$ma1;
					$re[$i][$voRe->perMa]=round(100*($rowPriceArr[$i][$vo->close]-$ma)/$ma);
//@>				
					//$re[$i]["minMax2"]=100*($max-$min)/$min;
					
				}
				if($j==6-1){
					if($max-$min!=0) $re[$i]["perMinMax2_"]=100*($rowPriceArr[$i][$vo->close]-$min)/($max-$min);
					else $re[$i]["perMinMax2_"]=0;
					$re[$i]["perMinMax2"]=$re[$i+1]["perMinMax2_"];
					
					$re[$i][$voRe->perHigh]=100*($max0-$rowPriceArr[$i][$vo->close])/$max0;
					$re[$i]["minClose"]=100*($rowPriceArr[$i][$vo->close]-$min)/$min;
					$re[$i][$voRe->minClose]=0;
					if($re[$i+1]!=null) $re[$i][$voRe->minClose]=$re[$i+1]["minClose"];
				}
				if($j==13-1){
				}
				if($j==13-1){
					//@ $re[$i]["ma3"]=$maC/($j+1);
					//$re[$i]["minMax2"]=round(100*($max-$min)/$min);
					$re[$i]["minClose1"]=100*($rowPriceArr[$i][$vo->close]-$min)/$min;
				}
				if($j==21-1){
					//@ $re[$i]["ma4"]=$maC/($j+1);
					
//<@					
					//$delta=$delta/($j+1);
					//$re[$i][$voRe->delta]=$delta;
//@>
				}
				if($j==34-1){
					//@ $re[$i]["ma5"]=$maC/($j+1);
					$re[$i]["minClose2"]=100*($rowPriceArr[$i][$vo->close]-$min)/$min;
				}
				if($j==55-1){
/*<@ 
					$re[$i]["ma6"]=$maC/($j+1);					
					$ma=$re[$i]["ma6"];
					if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma3"]) $ma=$re[$i]["ma3"];
					if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma4"]) $ma=$re[$i]["ma4"];
					if($rowPriceArr[$i][$vo->close]-$ma > $rowPriceArr[$i][$vo->close]-$re[$i]["ma5"]) $ma=$re[$i]["ma5"];
					$re[$i]["perMa6"]=round(100*($rowPriceArr[$i][$vo->close]-$ma)/$ma);
@>*/
					//$re[$i]["minMax"]=100*($max-$min)/$min;
					
				}
				
				if($re[$i][$voRe->code]!="down"){
					if($j==5-1 || $j==8-1 || $j==13-1 || $j==21-1 || $j==34-1 || $j==55-1){
						
						$close=1.00*$rowPriceArr[$i][$vo->close];
						$per = 100*($rowPriceArr[$i][$vo->close] - $rowPriceArr[$i+1][$vo->close])/$rowPriceArr[$i+1][$vo->close];
						//$per2 = 100*($rowPriceArr[$i+1][$vo->close] - $rowPriceArr[$i+2][$vo->close])/$rowPriceArr[$i+2][$vo->close];
						if($per>=0 && $rowPriceArr[$i][$vo->close] >= $rowPriceArr[$i][$vo->open]){
							/*
							if($per<=3){
								$close=1.03*$rowPriceArr[$i+1][$vo->close];
								if($j==34-1 || $j==55-1) $close=1.03*$rowPriceArr[$i+1][$vo->close];
							} else {
								$close=1.05*$rowPriceArr[$i+1][$vo->close];
								if($j==34-1 || $j==55-1) $close=1.05*$rowPriceArr[$i+1][$vo->close];
							}
							*/
							$close=1.02*$rowPriceArr[$i][$vo->close];
							if($close > 1.05*$rowPriceArr[$i+1][$vo->close]) $close=1.05*$rowPriceArr[$i+1][$vo->close]; 
						}
						$maC0=$maC/($j+1);
						$maC0=100*($close-$maC0)/$maC0;
						if($maC0<0) {
							//$re[$i][$voRe->code]="pre";
							$re[$i][$voRe->code]="down";
						}
						/*
						$close=1.02*$rowPriceArr[$i][$vo->close];///1.04
						$maC0=$maC/($j+1);
						$maC0=100*($close-$maC0)/$maC0;
						if($maC0<0) {
							$re[$i][$voRe->code]="down";
						}
						*/
						if($j==55-1 && $re[$i][$voRe->code]==null) {
							$re[$i][$voRe->code]="up";
							if($re[$i+1]!=null && ($re[$i+1][$voRe->code]=="high" || $re[$i+1][$voRe->code]=="up") && $re[$i+1]["minClose1"]>=13 ){ //&& $re[$i+1]["minMax2"]>=$CMINMAXHIGH
								if($re[$i][$voRe->perMinMax]>40 || ($re[$i][$voRe->perHigh]>4 && $per<0 && $rowPriceArr[$i][$vo->close] < $rowPriceArr[$i][$vo->open])) $re[$i][$voRe->code]="high";
								//if($re[$i][$voRe->perMinMax]<50) $re[$i][$voRe->code]="high";
								//if(($re[$i][$voRe->perHigh]>=4 && $per<0)) $re[$i][$voRe->code]="high";
							}				
						}
					}
				}
			}
			/*
			if($maxUp!=null){
				if($rowPriceArr[$i][$vo->close]<$minUp){
					$minUp=$rowPriceArr[$i][$vo->close];
					$iminUp=$i;
				}
				if($rowPriceArr[$i][$vo->close]>$maxUp){
					$maxUp=$rowPriceArr[$i][$vo->close];
					$imaxUp=$i;
				}
			}
			*/
			if($re[$i+1]!=null && $re[$i+2]!=null){
				if($re[$i][$voRe->code]=="up" && $re[$i+1][$voRe->code]!="up"
					// && $rowPriceArr[$i][$vo->close]>=$rowPriceArr[$i][$vo->open] && $rowPriceArr[$i][$vo->close]>=$rowPriceArr[$i+1][$vo->close]
				) {
					$re[$i]["code2"]=$re[$i][$voRe->code];
				}
				
				if( ($re[$i][$voRe->code]=="high" && $re[$i+1][$voRe->code]!="high" && $re[$i+1][$voRe->code]!="down") ||
					($re[$i][$voRe->code]=="down" && $re[$i+1][$voRe->code]!="down")
				) { 
					$re[$i]["code2"]=$re[$i][$voRe->code];
				}
				
				if($closeB==null){
					//$per = 100*($rowPriceArr[$i][$vo->close] - $rowPriceArr[$i+1][$vo->close])/$rowPriceArr[$i+1][$vo->close];
					//$per2 = 100*($rowPriceArr[$i+1][$vo->close] - $rowPriceArr[$i+2][$vo->close])/$rowPriceArr[$i+2][$vo->close];
					if($re[$i][$voRe->code]=="up" && $re[$i][$voRe->minClose]<=5 && $re[$i][$voRe->perHigh]<=5 && $re[$i+1]["minClose2"]<=34  //  && $re[$i+1]["minClose0"]<=3 $re[$i]["perMinMax2"]<=100  && $re[$i]["perMinMax2"]<=50   && $per<=3 &&  $re[$i+1][$voRe->code]!="high" && $re[$i+1]["minMax2"]<=8
						// && $rowPriceArr[$i][$vo->close]>=$rowPriceArr[$i][$vo->open] && $rowPriceArr[$i][$vo->close]>=$rowPriceArr[$i+1][$vo->close]
					){
						$re[$i]["codeB"]=$re[$i][$voRe->code];
						$iUp2=$i;
						////$maxUp=$rowPriceArr[$i][$vo->close];
						////$minUp=$rowPriceArr[$i][$vo->close];

						$iUp=$i;
						//$closeB=$rowPriceArr[$i+1][$vo->close];
						$closeB=1.002*$rowPriceArr[$i][$vo->close];
						if(1.025*$rowPriceArr[$i+1][$vo->close]<=$rowPriceArr[$i][$vo->close]) $closeB=1.002*1.025*$rowPriceArr[$i+1][$vo->close];
							
					}
				}
				if($closeB!=null && $iUp>=3+$i){
					if( ($re[$i][$voRe->code]=="high")// && $re[$i+1]["minClose1"]>=18
						|| $re[$i][$voRe->code]=="down"
					){
						$re[$i]["codeB"]=$re[$i][$voRe->code];
						//$closeS=$rowPriceArr[$i+1][$vo->close];
						$closeS=0.998*$rowPriceArr[$i][$vo->close];
						if(0.975*$rowPriceArr[$i+1][$vo->close]>=$rowPriceArr[$i][$vo->close]) $closeS=0.998*0.975*$rowPriceArr[$i+1][$vo->close];
						$re[0]["profitStr"]=$re[0]["profitStr"].round(100*($closeS-$closeB)/$closeB).";";
						$re[0]["profit"]+=100*($closeS-$closeB)/$closeB;
						$profitCount++;
						$closeB=null;
						////$maxUp=null;
						////$minUp=null;
						$iUp=null;
					}
				}
			}
		}
		//if($profitCount!=0) $re[0]["profitAvg"]=$re[0]["profit"]/$profitCount;
		if($profitCount!=0) $re[0]["profitAvg"]=$profitCount;

		return $re;
	}
	
	public function formatVolume3($volume , $name ,$dt ,$_dt){
		$vo=$this->voPrice2;
		$price=$dt[$name];
		if($price==null) return "";
		$style="";
		
		$color="red";
		//if($price == $dt[$vo->ceil]) $color="magenta";
		//else if($price == $dt[$vo->floor]) $color="limegreen";
		if($price == $dt[$vo->ceil]) $color="magenta";
		else if($price == $dt[$vo->floor]) $color="limegreen";
		else if($price > $dt[$vo->ref]) $color="blue";
		else if($price <= $dt[$vo->ref]) $color="red";
		//else if($price == $dt[$vo->ref]) $color="darkorchid";
		
		if($volume==null || $volume==0) return null;
		//return number_format($volume,0,".","");
		$volume = $volume/1000;
		if($volume >= 999.9) return number_format($volume/1000,0,",",",") . "k";
		if($volume>=9.9) return number_format($volume,0,",","");

		return "<span style='color:".$color.";".$style."'>".number_format($volume,1,".","")."</span>";
	}
	
	public function formatVolume2($volume){
		if($volume==null || $volume==0) return null;
		//return number_format($volume,0,".","");
		$volume = $volume/1000;
		if($volume >= 999.9) return number_format($volume/1000,0,",",",") . "k";
		if($volume>=9.9) return number_format($volume,0,",","");
		return number_format($volume,1,".","");
	}
	public function formatVolume($volume){
		//return $this->formatVolume2($volume);
		if($volume==null || $volume==0) return null;
		//return number_format($volume,0,".","");
		$volume = $volume/1000;
		
		$volume=round(10*$volume);
		if($volume>=100000) $volume=90000;
		
		if($volume >= 10000) return floor($volume/10000) . "n";
		if($volume >= 1000) return floor($volume/1000) . "t";
		if($volume>=100) return floor($volume/100) . "c";
		return $volume;
	}
	public function formatVolume0($volume,$dt,$_dt,$symbol){
		$vo=$this->voPrice2;
		if($dt && $this->isMarket($symbol)){
			return "<div _tag='volume0' style='background-color:blue;color:white;text-align:center;'></div>";
		}
		if($volume==null || $volume==0) return "";
		$volume=$volume/1000;
		$volume=round($volume);
		if($volume>=100) $volume=99;
		//$volume=$volume*1000;
		//$volume=$this->formatVolume($volume);
		
		$style="";
		if($_dt!=null && $dt[$vo->volume]>$_dt[$vo->volume]){
			if(!$this->isMarket($symbol)){
				$style="background-color:blue;color:white";
			}
		}
		return "<div style='".$style."'>".$volume."</div>";
	}
	public function formatVolume1($name ,$dt ,$_dt,$symbol){
		$vo=$this->voPrice2;
		$volume=$dt[$name];
		$volume=$this->formatVolume($volume);
		if($volume==null) return "";
		$style="";
		if($name==$vo->sellVolume1) $name2=$vo->sellPrice1;
		if($name==$vo->buyVolume1) $name2=$vo->buyPrice1;
		
		if($_dt!=null && $dt[$vo->volume]>$_dt[$vo->volume]){
			if($dt[$name2]==$dt[$vo->close] && !$this->isMarket($symbol)){
				$style="background-color:blue;color:white";
			}
		}

		return "<div style='".$style."'>".$volume."</div>";
	}
	/*
	public function formatValue($value){
		if($value==null) return "";
		$value = $value/1000000;
		//if($value>=5) $color="darkorchid";
		//if($value>=1) $color="blue";
		//else $color="red";
		if($value >= 999.9) $value=number_format($value/1000,0,",",",") . "";
		else if($value >= 9.9) $value=number_format($value,0,",","");
		else $value=number_format($value,1,".",",");
		return "<span style='color:".$color.";".$style."'>".$value."</span>";
	}*/
	public function formatValue($value){
		if($value==null) return "";
		$value = $value/1000000;
		//if($value>=5) $color="darkorchid";
		if($value>=3) $color="black";
		else $color="black";
		if($value >= 999.9) $value=number_format($value/1000,0,",",",") . "";
		else if($value >= 9.9) $value=number_format($value,0,",","");
		else $value=number_format($value,1,".",",");
		return "<span style='color:".$color.";".$style."'>".$value."</span>";
	}
	public function formatValue2($value){
		if($value==null) return "";
		$value = $value/1000000;
		//if($value>=5) $color="darkorchid";
		if($value>=3) $color="blue";
		else $color="red";
		$color="black";
		if($value >= 999.9) $value=number_format($value/1000,0,",",",") . "";
		else if($value >= 9.9) $value=number_format($value,0,",","");
		else $value=number_format($value,0,".",",");
		if($value>=100) $value=99;
		return "<span style='color:".$color.";".$style."'>".$value."</span>";
	}
	public function formatValueTrade($value){
		if($value==null) return "";
		if($value<0)$value=-$value;
		$value = $value/1000;
		if($value >= 9.9) return number_format($value,0,",","");
		return number_format($value,1,".",",");
	}
	
	public function formatPrice($name ,$dt ,$_dt){
		$vo=$this->voPrice2;
		$price=$dt[$name];
		if($price==null) return "";
		$style="";
		
		$color="red";
		//if($price == $dt[$vo->ceil]) $color="magenta";
		//else if($price == $dt[$vo->floor]) $color="limegreen";
		if($price == $dt[$vo->ceil]) $color="magenta";
		else if($price == $dt[$vo->floor]) $color="limegreen";
		else if($price > $dt[$vo->ref]) $color="blue";
		else if($price <= $dt[$vo->ref]) $color="red";
		//else if($price == $dt[$vo->ref]) $color="darkorchid";
		
		if($price <0 ) $price = "".number_format(-100*$price,0)."";
		else $price = number_format(100*$price,0,",","");
		
		if($price >=100000) $price=substr($price,1,4);
		else $price=substr($price,0,4);

		return "<span style='color:".$color.";".$style."'>".$price."</span>";
	}
	public function formatPer($value,$dt,$symbol){
		$vo=$this->voPrice2;
		
		if($dt && $this->isMarket($symbol)){
			return "<div _tag='volume0' style='background-color:blue;color:white;text-align:center;'></div>";
		}
		
		if($value==null) return "";
		if($value>6) $color="magenta";
		else if($value>0)$color="blue";
		else if($value==0)$color="blue";
		else if($value<-6)$color="limegreen";
		else if($value<0)$color="red";
		
		if($value<=0)$color="red";
		else $color="blue";
		
		$f=10;
		if($value>=10)$value=9.9;
		if($value<=-10)$value=-9.9;
		
		if($value <0 ) $value = "".number_format(-$f*$value,0)."";
		else $value = number_format($f*$value,0,",","");
		
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatBvp($value){
		//return $this->formatPer($value);
		$vo=$this->voPrice2;
		
		if($dt && $this->isMarket($symbol)){
			return "<div _tag='volume0' style='background-color:blue;color:white;text-align:center;'></div>";
		}
	
		$color="black";
		
		$f=10;
		if($value>=10)$value=9.9;
		if($value<=-10)$value=-9.9;
		
		if($value <0 ) $value = "<u>".number_format(-$f*$value,0)."</u>";
		else $value = number_format($f*$value,0,",","");
		
		return "<span style='color:".$color."'>".$value."</span>";
	}
	
	public function formatRoe($value,$ysFa,$noFa){
		if($value==null) return "";
		if($value>=20) $color="blue";
		else $color="red";
		if($value>=100) $value=99;
		if($value<=-100) $value=-99;
		
		if($value <0 ) $value = "<u>".number_format(-1*$value,0)."</u>";
		else {
			$value = number_format(1*$value,0,",","");
			if($ysFa) {
				$color="blue";
				$value = "<u>".$value."</u>";
			}
		}
		
		if($noFa) $color="red";

		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatFf0($value,$ysFa,$noFa){
		return $this->formatPer($value);
		if($value==null) return "";
		if($value>=0) $color="blue";
		else $color="red";
		if($value>=100) $value=99;
		if($value<=-100) $value=-99;
		$color="black";
		//$value=round($value/10);
		if($value <0 ) $value = "<u>".number_format(-1*$value,0)."</u>";
		/*
		if($value <0 ) $value = "<u>".number_format(-1*$value,0)."</u>";
		else {
			$value = number_format(1*$value,0,",","");
			if($ysFa) {
				$color="blue";
				$value = "<u>".$value."</u>";
			}
		}
		if($noFa) $color="red";
		*/
		
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatFf($value,$ysFa,$noFa){
		return $this->formatPer($value);
		if($value==null) return "";
		if($value>=0) $color="blue";
		else $color="red";
		if($value>=100) $value=99;
		if($value<=-100) $value=-99;
		//$value=round($value/10);
		if($value <0 ) $value = "".number_format(-1*$value,0)."";
		/*
		if($value <0 ) $value = "<u>".number_format(-1*$value,0)."</u>";
		else {
			$value = number_format(1*$value,0,",","");
			if($ysFa) {
				$color="blue";
				$value = "<u>".$value."</u>";
			}
		}
		if($noFa) $color="red";
		*/
		
		return "<span style='color:".$color."'>".$value."</span>";
	}
	
	public function formatPercentScale($value, $perMa){
		if($value==null) return "";
		if($value>=50) $color="blue";
		else $color="red";
		//if($perMa>=0) $color="blue";
		//else $color="red";
		if($value>=100) $value=99;
		if($value<=-100) $value=-99;
		if($value<0) $color="limegreen";
		
		if($value <0 ) $value = "".number_format(-1*$value,0)."";
		else $value = number_format(1*$value,0,",","");
		$value=substr($value,0,3);

		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatPercentValue($value){ 
		//return $value;
		if($value==null) return "";
		if($value>=60) $color="blue";
		else $color="red";
		if($value<0) $color="limegreen";
		
		$value=round($value/10);
		if($value>=100)$value=99;
		if($value<=-100) $value=-99;
		if($value <0 ) $value = "".number_format(-1*$value,0)."";
		else $value = number_format(1*$value,0,",","");
		$value=substr($value,0,3);

		return "<span style='color:".$color."'>".$value."</span>";
	}
	
	public function formatPercent($value){
		if($value==null) return "";
		if($value<=3) $color="blue";
		else $color="red";
		if($value<0) $color="limegreen";
		
		if($value <0 ) $value = "".number_format(-10*$value,0)."";
		else $value = number_format(10*$value,0,",","");
		$value=substr($value,0,3);

		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatPercentRev($value){
		if($value==null) return "";
		if($value<4.0) $color="blue";
		else $color="red";
		if($value<0) $color="limegreen";
		
		if($value <0 ) $value = "".number_format(-1*$value,0)."";
		else $value = number_format(1*$value,0,",","");
		$value=substr($value,0,3);

		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatStatus($str,$str0){
		if($str==null) $value="N";
		if($str=="less") $value="L";
		if($str=="great") $value="G";
		if($str=="greatF") $value="F";
		
		if($str0==null) $value.="N";
		if($str0=="less") $value.="L";
		if($str0=="great") $value.="G";
		if($str0=="greatF") $value.="F";
		
		$color="black";
		return "<span style='color:".$color."'>".$value."</span>";
	}
	
	public function formatPercentNone($value){
		if($value==null) return "";
		if($value>=8) $color="black";
		else $color="black";
		if($value<0) $color="limegreen";
		
		if($value <0 ) $value = "".number_format(-10*$value,0)."";
		else $value = number_format(10*$value,0,",","");
		$value=substr($value,0,3);

		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatMarket($value){
		//return $value;
		if($value==null) return "";
		if($value=="vn") $color="blue";
		else $color="red";
		$color="black";
		if($value=="vn") $value="v";
		if($value=="ha") $value="h";
		if($value=="uc") $value="u";
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatMarketTrade($value,$canSell,$tp){
		if($tp==0)$tp="a";
		if($tp==1)$tp="b";
		if($tp==2)$tp="c";
		if($tp==3)$tp="d";
		if($canSell) return "<span style='font-weight:bold'>".$value."</span>";
		else return "";//"<span style='font-weight:bold'>".$tp."</span>";
		//else return "<span style='font-weight:bold;text-decoration:;'><i>".$value."</i></span>";
		
		
		return;
		if($canSell) $color="blue";
		else $color="red";
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatKelly($value){
		//return $value;
		if($value==null) return "";
		//$value=round(100*$value,2);
		if($value>0) $color="blue";
		else $color="red";
		//if($value<0) $color="limegreen";
		
		if($value <0 ) $value = "".number_format(-10*$value,0)."";
		else $value = number_format(10*$value,0,",","");
		return $value;
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatBet($value){
		if($value==null) return "";
		return number_format($value,1,".",",");
	}
	
	public function formatSymbol($symbol){
		if($symbol==null) return "";
		if($this->isMarket($symbol)) return substr($symbol,0,3);
		return substr($symbol,-3);
	}
	public function formatCode($code){
		if($code=="down") $code="D";
		if($code=="pre") $code="P";
		if($code=="up") $code="U";
		if($code=="high") $code="H";
		return $code;
	}	
	
	public function getPrice($name ,$dt){
		$vo=$this->voPrice2;
		if($dt==null) return null;
		$price=$dt[$name];
		if($price==null) $price=$dt[$vo->close];
		if($name==$vo->sellPrice1 && $price<$dt[$vo->close]) $price=$dt[$vo->close];
		if($name==$vo->buyPrice1 && $price>$dt[$vo->close]) $price=$dt[$vo->close];
		return $price;
	}
	public function getPricePer($name ,$dt){
		$vo=$this->voPrice2;
		$price=$this->getPrice($name,$dt);
		if($dt[$vo->ref]!=0) $per=round(100*($price-$dt[$vo->ref])/$dt[$vo->ref],2);
		if($name==$vo->low){
			if($price!=0) $per=round(100*($dt[$vo->close]-$price)/$price,2);
		}
		if($name==$vo->high){
			if($price<$dt[$vo->ref]) $price=$dt[$vo->ref];
			if($price<$dt[$vo->close]) $price=$dt[$vo->close];
			//$priceRef=$this->getPrice($vo->buyPrice1,$dt);
			$priceRef=$dt[$vo->close];
			if($priceRef==null || $priceRef==0) $priceRef=$dt[$vo->close];
			if($price!=0) $per=round(100*($priceRef-$price)/$price,2);
		}
		/*
		if($name==$vo->high){
			$low=$this->getPrice($vo->low,$dt);
			if($price!=0) $per=round(100*($price-$low)/$low,1);
		}*/
		return $per;
	}
	public function getPriceColor($price, $dt){
		//$per = 100*($price - $dt["ref"])/$dt["ref"];
		//if($per >= 3 ) return "#FF00FF";
		//if($per <= -3 ) return "#66CCFF";
		/*
		if($price == $dt["ceil"]) return "#E100E1";
		if($price == $dt["floor"]) return "#66CCFF";
		//if($price == $dt["ref"]) return "#F7FF31";
		if($price > $dt["ref"]) return "lime";
		if($price <= $dt["ref"]) return "red";
		*/
		if($price==null) $price = $dt["close"];
		
		if($price == $dt["ceil"]) return "orchid";
		if($price == $dt["floor"]) return "limegreen";
		if($price > $dt["ref"]) return "blue";
		if($price <= $dt["ref"]) return "red";
		return "#F7FF31";
	}
	public function getPerColor($per){
		if($per > 2 ) return "lime";
		return "red";
	}
	public function format2Digit($num,$index){
		$num=round($num);
		$str=$num."";
		if($num<10) $str="0".$num;
		if($num>=100) $str="99";
		if($num<=0) $str="T".(-$num);
		$color="black";
		if($index==1 || $index==3){
			if($num<=10 && $index==1) $color="red";
			else if($num<=10 && $index==3) $color="red";
			else $color="blue";
		}
		return "<b style='color:".$color."'>".$str."</b>";
	}
	public function formatDelta($value){
		if($value>2) $color="blue";
		else $color="red";
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatProp($value){
		if($value==null) return "";
		
		if($value>20) $color="blue";
		else $color="red";
		
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatAvg($value){
		if($value==null) return "";
		if($value>=1) {
			$value=$value-1;
			$color="blue";
		}
		else {
			$value=1-$value;
			$color="red";
		}
		$value=round(10000*$value);
		return "<span style='font:inherit;color:".$color."'>".$value."</span>";
	}
	public function formatInc($value){
		if($value==null) return "";
		if($value>50) {
			$color="blue";
		}
		else {
			$color="red";
		}
		return "<span style='font:inherit;color:".$color."'>".$value."</span>";
	}
	public function formatCount($value){
		if($value>1000) $color="blue";
		else $color="red";
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatMinMax($value){
		if($value==null) return "";
		if($value<=40) $color="blue";
		else $color="red";
		if($value>=100)$value=99;
		return "<span style='color:".$color."'>".$value."</span>";
	}
	public function formatCodeFull($value){
		if($value==null) return "";
		$arr=$value->split("");
		$str="";
		for($i=0 ;$i<count($arr) ;$i++){
			$ch=$arr[$i];
			if($ch=="[" || $ch=="]") {
				$str.=$ch;
				continue;
			}
			if($ch=="V"||$ch=="A"){
				$color="black";
				$num=$ch;
			} else if($ch=="H"){
				$num=$ch;
				$color="blue";
			} else if($ch=="L"){
				$num=$ch;
				$color="red";
			} else {
				$num=parseInt($ch);
				if($num==0 || $num==1) $color="limegreen";
				else if($num==9 || $num==8) $color="orchid";
				else if($num>=1&&$num<=4) $color="blue";
				else if($num>=5&&$num<=8) $color="red";
			}
			$str.="<span style='color:".$color."'>".$num."</span>";
		}
		return $str;
	}
	public function shortString($str){
		$arr=explode(",",$str);
		if(count($arr)>=3){
			$str="<u>".$arr[0]."</u>";
		} else $str="".$arr[0]."";
		//$str = substr($str,0,2);
		return $str;
	}
	
	public function onrpcTradeCap($event,$result){
		$this->tradeFullMap=$result;
		$this->viewDetail->buttonList->click();
		$this->rpcTradeCap2();
	}
	public function rpcTradeCap($strConf){
//<@ $this->json($strConf);
		$this->rpcConf($strConf);
		$this->viewTrade->rpcCap();
		$re=array(
			"capMap"=>$this->obJfile->load("stock_ViewTrade/capMap")
			,"indexArr"=>$this->obJfile->load("stock_ViewTrade/indexArr")
		);
		return $re;
//@>
	}
	public function onrpcTradeCap2($event,$result){
		alert("Finished");
	}
	public function rpcTradeCap2(){
//<@ $this->json();
		if($this->ao->canSaveAppfog()){
			$tradeFullMap=array(
				"capMap"=>$this->obJfile->load("stock_ViewTrade/capMap")
				,"indexArr"=>$this->obJfile->load("stock_ViewTrade/indexArr")
			);
			$rowPriceLiveMap=$this->obJfile->load("stock_ViewPrice/rowPriceLiveMap");
			$url="http://cophieu.ap01.aws.af.cm/j.php?s=stock_ViewStock/rpcTradeCapAppfog";
			$client = new Zend_Http_Client($url);
			$paramArray=array($tradeFullMap,$rowPriceLiveMap);
			$client->setParameterPost('paramArray', json_encode($paramArray));
			$body=$client->request("POST")->getBody();
		}
//@>
	}
	public function rpcTradeCapAppfog($tradeFullMap,$rowPriceLiveMap){
//<@ $this->json($tradeFullMap,$rowPriceLiveMap);
		$this->obJfile->save("stock_ViewTrade/capMap",$tradeFullMap["capMap"]);
		$this->obJfile->save("stock_ViewTrade/indexArr",$tradeFullMap["indexArr"]);
		
		$this->viewPrice->saveRowPriceLiveMap($rowPriceLiveMap);
		return 1111;
//@>
	}
	
	public function getLivePrice($symbol){
		$voStock=$this->voStock;
		if($this->stockMap==null || $this->stockMap[$symbol]==null) return null;
		return $this->stockMap[$symbol][$voStock->live];
	}
	public function onrpcStockMap($event ,$result){
		$vo=$this->voPrice2;
		$voStock=$this->voStock;
		$this->_stockMap=$this->stockMap;
		$this->stockMap=$result;
		
		if($this->firstRun){
			$this->viewDetail->preloadDetail($this->viewDetail->symbol);
			$this->firstRun=false;
		}
		
		$tableClass = $this->viewDetail->tableClass;
		if($tableClass==null) $tableClass="";
?>
<!--$html2-->
<table border="0" <?= $tableClass ?> style="border-color:red;border-spacing:0px 0px;">
	<tr style="display:none">
		
		<td>m</td>
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		<td>&nbsp;</td>
		
		<td>pb</td>
		<td>&nbsp;</td>
		
		<td>hi</td>
		<td>&nbsp;</td>
		
		<td>pS</td>
		<td>&nbsp;</td>
		<td>pL</td>
		<td>&nbsp;</td>
		
		<td>pV</td>
		<td>&nbsp;</td>
		
		
	</tr>
<!--/$html2-->
<?
	$count=0;
	$valueT=0;
	$valueNowT=0;
	$profitT=0;
	$valueTfake=0;
	$valueNowTfake=0;
	$profitTfake=0;
	$seperate1=null;
	$seperate2=null;
	$seperate3=null;
	$seperate4=null;
	$seperate5=null;

	$ysFaArr=explode(",",$this->ao->conf["ysFA"]);
	$ysFaMap=array(
	);
	foreach($ysFaArr as $i=>$str){
		$symbol=$str;
		$ysFaMap[$symbol]=$symbol;
	}
	
	$noFaArr=explode(",",$this->ao->conf["noFA"]);
	$noFaMap=array(
	);
	foreach($noFaArr as $i=>$str){
		$symbol=$str;
		$noFaMap[$symbol]=$symbol;
	}
	
	$isFuture=false;
	$futureArr=explode(",",$this->ao->conf["future"]);
	$futureMap=array(
	);
	foreach($futureArr as $i=>$str){
		$symbol=trim($str,"'");
		$futureMap[$symbol]=$symbol;
	}
	
	foreach($this->stockMap as $symbol=>$stock){
		if($this->_stockMap[$symbol]!=null) $_live=$this->_stockMap[$symbol][$voStock->live];
		$buy=null;
		$perSell=$this->getPricePer($vo->sellPrice1,$this->stockMap[$symbol][$voStock->live]);
		$perBuy=$this->getPricePer($vo->buyPrice1,$this->stockMap[$symbol][$voStock->live]);
				
		if($stock[$voStock->live]==null) {
			//alert($symbol);
			continue;
		}
		if(!$this->isMarket($symbol)){
			$buyPrice=$this->getPrice($vo->sellPrice1,$stock[$voStock->live]);
			if($buyPrice!=0) $buy=100*ceil($this->buyValue/(100*$buyPrice));
			else $buy=null;
			
		}
		else {
			$stock[$voStock->live][$vo->buyPrice1]=$stock[$voStock->live][$vo->close];
			$buy=null;
			
		}
		if($this->isMarket($symbol) || $futureMap[$symbol]!=null){
			$perSell=10*$perSell;
			$perBuy=10*$perBuy;
		}
		
		if(!$this->isMarket($symbol)) $symbolTrade=$symbol;
		$count++;
		if(count($this->stockMap[$symbol][$voStock->trade])!=0){
			$trade=$this->stockMap[$symbol][$voStock->trade];
			
			if($trade["market"]==",") {
				//$perBuy=null;
			} else {
				
			}
			$dateArr=explode(",",$trade["date"]);
			$priceArr=explode(",",$trade["price"]);
			$volumeArr=explode(",",$trade["volume"]);
			$marketArr=explode(",",$trade["market"]);
			$live=$this->stockMap[$symbol][$voStock->live];
			
			$value=0;
			$valueNow=0;
			$profit=0;
			$canSell=false;
			for($i=0;$i<count($dateArr)-1;$i++){
				$date=$dateArr[$i];
				$tp=$this->ao->getTplus($date);
				if($tp>=3) $canSell=true;
				if($tp>=10)$tp=9;
				$marketArr[$i]=$marketArr[$i];//.$tp;
				$price=$priceArr[$i];
				$volume=$volumeArr[$i];
				$value+=$price*$volume;
				$valueNow+=$this->getPrice($vo->buyPrice1,$live)*$volume;
				$profit+=$valueNow-$value;
				//$per=round(100*($live["close"]-$price)/$price,1);
			}
			$marketTrade=$this->formatMarketTrade(implode(",",$marketArr),$canSell,$tp);
			if($trade["market"]!=","){
				$valueT+=$value;
				$valueNowT+=$valueNow;
				$profitT+=$profit;
			} else {
				$valueTfake+=$value;
				$valueNowTfake+=$valueNow;
				$profitTfake+=$profit;
			}
			if($value!=0) $per=round(100*($valueNow-$value)/$value,1);
			else $per=null;
		} else {
			$marketTrade=null;
			$value=null;
			$valueNow=null;
			$profit=null;
			$per=null;
			
		}
		
		if($seperate0==null && $this->stockMap[$symbol][$voStock->rate]<800100000100000) $seperate0=$count;
		if($seperate1==null && $this->stockMap[$symbol][$voStock->rate]<500100000100000) $seperate1=$count;
		if($seperate2==null && $this->stockMap[$symbol][$voStock->rate]<400100000100000) $seperate2=$count;
		if($seperate3==null && $this->stockMap[$symbol][$voStock->rate]<300100000100000) $seperate3=$count;
		if($seperate4==null && $this->stockMap[$symbol][$voStock->rate]<200100000100000) $seperate4=$count;
		
		if($seperate5==null && $this->stockMap[$symbol][$voStock->rate]<400100000100000+700000100000) $seperate5=$count;
		if($seperate6==null && $this->stockMap[$symbol][$voStock->rate]<501100000100000+100000100000) $seperate6=$count;
		if($seperate7==null && $this->stockMap[$symbol][$voStock->rate]<400100000100000+100000100000) $seperate7=$count;
		
		
		if($seperate1==$count || $seperate2==$count || $seperate3==$count || $seperate4==$count || $seperate0==$count || $seperate5==$count || $seperate6==$count || $seperate7==$count) {
			$trStyle="border-top:2px solid black;";
		}
		else $trStyle="";
		
		//alert($vo->buyPrice3." ".$stock[$voStock->live]." ".$this->formatPrice($vo->buyPrice3,$stock[$voStock->live],$_live)); return;
		//<td><=?= $this->formatPer($stock[$voStock->avg]) ?=></td>
		//<td><=?= $stock[$voStock->code] ?=></td>
		
		//$perValue=0;
		//$value0=$stock[$voStock->live][$vo->close]*$stock[$voStock->live][$vo->volume];
		//if($stock[$voStock->value2]!=0 && $stock[$voStock->value2]!=null) $perValue=round(100*$value0/$stock[$voStock->value2]);
		
		if($stock[$voStock->perHigh]>=10) $stock[$voStock->perHigh]=9;
		$minClose=$stock[$voStock->minClose];
		if($minClose>=10) $minClose=9;
		//if($stock[$voStock->maxC1]>=100) $stock[$voStock->maxC1]=99;
		//if($stock[$voStock->minMaxArr][3]>=100) $stock[$voStock->minMaxArr][3]=99;
		
		if(!$this->isNull0($stock[$voStock->bv])) $bvp=(1*($stock[$voStock->live][$vo->close]-$stock[$voStock->bv])/$stock[$voStock->bv]);
		else $bvp=null;
		
		$ysFa=false;
		if($ysFaMap[$symbol]!=null) $ysFa=true;
		
		$noFa=false;
		if($noFaMap[$symbol]!=null) $noFa=true;
?>
<!--$htmlTr2-->
	<tr>
		
		<td style="border-left:0px solid black;<?= $trStyle ?>"><?= $this->formatPer($perBuy,$stock[$voStock->live],$symbol) ?></td>
		
		<? if($count%2==1 || $count==-1) {?>
		<td style="<?= $trStyle ?>"><a _tag2="symbolLeft" _tag="symbol" _value="<?=$symbol?>" href="#" onclick="return false;" style="text-decoration:none;color:black;background-color:white;"><?= $this->formatSymbol($symbol) ?></a></td>
<? } else { ?>
		<td _tag2="symbolLeft0" _tag="symbol" _value="<?=$symbol?>" style="font-weight:normal;<?= $trStyle ?>"><?= $this->formatSymbol($symbol) ?></td>
<? } ?>
		<td style="border-right:0px solid black;<?= $trStyle ?>"><?= $this->formatPer($perSell,$stock[$voStock->live],null) ?></td>
		<td style="border-right:2px solid black;<?= $trStyle ?>"><?= $this->shortString($marketTrade) ?></td>
		
		<td style="<?= $trStyle ?>"><?= $this->formatPrice($vo->buyPrice1,$stock[$voStock->live],$_live) ?></td>
		<td style="border-right:px solid black;<?= $trStyle ?>"><?= $this->formatVolume1($vo->buyVolume1,$stock[$voStock->live],$_live,$symbol) ?></td>
		<td style="border-left:0px solid black;<?= $trStyle ?>"><?= $this->formatPrice($vo->sellPrice1,$stock[$voStock->live],$_live) ?></td>
		<td style="border-right:2px solid black;<?= $trStyle ?>"><?= $this->formatVolume1($vo->sellVolume1,$stock[$voStock->live],$_live,$symbol) ?></td>
		
		
		<td style="<?= $trStyle ?>"><?=  $this->formatPercentValue( $stock[$voStock->perValue] ) ?></td>
		<td style="<?= $trStyle ?>;border-right:0px solid black;"><?= $this->formatValue2($stock[$voStock->value2]) ?></td>
		<td style="border-right:0px solid black;<?= $trStyle ?>"><?= $this->formatPercentRev( $stock[$voStock->perHigh] ) ?> </td>
		<td style="border-right:0px solid black;<?= $trStyle ?>"> <?= $minClose ?> </td>
		<td style="border-right:0px solid black;<?= $trStyle ?>"> <?= $this->formatMinMax( $stock[$voStock->perMinMax], null ) ?> </td>
		<td style="color:black;border-right:0px solid black;<?= $trStyle ?>" ><?= $this->formatVolume2($buy,$vo->sellPrice1,$stock[$voStock->live],$_live) ?></td>
	
<? /*
		<td style="color:black;border-right:0px solid black;<?= $trStyle ?>" ><?= $this->formatRoe($stock[$voStock->roe],$ysFa,$noFa) ?></td>
		<td style="color:black;border-right:0px solid black;<?= $trStyle ?>" ><?= $this->formatBvp($bvp) ?></td>
		<td style="color:black;border-right:0px solid black;<?= $trStyle ?>" ><?= $this->formatFf($stock[$voStock->ff2],$ysFa,$noFa) ?></td>
		
		
		<td style="<?= $trStyle ?>"><?= $this->formatPrice($vo->buyPrice2,$stock[$voStock->live],$_live) ?></td>
		<td style="border-right:0px solid black;<?= $trStyle ?>"><?= $this->formatVolume1($vo->buyVolume2,$stock[$voStock->live],$_live,$symbol) ?></td>
		<td style="border-left:0px solid black;<?= $trStyle ?>"><?= $this->formatPrice($vo->sellPrice2,$stock[$voStock->live],$_live) ?></td>
		<td style="border-right:2px solid black;<?= $trStyle ?>"><?= $this->formatVolume1($vo->sellVolume2,$stock[$voStock->live],$_live,$symbol) ?></td>
		
		
		<td style="border-right:0px solid black;<?= $trStyle ?>"> <?= $this->formatCode($stock[$voStock->code]) ?> </td>
		<td style="color:black;border-right:0px solid black;<?= $trStyle ?>" ><?= $this->formatFf($stock[$voStock->ff1],$ysFa,$noFa) ?></td>
		
		
		<td style="border-right:0px solid black;<?= $trStyle ?>"> <?= $this->formatPercentScale( $stock[$voStock->minMaxArr][2], $stock[$voStock->minMaxArr][7] ) ?> </td>
		<td style="border-right:1px solid black;<?= $trStyle ?>"> <?= $stock[$voStock->minMaxArr][3] ?> </td>
		
		
		<td style="border-left:0px solid black;<?= $trStyle ?>"><?= $this->formatPrice($vo->buyPrice2,$stock[$voStock->live],$_live) ?></td>
		<td style="<?= $trStyle ?>"><?= $this->formatVolume($stock[$voStock->live][$vo->buyVolume2]) ?></td>
		
		
		<? if($count%2==0) {?>
		<td style="<?= $trStyle ?>"><a _tag2="symbolRight" _value="<?=$symbol?>" href="#" onclick="return false;" style="text-decoration:none;color:black;background-color:white;"><?= $this->formatSymbol($symbol) ?></a></td>
<? } else { ?>
		<td _tag2="symbolRight0" _value="<?=$symbol?>" style="font-weight:normal;<?= $trStyle ?>"><?= $this->formatSymbol($symbol) ?></td>
<? } ?>

		<td style="<?= $trStyle ?>"><?= $this->formatMarket($stock[$voStock->live][$vo->market]) ?></td>

		<td style="<?= $trStyle ?>"><?= $this->formatPrice($vo->sellPrice2,$stock[$voStock->live],$_live) ?></td>
		<td style="border-right:1px solid black;<?= $trStyle ?>"><?= $this->formatVolume($stock[$voStock->live][$vo->sellVolume2]) ?></td>
		
		
		<td style="border-right:0px solid black;<?= $trStyle ?>"> <?= $this->formatPercentScale( $stock[$voStock->minMaxArr][2], $stock[$voStock->minMaxArr][7] ) ?> </td>
		<td style="border-right:1px solid black;<?= $trStyle ?>"> <?= $stock[$voStock->minMaxArr][3] ?> </td>
		
		<td style="border-left:1px solid black;<?= $trStyle ?>"><?= $this->formatPrice($vo->close,$stock[$voStock->live],$_live) ?></td>
		<td style="border-right:1px solid black;<?= $trStyle ?>"><?= $this->formatVolume0($stock[$voStock->live][$vo->volume0],$stock[$voStock->live],$_live,$symbol) ?></td>
		
		<td _tag="valueNow" style="<?= $trStyle ?>"><?=$this->formatValueTrade($valueNow)?></td>
		<td _tag="per" style="<?= $trStyle ?>"><?=$this->formatPer($per)?></td>
		<td _tag="profit" style="border-right:0px solid black;<?= $trStyle ?>"><?=$this->formatValueTrade($profit)?></td>

		<td>
			<?= $stock[$voStock->minMaxArr][0] ?>|
			<?= $stock[$voStock->minMaxArr][1] ?>|
			<?= $stock[$voStock->minMaxArr][2] ?>|
			<?= $stock[$voStock->minMaxArr][3] ?>|
		</td>
		<td style="border-right:0px solid black;<?= $trStyle ?>"><?= $this->formatStatus($stock[$voStock->status],$stock[$voStock->status0]) ?></td>
		
		$this->viewDetail->divStock->find("[_tag='volume0']")->html($str);
*/ ?>
	</tr>
<!--/$htmlTr2-->
<?
		$html2.=$htmlTr2;
	}
		$html.="</table>";
		$html2.="</table>";
		//$this->viewDetail->divStock->css("font-size",12);
		$this->viewDetail->divStock->html($html2);
		/*
		if($valueT!=0) $perT=round(100*($valueNowT-$valueT)/$valueT,1);
		if($valueTfake!=0) $perTfake=round(100*($valueNowTfake-$valueTfake)/$valueTfake,1);

		//$this->divStock->html($html);

		$tr=$this->divStock->find("[_tag='symbol'][_value='VNINDEX']")->closest("tr");
		$tr=$tr->add($this->viewDetail->divStock->find("[_tag='symbol'][_value='VNINDEX']")->closest("tr"));
		$tr->find("[_tag='value']")->html($this->formatValueTrade($valueT));
		$tr->find("[_tag='valueNow']")->html($this->formatValueTrade($valueNowT));
		$tr->find("[_tag='profit']")->html($this->formatValueTrade($profitT));
		$tr->find("[_tag='per']")->html($this->formatPer($perT));
		
		$tr=$this->divStock->find("[_tag='symbol'][_value='HAINDEX']")->closest("tr");
		$tr=$tr->add($this->viewDetail->divStock->find("[_tag='symbol'][_value='HAINDEX']")->closest("tr"));
		$tr->find("[_tag='value']")->html($this->formatValueTrade($valueTfake));
		$tr->find("[_tag='valueNow']")->html($this->formatValueTrade($valueNowTfake));
		$tr->find("[_tag='profit']")->html($this->formatValueTrade($profitTfake));
		$tr->find("[_tag='per']")->html($this->formatPer($perTfake));
		*/
		/////////////

		$arrayStock_symbol = array();
		foreach($this->stockMap as $symbol=>$stock){
			array_push($arrayStock_symbol, $symbol);
		}
		
		$selectStock = $this->viewDetail->selectStock;
		$selectedSymbol = $selectStock->prop("value");
		?>
<!--$html-->
<option></option>
<? 
		$selectedIndex = 0;
		foreach($arrayStock_symbol as $i=>$value){ 
			if($value == $selectedSymbol) $selectedIndex = 1*$i + 1;
?>
<option value="<?= $value ?>"><?= $value ?></option>
		<? } ?>	
<!--/$html-->
		<?
		$selectStock->html($html);
		$selectStock->prop("selectedIndex", $selectedIndex);
		
		
		$this->viewDetail->highlight();
		//$this->viewDetail->buttonList->click();
		
		$this->viewChart->setOnePrice();
		
		$this->stockMapTime=new Date();
		$this->stockMapTitle = date("H:i:s d/m/Y");
		$__doc->title = $this->stockMapTitle;
		$this->rpcStockMap();
	}
	public function isMarket($symbol){
		if($symbol=="VNINDEX") return true;
		if($symbol=="HAINDEX") return true;
		if($symbol=="VN30INDEX") return true;
		if($symbol=="HA30INDEX") return true;
		if($symbol=="VNALLINDEX") return true;
		return false;
	}
	public function isNull0($value){
		if($value==null || $value==0) return true;
		return false;
	}
	
	public function rpcMakeTa(){
//<@ $this->json();
		$taMap=array(
		);
		$stockMap=$this->rpcStockMap();
		foreach($stockMap as $symbol=>$stock){
try{
			if($this->isMarket($symbol)) continue;
			//if($symbol=="VN30F1710") continue;
			$href="http://m.cophieu68.vn/profilesymbol.php?id=".$symbol;
			
			$httpClient = new Zend_Http_Client($href);
			$html = $httpClient->request('GET')->getBody();
			
			
			
			$pos1=strpos($html,'<table width="100%" cellpadding="4" cellspacing="1">');
			if($pos1===FALSE) continue;
			$html = substr($html,$pos1);
			$pos1=strpos($html,'</table>');
			$html = substr($html,0,$pos1+9);
			$html = '<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/></head><body>'.$html.'</body></html>';

			$doc = new DOMDocument();
			$old_E = error_reporting(E_ERROR);			
			$doc->loadHTML($html);
			error_reporting($old_E);
			
			$taMap[$symbol]=array(
			);
			
			$tableArr = $doc->getElementsByTagName('table');
			foreach( $tableArr as $table){
			}
			$trNodes = $table->childNodes;
			
			$str = $trNodes->item(3)->childNodes->item(2)->nodeValue ;
			$pos=strpos($str,"(");
			$str=trim(substr($str,0,$pos));
			$str=(double)$str;
			$taMap[$symbol]["bv"]=$str;
			
			$str = $trNodes->item(7)->childNodes->item(2)->nodeValue ;
			$str=trim($str,"%");
			$str=(double)$str;
			$taMap[$symbol]["roe"]=$str;
			
			$str = $trNodes->item(25)->childNodes->item(2)->nodeValue ;
			$str=trim($str);
			$taMap[$symbol]["name"]=$str;
} catch (Exception $ex){
}
		}
		$this->obJfile->save("stock_ViewStock/taMap",$taMap);
//@>
	}
	public function restartStockMap(){
		$this->stockMapTime=null;
		$this->xhrStockMap->abort();
		$this->rpcStockMap();
	}
	public function stopStockMap(){
		$this->stockMapTime=null;
		$this->xhrStockMap->abort();
	}
	public function rpcStockMap(){
//<@ if($this->viewDetail->isRun==0) {$this->stopStockMap();return;} $this->xhrStockMap = $this->json();
		$voRe=$this->voRowPriceArr;
		$vo=$this->voPrice1;
		$vo2=$this->voPrice2;
		$voStock=$this->voStock;
		$rowPriceLiveMap=$this->viewPrice->getRowPriceLiveMap();
		$rowSymbolArrDb=$this->getRowSymbolArrByValue();
		$tradeMap=$this->loadTradeMap();
		
		$rowSymbolMap=array();
		for($k=0; $k<count($rowSymbolArrDb); $k++){
			$symbol = $rowSymbolArrDb[$k][0];
			//////////array_push($rowSymbolArr,$symbol);
			$rowSymbolMap[$symbol]=$symbol;
		}
		
		foreach($tradeMap as $symbol => $value){
			//if( !in_array($symbol,$rowSymbolArr) ) array_push($rowSymbolArr,$symbol);
			if($rowSymbolMap[$symbol]==null) $rowSymbolMap[$symbol]=$symbol;
		}
		//print_p($tradeMap);return;
		$stockMap=array(
		);
		$rowPriceArrMap=array(
		);
		
		$voStat=$this->voStat;
		$statMap=$this->obJfile->load("stock_ViewStock/statMap");
		
		$taMap=$this->obJfile->load("stock_ViewStock/taMap");
		
		$futureArr=explode(",",$this->ao->conf["future"]);
		$futureMap=array(
		);
		foreach($futureArr as $i=>$str){
			$str=trim($str,"'");
			$futureMap[$str]=$str;
		}
		
		$vn30Arr=explode(",",$this->ao->conf["vn30"]);
		$vn30Map=array(
		);
		foreach($vn30Arr as $i=>$str){
			$str=trim($str,"'");
			$vn30Map[$str]=$i+1;
		}
		
		$faArr=explode(",",$this->ao->conf["FA"]);
		$faMap=array(
		);
		foreach($faArr as $i=>$str){
			$symbol=$str;
			$faMap[$symbol]=$symbol;
		}
		$faArr=explode(",",$this->ao->conf["FA2"]);
		foreach($faArr as $i=>$str){
			$symbol=$str;
			$faMap[$symbol]=$symbol;
		}
		
		$ysFaArr=explode(",",$this->ao->conf["ysFA"]);
		$ysFaMap=array(
		);
		foreach($ysFaArr as $i=>$str){
			$symbol=$str;
			$ysFaMap[$symbol]=$symbol;
		}
		
		$noFaArr=explode(",",$this->ao->conf["noFA"]);
		$noFaMap=array(
		);
		foreach($noFaArr as $i=>$str){
			$symbol=$str;
			$noFaMap[$symbol]=$symbol;
		}
		
		$filterArr=explode(",",$this->ao->conf["filter"]);
		$filterMap=array(
		);
		foreach($filterArr as $i=>$str){
			$filterMap[$str]=$str;
		}
		
		$rbank=$this->ao->conf["rbank"];
		
		foreach($faMap as $symbol => $value){
			//if( !in_array($symbol,$rowSymbolArr) ) array_push($rowSymbolArr,$symbol);
			if($rowSymbolMap[$symbol]==null) $rowSymbolMap[$symbol]=$symbol;
		}
		foreach($ysFaMap as $symbol => $value){
			//if( !in_array($symbol,$rowSymbolArr) ) array_push($rowSymbolArr,$symbol);
			if($rowSymbolMap[$symbol]==null) $rowSymbolMap[$symbol]=$symbol;
		}
		//for($k=0; $k<count($rowSymbolArr); $k++){
		foreach($rowSymbolMap as $symbol=>$symbolzzz){
			////$symbol = $rowSymbolArr[$k];
			if(strlen($symbol)<3) continue;
			$rowPriceArr=$this->getRowPriceArr($vo,$symbol,100);////220
			$len=count($rowPriceArr);
			if($len<3) continue;
			$reRowPriceArr=$this->makeRowPriceArr($vo,$rowPriceArr,3);
			
			//print_p($reRowPriceArr); break;
			
			//if($reRowPriceArr[0][$voRe->value2]<500000) continue;
			
			if($tradeMap[$symbol]==null) $tradeMap[$symbol]=array(
			);
			$stockMap[$symbol]=array(
			);
			
			$len=count($rowPriceArr);
			$intervalLen=count($this->intervalArr);
			for($i=0 ;$i<1 ;$i++){
				//$vo->row=$rowPriceArr[$i];
				//if($this->isNull0($vo->row[$vo->close])) continue;
				
				$stockMap[$symbol][$voStock->rate]=0;
				
				$stockMap[$symbol][$voStock->trade]=$this->mapNoNull($tradeMap[$symbol]);
				$stockMap[$symbol][$voStock->live]=$this->mapNoNull($rowPriceLiveMap[$symbol]);
				$live=$stockMap[$symbol][$voStock->live];
				
				//$stockMap[$symbol][$voStock->close]=$vo->row[$vo->close];
				$value0=$live[$vo2->close]*$live[$vo2->volume];
				$stockMap[$symbol][$voStock->value2]=$reRowPriceArr[$i][$voRe->value2];
				$stockMap[$symbol][$voStock->perValue]=round($reRowPriceArr[$i][$voRe->perValue]);
				
				$perValue=$reRowPriceArr[$i][$voRe->perValue];
				
				//$stockMap[$symbol][$voStock->perBuy]=$this->getPricePer($vo2->buyPrice1,$stockMap[$symbol][$voStock->live]);
				//$stockMap[$symbol][$voStock->perSell]=$this->getPricePer($vo2->sellPrice1,$stockMap[$symbol][$voStock->live]);
				$perSell=$this->getPricePer($vo2->sellPrice1,$stockMap[$symbol][$voStock->live]);
				//$stockMap[$symbol][$voStock->minC1]=$reRowPriceArr[$i][$voRe->minC1];
				//$stockMap[$symbol][$voStock->maxC1]=$reRowPriceArr[$i][$voRe->maxC1];
				
				$code=$reRowPriceArr[$i][$voRe->code];
				$stockMap[$symbol][$voStock->code]=$code;
				//$stockMap[$symbol][$voStock->avg]=null;
				//$stockMap[$symbol][$voStock->minMaxArr]=array(round($reRowPriceArr[$i][$voRe->min]),$reRowPriceArr[$i][$voRe->imin],round($reRowPriceArr[$i][$voRe->max]),$reRowPriceArr[$i][$voRe->imax]);
				
				$perLow=$this->getPricePer($vo2->low,$stockMap[$symbol][$voStock->live]);
				//$perHigh= -$this->getPricePer($vo2->high,$stockMap[$symbol][$voStock->live]);
				$perHigh=$reRowPriceArr[$i][$voRe->perHigh];
				/*
				$stockMap[$symbol][$voStock->minMaxArr]=array(
					round($reRowPriceArr[$i][$voRe->minC1]),round($reRowPriceArr[$i][$voRe->maxC1]),
					round($reRowPriceArr[$i][$voRe->minC2]),round($reRowPriceArr[$i][$voRe->delta]*10),//round($reRowPriceArr[$i][$voRe->maxC2]),
					$perLow, $perHigh,
					$reRowPriceArr[$i][$voRe->maPerC1],$reRowPriceArr[$i][$voRe->maPerC2]
				);
				*/
				$stockMap[$symbol][$voStock->perHigh]=round($perHigh);
				//$stockMap[$symbol][$voStock->perMa]=$reRowPriceArr[$i][$voRe->perMa];
				$stockMap[$symbol][$voStock->perMinMax]=round($reRowPriceArr[$i][$voRe->perMinMax]);
				$stockMap[$symbol][$voStock->perMinMax2]=round($reRowPriceArr[$i]["perMinMax2"]);
				$stockMap[$symbol][$voStock->minClose]=round($reRowPriceArr[$i][$voRe->minClose]);
				
				////$stockMap[$symbol][$voStock->delta]=round(10*$reRowPriceArr[$i][$voRe->delta]);
				/////$stockMap[$symbol][$voStock->minMax]=$reRowPriceArr[$i][$voRe->minMax];
				/////$stockMap[$symbol][$voStock->status]=$reRowPriceArr[$i][$voRe->status];
				/////$stockMap[$symbol][$voStock->status0]=$reRowPriceArr[$i][$voRe->status0];
				/*
				$stat=$statMap[$code];
				if($stat!=null){
					$stockMap[$symbol][$voStock->avg]=$statMap[$code][$voStat->avg];
				}
				*/
				$stockMap[$symbol][$voStock->bv]=$taMap[$symbol]["bv"];
				$stockMap[$symbol][$voStock->roe]=$taMap[$symbol]["roe"];
				if(!$this->isNull0($live[$vo2->close])){
					$f=1+1.0*$taMap[$symbol]["roe"]*0.01;
					$period=10;
					//$stockMap[$symbol][$voStock->ff1]=round(1*($taMap[$symbol]["bv"]*pow($f, 5)/$live[$vo2->close] - 1),1);
					$stockMap[$symbol][$voStock->ff2]=round( ( $taMap[$symbol]["bv"]*pow($f,$period) - $live[$vo2->close]*pow(1+$rbank,$period) )/$live[$vo2->close] ,1);
				}
				//000 000000 000000
				$rate=0;
				/////////if($stockMap[$symbol][$voStock->value2]>700000) $rate+=1000000000;
				
				$willunset=false;
				if(count($stockMap[$symbol][$voStock->trade])!=0){
					$trade=$stockMap[$symbol][$voStock->trade];
					$dateArr=explode(",",$trade["date"]);
					$priceArr=explode(",",$trade["price"]);
					$volumeArr=explode(",",$trade["volume"]);
					$marketArr=explode(",",$trade["market"]);
					$live=$stockMap[$symbol][$voStock->live];
					
					$value=0;
					$valueNow=0;
					$profit=0;
					$tp=0;
					for($j=0;$j<count($dateArr)-1;$j++){
						if($marketArr[$j]=="") continue;
						$date=$dateArr[$j];
						$tp0=$this->ao->getTplus($date);
						if($tp0>$tp) $tp=$tp0;
						$price=$priceArr[$j];
						$volume=$volumeArr[$j];
						$value+=$price*$volume;
						$valueNow+=$this->getPrice($vo2->buyPrice1,$live)*$volume;
						$profit+=$valueNow-$value;
					}
					if($value!=0){
						$per=round(100*($valueNow-$value)/$value,2);
						//////$rate-=1000*$per;
					}
					else {
						$per=null;
					}
					//////$rate+=100000000000000;
					if(strpos($trade["market"], 'V') !== false){
						//$rate+=7000000000;
					}
					
					if($stockMap[$symbol][$voStock->value2]>700000){
						/////////////$rate-=1000000000;
					}
					if($trade["market"]==","){
						$rate=400100000100000;
						if($vn30Map[ $symbol ] !=null) {
							//$rate+=20000000;
						}
						if($stockMap[$symbol][$voStock->value2]>700000){
							//$rate-=1000000000;
							/////$rate+=10000000;
						}
						
						if( $reRowPriceArr[$i][$voRe->code]=="up" && 
					   $reRowPriceArr[$i][$voRe->minClose] <= 5 && $reRowPriceArr[$i][$voRe->delta] >=0.0 &&
					  ($reRowPriceArr[$i][$voRe->value2]>=300000 || $value0>=300000)){
							$rate+=100000100000;
							//if($reRowPriceArr[0]["code2"]=="up" || $reRowPriceArr[1]["code2"]=="up") $rate+=900000;
						}
						
						if($filterMap["fa"]=="fa") $rate+=$stockMap[$symbol][$voStock->ff2];
						//else $rate+=+1000*round($perHigh*100)+round($perValue*100);
						else $rate+=round($perValue*100);
						//else $rate+=100000*(100000-round($perSell*100))+round($perValue*100);
					}
					else{
						$rate=500100000100000;
						
						if($tp>=3) {
							$rate=501100000100000;
							/*
							if(strpos($trade["market"], 'O') !== false || strpos($trade["market"], 'G') !== false  || strpos($trade["market"], 'S') !== false){
								$rate+=2000000000;
							} else if(strpos($trade["market"], 'W') !== false){
								$rate+=1900000000;
							}
							*/
						}
						
						if($faMap[ $symbol ] !=null) {
							//$rate+=5000000000;
							
						}
						if( $reRowPriceArr[$i][$voRe->code]=="up" ){
						} else $rate+=100000100000;
						
						if($filterMap["fa"]=="fa") $rate+=$stockMap[$symbol][$voStock->ff2];
						//else $rate+=round($perValue*100);
						else $rate+=(100000*round($perHigh*100))+round($perValue*100);
						//else $rate+=-1000*round($perSell*100)+round($perValue*100);
					}
				} else {
					if($faMap[ $symbol ] !=null) {
						//$rate+=20000000;
						//$rate+=2000000;
					}
					//if($re[$i][$voRe->code]=="up" && $re[$i][$voRe->minClose]<=5 && $re[$i+1]["minClose0"]<=3 && $re[$i+1]["minClose2"]<=40
					if( $reRowPriceArr[$i][$voRe->code]=="up" && 
					   $reRowPriceArr[$i][$voRe->minClose] <= 5 && $reRowPriceArr[$i+1]["minClose2"]<=40 && $reRowPriceArr[$i][$voRe->delta] >=0.0 &&
					  ($reRowPriceArr[$i][$voRe->value2]>=300000 || $value0>=300000)){
							$rate=300100000100000;
							//if($reRowPriceArr[0]["code2"]=="up" || $reRowPriceArr[1]["code2"]=="up") $rate+=900000;
						
						if($filterMap["fa"]=="fa") $rate+=$stockMap[$symbol][$voStock->ff2];
						else $rate+=round($perValue*100);
						//else $rate+=100000*(100000-round($perSell*100))+round($perValue*100);
						
						//if($filterMap["fa"]=="fa" && ($stockMap[$symbol][$voStock->roe]>=20 || $ysFaMap[$symbol]!=null) && $live[$vo2->close]<=3*$stockMap[$symbol][$voStock->bv] && $noFaMap[$symbol]==null) $rate+=100000;
						
					} else {
						$rate=200100000100000;
						if($filterMap["fa"]=="fa") $rate+=$stockMap[$symbol][$voStock->ff2];
						else $rate+=round($perValue*100);
						//else $rate+=100000*(100000-round($perSell*100))+round($perValue*100);
						
						//$rate+= 100*$reRowPriceArr[$i][$voRe->maxC2];
						//if($filterMap["fa"]=="fa" && ($stockMap[$symbol][$voStock->roe]>=20 || $ysFaMap[$symbol]!=null) && $live[$vo2->close]<=3*$stockMap[$symbol][$voStock->bv] && $noFaMap[$symbol]==null) $rate+=100000;
						//if($reRowPriceArr[$i][$voRe->value2]<=500000) $willunset=true;
					}
				}
				if($symbol=="VN30INDEX") $rate=900100000100001;
				if($symbol=="VNINDEX") $rate=900100000100000;
				//if($rowPriceArr[$i][$vo->symbol]=="HAINDEX") $rate=89000000000;
				//if($rowPriceArr[$i][$vo->symbol]=="HA30INDEX") $rate=87000000000;
				//if($rowPriceArr[$i][$vo->symbol]=="VNALLINDEX") $rate=80000000000;
				
				//if(substr($rowPriceArr[$i][$vo->symbol], 0, 5) =="VN30F") $rate=79000000000;
				/*
				foreach($futureArr as $iii=> $fsymbol){
					if($rowPriceArr[$i][$vo->symbol]==$fsymbol){
						$rate=79000000000+$iii*1000000;
						$willunset=false;
						break;
					}
				}
				*/
				
				//if(in_array($rowPriceArr[$i][$vo->symbol],$futureArr)) {
				if($futureMap[ $symbol ] !=null) {
					///$rate+=79000000000;//+round($reRowPriceArr[$i][$voRe->value2]/1000000);
					$rate=800100000100000+round($reRowPriceArr[$i][$voRe->value2]/1000000);
					$willunset=false;
				}
				
				$rate0 = 400100000100000+700000100000;
				if($rate<$rate0 && $vn30Map[ $symbol ] !=null) {
					//$rate=$rate0 - $vn30Map[ $symbol ];
					$rate=$rate0+round($perValue*100);
					//$rate=$rate0+(100000-round($perSell*100));
					$willunset=false;
				}
				
				if($faMap[ $symbol ] !=null) {
					$willunset=false;
				}
				
				$stockMap[$symbol][$voStock->rate]=$rate;
				if($symbol=="VNALLINDEX") unset($stockMap[$symbol]);
				if($symbol=="HA30INDEX") unset($stockMap[$symbol]);
				if($symbol=="HAINDEX") unset($stockMap[$symbol]);
				if($willunset) unset($stockMap[$symbol]);
			}
			
			if(count($stockMap[$symbol][$voStock->trade])==0 && !$this->isMarket($symbol)){
				//if($stockMap[$symbol][$voStock->stat]["count"]<50) unset($stockMap[$symbol]);
				//if($stockMap[$symbol][$voStock->stat1]["count"]<50) unset($stockMap[$symbol]);
			}
		}
		//stock_ViewStock::$rate=$voStock->rate;
		function sortFunc($a, $b){
			if($a[0] > $b[0]) return -1;//rate
			if($a[0] < $b[0]) return 1;
			return 0;
		}
		uasort($stockMap, "sortFunc");
		//print_p($stockMap);
		return $stockMap;
//@>
	}
	public function mapNoNull(&$map){
		if($map==null) return array(
		);
		return $map;
	}
	public function loadTradeMap(){
		$tradeMap=$this->obJfile->load("stock_ViewStock/tradeMap");
		return $tradeMap;
	}

	public static function main(){
		//@ que($__doc)->ready(function(){
			stock_Ao::get()->bean("stock_ViewStock/con")->view();
		//@ }); 
	}
}